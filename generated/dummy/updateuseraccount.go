// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dummy

import (
	"errors"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateUserAccount is the `update_user_account` instruction.
type UpdateUserAccount struct {
	Request InstructionRequest

	// [0] = [WRITE] user_account
	//
	// [1] = [WRITE, SIGNER] user
	//
	// [2] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateUserAccountInstructionBuilder creates a new `UpdateUserAccount` instruction builder.
func NewUpdateUserAccountInstructionBuilder() *UpdateUserAccount {
	nd := &UpdateUserAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(ag_solanago.MustPublicKeyFromBase58("11111111111111111111111111111111"))
	return nd
}

// SetRequest sets the "request" parameter.
func (inst *UpdateUserAccount) SetRequest(request InstructionRequest) *UpdateUserAccount {
	inst.Request = request
	return inst
}

// SetUserAccountAccount sets the "user_account" account.
func (inst *UpdateUserAccount) SetUserAccountAccount(userAccount ag_solanago.PublicKey) *UpdateUserAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(userAccount).WRITE()
	return inst
}

func (inst *UpdateUserAccount) findFindUserAccountAddress(user ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: user
	seeds = append(seeds, user.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindUserAccountAddressWithBumpSeed calculates UserAccount account address with given seeds and a known bump seed.
func (inst *UpdateUserAccount) FindUserAccountAddressWithBumpSeed(user ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindUserAccountAddress(user, bumpSeed)
	return
}

func (inst *UpdateUserAccount) MustFindUserAccountAddressWithBumpSeed(user ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindUserAccountAddress(user, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindUserAccountAddress finds UserAccount account address with given seeds.
func (inst *UpdateUserAccount) FindUserAccountAddress(user ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindUserAccountAddress(user, 0)
	return
}

func (inst *UpdateUserAccount) MustFindUserAccountAddress(user ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindUserAccountAddress(user, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetUserAccountAccount gets the "user_account" account.
func (inst *UpdateUserAccount) GetUserAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserAccount sets the "user" account.
func (inst *UpdateUserAccount) SetUserAccount(user ag_solanago.PublicKey) *UpdateUserAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *UpdateUserAccount) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *UpdateUserAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UpdateUserAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *UpdateUserAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst UpdateUserAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateUserAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateUserAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateUserAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Request == nil {
			return errors.New("Request parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.UserAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *UpdateUserAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateUserAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Request", inst.Request))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         user_", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          user", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("system_program", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj UpdateUserAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Request` param:
	{
		tmp := instructionRequestContainer{}
		switch realvalue := obj.Request.(type) {
		case *InstructionRequestV1Tuple:
			tmp.Enum = 0
			tmp.V1 = *realvalue
		case *InstructionRequestV2Tuple:
			tmp.Enum = 1
			tmp.V2 = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}
func (obj *UpdateUserAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Request`:
	{
		tmp := new(instructionRequestContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Request = &tmp.V1
		case 1:
			obj.Request = &tmp.V2
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

// NewUpdateUserAccountInstruction declares a new UpdateUserAccount instruction with the provided parameters and accounts.
func NewUpdateUserAccountInstruction(
	// Parameters:
	request InstructionRequest,
	// Accounts:
	userAccount ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *UpdateUserAccount {
	return NewUpdateUserAccountInstructionBuilder().
		SetRequest(request).
		SetUserAccountAccount(userAccount).
		SetUserAccount(user).
		SetSystemProgramAccount(systemProgram)
}
