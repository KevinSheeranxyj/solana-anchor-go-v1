// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dummy

import (
	"encoding/base64"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	"reflect"
	"strings"
)

type DecrementedEventData struct {
	User   ag_solanago.PublicKey
	Token  string
	Amount uint64
}

var DecrementedEventDataDiscriminator = [8]byte{100, 178, 255, 27, 214, 222, 85, 48}

func (obj DecrementedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DecrementedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DecrementedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DecrementedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[100 178 255 27 214 222 85 48]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*DecrementedEventData) isEventData() {}

type IncrementedEventData struct {
	User   ag_solanago.PublicKey
	Token  string
	Amount uint64
}

var IncrementedEventDataDiscriminator = [8]byte{92, 207, 119, 204, 71, 205, 108, 15}

func (obj IncrementedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(IncrementedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *IncrementedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(IncrementedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[92 207 119 204 71 205 108 15]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*IncrementedEventData) isEventData() {}

type VersionedEventV1EventData struct {
	Field1 uint64
	Field2 string
}

var VersionedEventV1EventDataDiscriminator = [8]byte{204, 40, 71, 107, 9, 186, 240, 233}

func (obj VersionedEventV1EventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VersionedEventV1EventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Field1` param:
	err = encoder.Encode(obj.Field1)
	if err != nil {
		return err
	}
	// Serialize `Field2` param:
	err = encoder.Encode(obj.Field2)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VersionedEventV1EventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VersionedEventV1EventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[204 40 71 107 9 186 240 233]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Field1`:
	err = decoder.Decode(&obj.Field1)
	if err != nil {
		return err
	}
	// Deserialize `Field2`:
	err = decoder.Decode(&obj.Field2)
	if err != nil {
		return err
	}
	return nil
}

func (*VersionedEventV1EventData) isEventData() {}

type VersionedEventV2EventData struct {
	Field1 uint64
	Field2 uint32
	Field3 string
	Field4 bool
}

var VersionedEventV2EventDataDiscriminator = [8]byte{89, 123, 136, 117, 103, 186, 255, 80}

func (obj VersionedEventV2EventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VersionedEventV2EventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Field1` param:
	err = encoder.Encode(obj.Field1)
	if err != nil {
		return err
	}
	// Serialize `Field2` param:
	err = encoder.Encode(obj.Field2)
	if err != nil {
		return err
	}
	// Serialize `Field3` param:
	err = encoder.Encode(obj.Field3)
	if err != nil {
		return err
	}
	// Serialize `Field4` param:
	err = encoder.Encode(obj.Field4)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VersionedEventV2EventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VersionedEventV2EventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[89 123 136 117 103 186 255 80]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Field1`:
	err = decoder.Decode(&obj.Field1)
	if err != nil {
		return err
	}
	// Deserialize `Field2`:
	err = decoder.Decode(&obj.Field2)
	if err != nil {
		return err
	}
	// Deserialize `Field3`:
	err = decoder.Decode(&obj.Field3)
	if err != nil {
		return err
	}
	// Deserialize `Field4`:
	err = decoder.Decode(&obj.Field4)
	if err != nil {
		return err
	}
	return nil
}

func (*VersionedEventV2EventData) isEventData() {}

var eventTypes = map[[8]byte]reflect.Type{
	DecrementedEventDataDiscriminator:      reflect.TypeOf(DecrementedEventData{}),
	IncrementedEventDataDiscriminator:      reflect.TypeOf(IncrementedEventData{}),
	VersionedEventV1EventDataDiscriminator: reflect.TypeOf(VersionedEventV1EventData{}),
	VersionedEventV2EventDataDiscriminator: reflect.TypeOf(VersionedEventV2EventData{}),
}
var eventNames = map[[8]byte]string{
	DecrementedEventDataDiscriminator:      "Decremented",
	IncrementedEventDataDiscriminator:      "Incremented",
	VersionedEventV1EventDataDiscriminator: "VersionedEventV1",
	VersionedEventV2EventDataDiscriminator: "VersionedEventV2",
}
var (
	_ *strings.Builder = nil
)
var (
	_ *base64.Encoding = nil
)
var (
	_ *ag_binary.Decoder = nil
)

type Event struct {
	Name string
	Data EventData
}

type EventData interface {
	UnmarshalWithDecoder(decoder *ag_binary.Decoder) error
	isEventData()
}

const eventLogPrefix = "Program data: "

func DecodeEvents(logMessages []string) (evts []*Event, err error) {
	decoder := ag_binary.NewDecoderWithEncoding(nil, ag_binary.EncodingBorsh)
	for _, log := range logMessages {
		if strings.HasPrefix(log, eventLogPrefix) {
			eventBase64 := log[len(eventLogPrefix):]

			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				return
			}

			eventDiscriminator := ag_binary.TypeID(eventBinary[:8])
			if eventType, ok := eventTypes[eventDiscriminator]; ok {
				eventData := reflect.New(eventType).Interface().(EventData)
				decoder.Reset(eventBinary)
				if err = eventData.UnmarshalWithDecoder(decoder); err != nil {
					return
				}
				evts = append(evts, &Event{
					Name: eventNames[eventDiscriminator],
					Data: eventData,
				})
			}
		}
	}
	return
}
