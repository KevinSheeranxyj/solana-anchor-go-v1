// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// FundManagerCloseRewardPool is the `fund_manager_close_reward_pool` instruction.
type FundManagerCloseRewardPool struct {
	RewardPoolId *uint8

	// [0] = [SIGNER] fund_manager
	//
	// [1] = [] receipt_token_mint
	//
	// [2] = [WRITE] reward_account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewFundManagerCloseRewardPoolInstructionBuilder creates a new `FundManagerCloseRewardPool` instruction builder.
func NewFundManagerCloseRewardPoolInstructionBuilder() *FundManagerCloseRewardPool {
	nd := &FundManagerCloseRewardPool{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(Addresses["5UpLTLA7Wjqp7qdfjuTtPcUw3aVtbqFA5Mgm34mxPNg2"]).SIGNER()
	nd.AccountMetaSlice[1] = ag_solanago.Meta(Addresses["FRAGSEthVFL7fdqM8hxfxkfCZzUvmg21cqPJVvC1qdbo"])
	return nd
}

// SetRewardPoolId sets the "reward_pool_id" parameter.
func (inst *FundManagerCloseRewardPool) SetRewardPoolId(reward_pool_id uint8) *FundManagerCloseRewardPool {
	inst.RewardPoolId = &reward_pool_id
	return inst
}

// SetFundManagerAccount sets the "fund_manager" account.
func (inst *FundManagerCloseRewardPool) SetFundManagerAccount(fundManager ag_solanago.PublicKey) *FundManagerCloseRewardPool {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(fundManager).SIGNER()
	return inst
}

// GetFundManagerAccount gets the "fund_manager" account.
func (inst *FundManagerCloseRewardPool) GetFundManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetReceiptTokenMintAccount sets the "receipt_token_mint" account.
func (inst *FundManagerCloseRewardPool) SetReceiptTokenMintAccount(receiptTokenMint ag_solanago.PublicKey) *FundManagerCloseRewardPool {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(receiptTokenMint)
	return inst
}

// GetReceiptTokenMintAccount gets the "receipt_token_mint" account.
func (inst *FundManagerCloseRewardPool) GetReceiptTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRewardAccountAccount sets the "reward_account" account.
func (inst *FundManagerCloseRewardPool) SetRewardAccountAccount(rewardAccount ag_solanago.PublicKey) *FundManagerCloseRewardPool {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rewardAccount).WRITE()
	return inst
}

func (inst *FundManagerCloseRewardPool) findFindRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: reward
	seeds = append(seeds, []byte{byte(0x72), byte(0x65), byte(0x77), byte(0x61), byte(0x72), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindRewardAccountAddressWithBumpSeed calculates RewardAccount account address with given seeds and a known bump seed.
func (inst *FundManagerCloseRewardPool) FindRewardAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindRewardAccountAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *FundManagerCloseRewardPool) MustFindRewardAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindRewardAccountAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindRewardAccountAddress finds RewardAccount account address with given seeds.
func (inst *FundManagerCloseRewardPool) FindRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindRewardAccountAddress(receiptTokenMint, 0)
	return
}

func (inst *FundManagerCloseRewardPool) MustFindRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindRewardAccountAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetRewardAccountAccount gets the "reward_account" account.
func (inst *FundManagerCloseRewardPool) GetRewardAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst FundManagerCloseRewardPool) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_FundManagerCloseRewardPool,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst FundManagerCloseRewardPool) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *FundManagerCloseRewardPool) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardPoolId == nil {
			return errors.New("RewardPoolId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.FundManager is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ReceiptTokenMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RewardAccount is not set")
		}
	}
	return nil
}

func (inst *FundManagerCloseRewardPool) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("FundManagerCloseRewardPool")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  RewardPoolId", *inst.RewardPoolId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      fund_manager", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("receipt_token_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           reward_", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj FundManagerCloseRewardPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardPoolId` param:
	err = encoder.Encode(obj.RewardPoolId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *FundManagerCloseRewardPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardPoolId`:
	err = decoder.Decode(&obj.RewardPoolId)
	if err != nil {
		return err
	}
	return nil
}

// NewFundManagerCloseRewardPoolInstruction declares a new FundManagerCloseRewardPool instruction with the provided parameters and accounts.
func NewFundManagerCloseRewardPoolInstruction(
	// Parameters:
	reward_pool_id uint8,
	// Accounts:
	fundManager ag_solanago.PublicKey,
	receiptTokenMint ag_solanago.PublicKey,
	rewardAccount ag_solanago.PublicKey) *FundManagerCloseRewardPool {
	return NewFundManagerCloseRewardPoolInstructionBuilder().
		SetRewardPoolId(reward_pool_id).
		SetFundManagerAccount(fundManager).
		SetReceiptTokenMintAccount(receiptTokenMint).
		SetRewardAccountAccount(rewardAccount)
}
