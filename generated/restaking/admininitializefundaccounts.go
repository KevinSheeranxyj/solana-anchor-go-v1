// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AdminInitializeFundAccounts is the `admin_initialize_fund_accounts` instruction.
type AdminInitializeFundAccounts struct {

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] admin
	//
	// [2] = [] system_program
	//
	// [3] = [] receipt_token_program
	//
	// [4] = [] receipt_token_mint
	//
	// [5] = [WRITE] receipt_token_lock_authority
	//
	// [6] = [WRITE] receipt_token_lock_account
	//
	// [7] = [WRITE] fund_account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAdminInitializeFundAccountsInstructionBuilder creates a new `AdminInitializeFundAccounts` instruction builder.
func NewAdminInitializeFundAccountsInstructionBuilder() *AdminInitializeFundAccounts {
	nd := &AdminInitializeFundAccounts{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	nd.AccountMetaSlice[1] = ag_solanago.Meta(Addresses["fragkamrANLvuZYQPcmPsCATQAabkqNGH6gxqqPG3aP"]).SIGNER()
	nd.AccountMetaSlice[2] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	nd.AccountMetaSlice[3] = ag_solanago.Meta(Addresses["TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"])
	nd.AccountMetaSlice[4] = ag_solanago.Meta(Addresses["FRAGSEthVFL7fdqM8hxfxkfCZzUvmg21cqPJVvC1qdbo"])
	return nd
}

// SetPayerAccount sets the "payer" account.
func (inst *AdminInitializeFundAccounts) SetPayerAccount(payer ag_solanago.PublicKey) *AdminInitializeFundAccounts {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *AdminInitializeFundAccounts) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *AdminInitializeFundAccounts) SetAdminAccount(admin ag_solanago.PublicKey) *AdminInitializeFundAccounts {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AdminInitializeFundAccounts) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *AdminInitializeFundAccounts) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AdminInitializeFundAccounts {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *AdminInitializeFundAccounts) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetReceiptTokenProgramAccount sets the "receipt_token_program" account.
func (inst *AdminInitializeFundAccounts) SetReceiptTokenProgramAccount(receiptTokenProgram ag_solanago.PublicKey) *AdminInitializeFundAccounts {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(receiptTokenProgram)
	return inst
}

// GetReceiptTokenProgramAccount gets the "receipt_token_program" account.
func (inst *AdminInitializeFundAccounts) GetReceiptTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetReceiptTokenMintAccount sets the "receipt_token_mint" account.
func (inst *AdminInitializeFundAccounts) SetReceiptTokenMintAccount(receiptTokenMint ag_solanago.PublicKey) *AdminInitializeFundAccounts {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(receiptTokenMint)
	return inst
}

// GetReceiptTokenMintAccount gets the "receipt_token_mint" account.
func (inst *AdminInitializeFundAccounts) GetReceiptTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReceiptTokenLockAuthorityAccount sets the "receipt_token_lock_authority" account.
func (inst *AdminInitializeFundAccounts) SetReceiptTokenLockAuthorityAccount(receiptTokenLockAuthority ag_solanago.PublicKey) *AdminInitializeFundAccounts {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(receiptTokenLockAuthority).WRITE()
	return inst
}

func (inst *AdminInitializeFundAccounts) findFindReceiptTokenLockAuthorityAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: receipt_token_lock_authority
	seeds = append(seeds, []byte{byte(0x72), byte(0x65), byte(0x63), byte(0x65), byte(0x69), byte(0x70), byte(0x74), byte(0x5f), byte(0x74), byte(0x6f), byte(0x6b), byte(0x65), byte(0x6e), byte(0x5f), byte(0x6c), byte(0x6f), byte(0x63), byte(0x6b), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindReceiptTokenLockAuthorityAddressWithBumpSeed calculates ReceiptTokenLockAuthority account address with given seeds and a known bump seed.
func (inst *AdminInitializeFundAccounts) FindReceiptTokenLockAuthorityAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindReceiptTokenLockAuthorityAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *AdminInitializeFundAccounts) MustFindReceiptTokenLockAuthorityAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindReceiptTokenLockAuthorityAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindReceiptTokenLockAuthorityAddress finds ReceiptTokenLockAuthority account address with given seeds.
func (inst *AdminInitializeFundAccounts) FindReceiptTokenLockAuthorityAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindReceiptTokenLockAuthorityAddress(receiptTokenMint, 0)
	return
}

func (inst *AdminInitializeFundAccounts) MustFindReceiptTokenLockAuthorityAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindReceiptTokenLockAuthorityAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetReceiptTokenLockAuthorityAccount gets the "receipt_token_lock_authority" account.
func (inst *AdminInitializeFundAccounts) GetReceiptTokenLockAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetReceiptTokenLockAccountAccount sets the "receipt_token_lock_account" account.
func (inst *AdminInitializeFundAccounts) SetReceiptTokenLockAccountAccount(receiptTokenLockAccount ag_solanago.PublicKey) *AdminInitializeFundAccounts {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(receiptTokenLockAccount).WRITE()
	return inst
}

func (inst *AdminInitializeFundAccounts) findFindReceiptTokenLockAccountAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: receipt_token_lock
	seeds = append(seeds, []byte{byte(0x72), byte(0x65), byte(0x63), byte(0x65), byte(0x69), byte(0x70), byte(0x74), byte(0x5f), byte(0x74), byte(0x6f), byte(0x6b), byte(0x65), byte(0x6e), byte(0x5f), byte(0x6c), byte(0x6f), byte(0x63), byte(0x6b)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindReceiptTokenLockAccountAddressWithBumpSeed calculates ReceiptTokenLockAccount account address with given seeds and a known bump seed.
func (inst *AdminInitializeFundAccounts) FindReceiptTokenLockAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindReceiptTokenLockAccountAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *AdminInitializeFundAccounts) MustFindReceiptTokenLockAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindReceiptTokenLockAccountAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindReceiptTokenLockAccountAddress finds ReceiptTokenLockAccount account address with given seeds.
func (inst *AdminInitializeFundAccounts) FindReceiptTokenLockAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindReceiptTokenLockAccountAddress(receiptTokenMint, 0)
	return
}

func (inst *AdminInitializeFundAccounts) MustFindReceiptTokenLockAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindReceiptTokenLockAccountAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetReceiptTokenLockAccountAccount gets the "receipt_token_lock_account" account.
func (inst *AdminInitializeFundAccounts) GetReceiptTokenLockAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetFundAccountAccount sets the "fund_account" account.
func (inst *AdminInitializeFundAccounts) SetFundAccountAccount(fundAccount ag_solanago.PublicKey) *AdminInitializeFundAccounts {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(fundAccount).WRITE()
	return inst
}

func (inst *AdminInitializeFundAccounts) findFindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: fund
	seeds = append(seeds, []byte{byte(0x66), byte(0x75), byte(0x6e), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundAccountAddressWithBumpSeed calculates FundAccount account address with given seeds and a known bump seed.
func (inst *AdminInitializeFundAccounts) FindFundAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundAccountAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *AdminInitializeFundAccounts) MustFindFundAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundAccountAddress finds FundAccount account address with given seeds.
func (inst *AdminInitializeFundAccounts) FindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundAccountAddress(receiptTokenMint, 0)
	return
}

func (inst *AdminInitializeFundAccounts) MustFindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundAccountAccount gets the "fund_account" account.
func (inst *AdminInitializeFundAccounts) GetFundAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst AdminInitializeFundAccounts) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AdminInitializeFundAccounts,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AdminInitializeFundAccounts) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AdminInitializeFundAccounts) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ReceiptTokenProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ReceiptTokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ReceiptTokenLockAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ReceiptTokenLockAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.FundAccount is not set")
		}
	}
	return nil
}

func (inst *AdminInitializeFundAccounts) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AdminInitializeFundAccounts")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                       payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                       admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("              system_program", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       receipt_token_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          receipt_token_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("receipt_token_lock_authority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         receipt_token_lock_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                       fund_", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj AdminInitializeFundAccounts) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *AdminInitializeFundAccounts) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewAdminInitializeFundAccountsInstruction declares a new AdminInitializeFundAccounts instruction with the provided parameters and accounts.
func NewAdminInitializeFundAccountsInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	receiptTokenProgram ag_solanago.PublicKey,
	receiptTokenMint ag_solanago.PublicKey,
	receiptTokenLockAuthority ag_solanago.PublicKey,
	receiptTokenLockAccount ag_solanago.PublicKey,
	fundAccount ag_solanago.PublicKey) *AdminInitializeFundAccounts {
	return NewAdminInitializeFundAccountsInstructionBuilder().
		SetPayerAccount(payer).
		SetAdminAccount(admin).
		SetSystemProgramAccount(systemProgram).
		SetReceiptTokenProgramAccount(receiptTokenProgram).
		SetReceiptTokenMintAccount(receiptTokenMint).
		SetReceiptTokenLockAuthorityAccount(receiptTokenLockAuthority).
		SetReceiptTokenLockAccountAccount(receiptTokenLockAccount).
		SetFundAccountAccount(fundAccount)
}
