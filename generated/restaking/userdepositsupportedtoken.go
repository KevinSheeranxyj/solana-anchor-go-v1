// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UserDepositSupportedToken is the `user_deposit_supported_token` instruction.
type UserDepositSupportedToken struct {
	Amount   *uint64
	Metadata *DepositMetadata `bin:"optional"`

	// [0] = [WRITE, SIGNER] user
	//
	// [1] = [] system_program
	//
	// [2] = [] associated_token_program
	//
	// [3] = [] receipt_token_program
	//
	// [4] = [] supported_token_program
	//
	// [5] = [WRITE] receipt_token_mint
	//
	// [6] = [] receipt_token_mint_authority
	//
	// [7] = [WRITE] user_receipt_token_account
	//
	// [8] = [] supported_token_mint
	//
	// [9] = [] supported_token_authority
	//
	// [10] = [WRITE] supported_token_account
	//
	// [11] = [WRITE] user_supported_token_account
	//
	// [12] = [WRITE] fund_account
	//
	// [13] = [WRITE] user_fund_account
	//
	// [14] = [WRITE] reward_account
	//
	// [15] = [WRITE] user_reward_account
	//
	// [16] = [] instruction_sysvar
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUserDepositSupportedTokenInstructionBuilder creates a new `UserDepositSupportedToken` instruction builder.
func NewUserDepositSupportedTokenInstructionBuilder() *UserDepositSupportedToken {
	nd := &UserDepositSupportedToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 17),
	}
	nd.AccountMetaSlice[1] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	nd.AccountMetaSlice[2] = ag_solanago.Meta(Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"])
	nd.AccountMetaSlice[3] = ag_solanago.Meta(Addresses["TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"])
	nd.AccountMetaSlice[5] = ag_solanago.Meta(Addresses["FRAGSEthVFL7fdqM8hxfxkfCZzUvmg21cqPJVvC1qdbo"]).WRITE()
	nd.AccountMetaSlice[16] = ag_solanago.Meta(Addresses["Sysvar1nstructions1111111111111111111111111"])
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *UserDepositSupportedToken) SetAmount(amount uint64) *UserDepositSupportedToken {
	inst.Amount = &amount
	return inst
}

// SetMetadata sets the "metadata" parameter.
func (inst *UserDepositSupportedToken) SetMetadata(metadata DepositMetadata) *UserDepositSupportedToken {
	inst.Metadata = &metadata
	return inst
}

// SetUserAccount sets the "user" account.
func (inst *UserDepositSupportedToken) SetUserAccount(user ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(user).WRITE().SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *UserDepositSupportedToken) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *UserDepositSupportedToken) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *UserDepositSupportedToken) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *UserDepositSupportedToken) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *UserDepositSupportedToken) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetReceiptTokenProgramAccount sets the "receipt_token_program" account.
func (inst *UserDepositSupportedToken) SetReceiptTokenProgramAccount(receiptTokenProgram ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(receiptTokenProgram)
	return inst
}

// GetReceiptTokenProgramAccount gets the "receipt_token_program" account.
func (inst *UserDepositSupportedToken) GetReceiptTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSupportedTokenProgramAccount sets the "supported_token_program" account.
func (inst *UserDepositSupportedToken) SetSupportedTokenProgramAccount(supportedTokenProgram ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(supportedTokenProgram)
	return inst
}

// GetSupportedTokenProgramAccount gets the "supported_token_program" account.
func (inst *UserDepositSupportedToken) GetSupportedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetReceiptTokenMintAccount sets the "receipt_token_mint" account.
func (inst *UserDepositSupportedToken) SetReceiptTokenMintAccount(receiptTokenMint ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(receiptTokenMint).WRITE()
	return inst
}

// GetReceiptTokenMintAccount gets the "receipt_token_mint" account.
func (inst *UserDepositSupportedToken) GetReceiptTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetReceiptTokenMintAuthorityAccount sets the "receipt_token_mint_authority" account.
func (inst *UserDepositSupportedToken) SetReceiptTokenMintAuthorityAccount(receiptTokenMintAuthority ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(receiptTokenMintAuthority)
	return inst
}

func (inst *UserDepositSupportedToken) findFindReceiptTokenMintAuthorityAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: receipt_token_mint_authority
	seeds = append(seeds, []byte{byte(0x72), byte(0x65), byte(0x63), byte(0x65), byte(0x69), byte(0x70), byte(0x74), byte(0x5f), byte(0x74), byte(0x6f), byte(0x6b), byte(0x65), byte(0x6e), byte(0x5f), byte(0x6d), byte(0x69), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindReceiptTokenMintAuthorityAddressWithBumpSeed calculates ReceiptTokenMintAuthority account address with given seeds and a known bump seed.
func (inst *UserDepositSupportedToken) FindReceiptTokenMintAuthorityAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindReceiptTokenMintAuthorityAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *UserDepositSupportedToken) MustFindReceiptTokenMintAuthorityAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindReceiptTokenMintAuthorityAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindReceiptTokenMintAuthorityAddress finds ReceiptTokenMintAuthority account address with given seeds.
func (inst *UserDepositSupportedToken) FindReceiptTokenMintAuthorityAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindReceiptTokenMintAuthorityAddress(receiptTokenMint, 0)
	return
}

func (inst *UserDepositSupportedToken) MustFindReceiptTokenMintAuthorityAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindReceiptTokenMintAuthorityAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetReceiptTokenMintAuthorityAccount gets the "receipt_token_mint_authority" account.
func (inst *UserDepositSupportedToken) GetReceiptTokenMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetUserReceiptTokenAccountAccount sets the "user_receipt_token_account" account.
func (inst *UserDepositSupportedToken) SetUserReceiptTokenAccountAccount(userReceiptTokenAccount ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(userReceiptTokenAccount).WRITE()
	return inst
}

func (inst *UserDepositSupportedToken) findFindUserReceiptTokenAccountAddress(user ag_solanago.PublicKey, receiptTokenProgram ag_solanago.PublicKey, receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: user
	seeds = append(seeds, user.Bytes())
	// path: receiptTokenProgram
	seeds = append(seeds, receiptTokenProgram.Bytes())
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindUserReceiptTokenAccountAddressWithBumpSeed calculates UserReceiptTokenAccount account address with given seeds and a known bump seed.
func (inst *UserDepositSupportedToken) FindUserReceiptTokenAccountAddressWithBumpSeed(user ag_solanago.PublicKey, receiptTokenProgram ag_solanago.PublicKey, receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindUserReceiptTokenAccountAddress(user, receiptTokenProgram, receiptTokenMint, bumpSeed)
	return
}

func (inst *UserDepositSupportedToken) MustFindUserReceiptTokenAccountAddressWithBumpSeed(user ag_solanago.PublicKey, receiptTokenProgram ag_solanago.PublicKey, receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindUserReceiptTokenAccountAddress(user, receiptTokenProgram, receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindUserReceiptTokenAccountAddress finds UserReceiptTokenAccount account address with given seeds.
func (inst *UserDepositSupportedToken) FindUserReceiptTokenAccountAddress(user ag_solanago.PublicKey, receiptTokenProgram ag_solanago.PublicKey, receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindUserReceiptTokenAccountAddress(user, receiptTokenProgram, receiptTokenMint, 0)
	return
}

func (inst *UserDepositSupportedToken) MustFindUserReceiptTokenAccountAddress(user ag_solanago.PublicKey, receiptTokenProgram ag_solanago.PublicKey, receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindUserReceiptTokenAccountAddress(user, receiptTokenProgram, receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetUserReceiptTokenAccountAccount gets the "user_receipt_token_account" account.
func (inst *UserDepositSupportedToken) GetUserReceiptTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSupportedTokenMintAccount sets the "supported_token_mint" account.
func (inst *UserDepositSupportedToken) SetSupportedTokenMintAccount(supportedTokenMint ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(supportedTokenMint)
	return inst
}

// GetSupportedTokenMintAccount gets the "supported_token_mint" account.
func (inst *UserDepositSupportedToken) GetSupportedTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSupportedTokenAuthorityAccount sets the "supported_token_authority" account.
func (inst *UserDepositSupportedToken) SetSupportedTokenAuthorityAccount(supportedTokenAuthority ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(supportedTokenAuthority)
	return inst
}

func (inst *UserDepositSupportedToken) findFindSupportedTokenAuthorityAddress(receiptTokenMint ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: supported_token_authority
	seeds = append(seeds, []byte{byte(0x73), byte(0x75), byte(0x70), byte(0x70), byte(0x6f), byte(0x72), byte(0x74), byte(0x65), byte(0x64), byte(0x5f), byte(0x74), byte(0x6f), byte(0x6b), byte(0x65), byte(0x6e), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())
	// path: supportedTokenMint
	seeds = append(seeds, supportedTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindSupportedTokenAuthorityAddressWithBumpSeed calculates SupportedTokenAuthority account address with given seeds and a known bump seed.
func (inst *UserDepositSupportedToken) FindSupportedTokenAuthorityAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindSupportedTokenAuthorityAddress(receiptTokenMint, supportedTokenMint, bumpSeed)
	return
}

func (inst *UserDepositSupportedToken) MustFindSupportedTokenAuthorityAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindSupportedTokenAuthorityAddress(receiptTokenMint, supportedTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindSupportedTokenAuthorityAddress finds SupportedTokenAuthority account address with given seeds.
func (inst *UserDepositSupportedToken) FindSupportedTokenAuthorityAddress(receiptTokenMint ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindSupportedTokenAuthorityAddress(receiptTokenMint, supportedTokenMint, 0)
	return
}

func (inst *UserDepositSupportedToken) MustFindSupportedTokenAuthorityAddress(receiptTokenMint ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindSupportedTokenAuthorityAddress(receiptTokenMint, supportedTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetSupportedTokenAuthorityAccount gets the "supported_token_authority" account.
func (inst *UserDepositSupportedToken) GetSupportedTokenAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSupportedTokenAccountAccount sets the "supported_token_account" account.
func (inst *UserDepositSupportedToken) SetSupportedTokenAccountAccount(supportedTokenAccount ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(supportedTokenAccount).WRITE()
	return inst
}

func (inst *UserDepositSupportedToken) findFindSupportedTokenAccountAddress(receiptTokenMint ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: supported_token
	seeds = append(seeds, []byte{byte(0x73), byte(0x75), byte(0x70), byte(0x70), byte(0x6f), byte(0x72), byte(0x74), byte(0x65), byte(0x64), byte(0x5f), byte(0x74), byte(0x6f), byte(0x6b), byte(0x65), byte(0x6e)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())
	// path: supportedTokenMint
	seeds = append(seeds, supportedTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindSupportedTokenAccountAddressWithBumpSeed calculates SupportedTokenAccount account address with given seeds and a known bump seed.
func (inst *UserDepositSupportedToken) FindSupportedTokenAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindSupportedTokenAccountAddress(receiptTokenMint, supportedTokenMint, bumpSeed)
	return
}

func (inst *UserDepositSupportedToken) MustFindSupportedTokenAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindSupportedTokenAccountAddress(receiptTokenMint, supportedTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindSupportedTokenAccountAddress finds SupportedTokenAccount account address with given seeds.
func (inst *UserDepositSupportedToken) FindSupportedTokenAccountAddress(receiptTokenMint ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindSupportedTokenAccountAddress(receiptTokenMint, supportedTokenMint, 0)
	return
}

func (inst *UserDepositSupportedToken) MustFindSupportedTokenAccountAddress(receiptTokenMint ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindSupportedTokenAccountAddress(receiptTokenMint, supportedTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetSupportedTokenAccountAccount gets the "supported_token_account" account.
func (inst *UserDepositSupportedToken) GetSupportedTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetUserSupportedTokenAccountAccount sets the "user_supported_token_account" account.
func (inst *UserDepositSupportedToken) SetUserSupportedTokenAccountAccount(userSupportedTokenAccount ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(userSupportedTokenAccount).WRITE()
	return inst
}

// GetUserSupportedTokenAccountAccount gets the "user_supported_token_account" account.
func (inst *UserDepositSupportedToken) GetUserSupportedTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetFundAccountAccount sets the "fund_account" account.
func (inst *UserDepositSupportedToken) SetFundAccountAccount(fundAccount ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(fundAccount).WRITE()
	return inst
}

func (inst *UserDepositSupportedToken) findFindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: fund
	seeds = append(seeds, []byte{byte(0x66), byte(0x75), byte(0x6e), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundAccountAddressWithBumpSeed calculates FundAccount account address with given seeds and a known bump seed.
func (inst *UserDepositSupportedToken) FindFundAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundAccountAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *UserDepositSupportedToken) MustFindFundAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundAccountAddress finds FundAccount account address with given seeds.
func (inst *UserDepositSupportedToken) FindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundAccountAddress(receiptTokenMint, 0)
	return
}

func (inst *UserDepositSupportedToken) MustFindFundAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundAccountAccount gets the "fund_account" account.
func (inst *UserDepositSupportedToken) GetFundAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetUserFundAccountAccount sets the "user_fund_account" account.
func (inst *UserDepositSupportedToken) SetUserFundAccountAccount(userFundAccount ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(userFundAccount).WRITE()
	return inst
}

func (inst *UserDepositSupportedToken) findFindUserFundAccountAddress(receiptTokenMint ag_solanago.PublicKey, user ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: user_fund
	seeds = append(seeds, []byte{byte(0x75), byte(0x73), byte(0x65), byte(0x72), byte(0x5f), byte(0x66), byte(0x75), byte(0x6e), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())
	// path: user
	seeds = append(seeds, user.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindUserFundAccountAddressWithBumpSeed calculates UserFundAccount account address with given seeds and a known bump seed.
func (inst *UserDepositSupportedToken) FindUserFundAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, user ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindUserFundAccountAddress(receiptTokenMint, user, bumpSeed)
	return
}

func (inst *UserDepositSupportedToken) MustFindUserFundAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, user ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindUserFundAccountAddress(receiptTokenMint, user, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindUserFundAccountAddress finds UserFundAccount account address with given seeds.
func (inst *UserDepositSupportedToken) FindUserFundAccountAddress(receiptTokenMint ag_solanago.PublicKey, user ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindUserFundAccountAddress(receiptTokenMint, user, 0)
	return
}

func (inst *UserDepositSupportedToken) MustFindUserFundAccountAddress(receiptTokenMint ag_solanago.PublicKey, user ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindUserFundAccountAddress(receiptTokenMint, user, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetUserFundAccountAccount gets the "user_fund_account" account.
func (inst *UserDepositSupportedToken) GetUserFundAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetRewardAccountAccount sets the "reward_account" account.
func (inst *UserDepositSupportedToken) SetRewardAccountAccount(rewardAccount ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(rewardAccount).WRITE()
	return inst
}

func (inst *UserDepositSupportedToken) findFindRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: reward
	seeds = append(seeds, []byte{byte(0x72), byte(0x65), byte(0x77), byte(0x61), byte(0x72), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindRewardAccountAddressWithBumpSeed calculates RewardAccount account address with given seeds and a known bump seed.
func (inst *UserDepositSupportedToken) FindRewardAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindRewardAccountAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *UserDepositSupportedToken) MustFindRewardAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindRewardAccountAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindRewardAccountAddress finds RewardAccount account address with given seeds.
func (inst *UserDepositSupportedToken) FindRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindRewardAccountAddress(receiptTokenMint, 0)
	return
}

func (inst *UserDepositSupportedToken) MustFindRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindRewardAccountAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetRewardAccountAccount gets the "reward_account" account.
func (inst *UserDepositSupportedToken) GetRewardAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetUserRewardAccountAccount sets the "user_reward_account" account.
func (inst *UserDepositSupportedToken) SetUserRewardAccountAccount(userRewardAccount ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(userRewardAccount).WRITE()
	return inst
}

func (inst *UserDepositSupportedToken) findFindUserRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey, user ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: user_reward
	seeds = append(seeds, []byte{byte(0x75), byte(0x73), byte(0x65), byte(0x72), byte(0x5f), byte(0x72), byte(0x65), byte(0x77), byte(0x61), byte(0x72), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())
	// path: user
	seeds = append(seeds, user.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindUserRewardAccountAddressWithBumpSeed calculates UserRewardAccount account address with given seeds and a known bump seed.
func (inst *UserDepositSupportedToken) FindUserRewardAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, user ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindUserRewardAccountAddress(receiptTokenMint, user, bumpSeed)
	return
}

func (inst *UserDepositSupportedToken) MustFindUserRewardAccountAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, user ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindUserRewardAccountAddress(receiptTokenMint, user, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindUserRewardAccountAddress finds UserRewardAccount account address with given seeds.
func (inst *UserDepositSupportedToken) FindUserRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey, user ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindUserRewardAccountAddress(receiptTokenMint, user, 0)
	return
}

func (inst *UserDepositSupportedToken) MustFindUserRewardAccountAddress(receiptTokenMint ag_solanago.PublicKey, user ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindUserRewardAccountAddress(receiptTokenMint, user, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetUserRewardAccountAccount gets the "user_reward_account" account.
func (inst *UserDepositSupportedToken) GetUserRewardAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetInstructionSysvarAccount sets the "instruction_sysvar" account.
func (inst *UserDepositSupportedToken) SetInstructionSysvarAccount(instructionSysvar ag_solanago.PublicKey) *UserDepositSupportedToken {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(instructionSysvar)
	return inst
}

// GetInstructionSysvarAccount gets the "instruction_sysvar" account.
func (inst *UserDepositSupportedToken) GetInstructionSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

func (inst UserDepositSupportedToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UserDepositSupportedToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UserDepositSupportedToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UserDepositSupportedToken) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ReceiptTokenProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SupportedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.ReceiptTokenMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.ReceiptTokenMintAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.UserReceiptTokenAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SupportedTokenMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SupportedTokenAuthority is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SupportedTokenAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.UserSupportedTokenAccount is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.FundAccount is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.UserFundAccount is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.RewardAccount is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.UserRewardAccount is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.InstructionSysvar is not set")
		}
	}
	return nil
}

func (inst *UserDepositSupportedToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UserDepositSupportedToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("Metadata (OPT)", inst.Metadata))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=17]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                        user", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              system_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    associated_token_program", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       receipt_token_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     supported_token_program", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          receipt_token_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("receipt_token_mint_authority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         user_receipt_token_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        supported_token_mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("   supported_token_authority", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("            supported_token_", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("       user_supported_token_", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                       fund_", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                  user_fund_", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("                     reward_", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("                user_reward_", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("          instruction_sysvar", inst.AccountMetaSlice.Get(16)))
					})
				})
		})
}

func (obj UserDepositSupportedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param (optional):
	{
		if obj.Metadata == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Metadata)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *UserDepositSupportedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Metadata` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Metadata)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewUserDepositSupportedTokenInstruction declares a new UserDepositSupportedToken instruction with the provided parameters and accounts.
func NewUserDepositSupportedTokenInstruction(
	// Parameters:
	amount uint64,
	metadata DepositMetadata,
	// Accounts:
	user ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	receiptTokenProgram ag_solanago.PublicKey,
	supportedTokenProgram ag_solanago.PublicKey,
	receiptTokenMint ag_solanago.PublicKey,
	receiptTokenMintAuthority ag_solanago.PublicKey,
	userReceiptTokenAccount ag_solanago.PublicKey,
	supportedTokenMint ag_solanago.PublicKey,
	supportedTokenAuthority ag_solanago.PublicKey,
	supportedTokenAccount ag_solanago.PublicKey,
	userSupportedTokenAccount ag_solanago.PublicKey,
	fundAccount ag_solanago.PublicKey,
	userFundAccount ag_solanago.PublicKey,
	rewardAccount ag_solanago.PublicKey,
	userRewardAccount ag_solanago.PublicKey,
	instructionSysvar ag_solanago.PublicKey) *UserDepositSupportedToken {
	return NewUserDepositSupportedTokenInstructionBuilder().
		SetAmount(amount).
		SetMetadata(metadata).
		SetUserAccount(user).
		SetSystemProgramAccount(systemProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetReceiptTokenProgramAccount(receiptTokenProgram).
		SetSupportedTokenProgramAccount(supportedTokenProgram).
		SetReceiptTokenMintAccount(receiptTokenMint).
		SetReceiptTokenMintAuthorityAccount(receiptTokenMintAuthority).
		SetUserReceiptTokenAccountAccount(userReceiptTokenAccount).
		SetSupportedTokenMintAccount(supportedTokenMint).
		SetSupportedTokenAuthorityAccount(supportedTokenAuthority).
		SetSupportedTokenAccountAccount(supportedTokenAccount).
		SetUserSupportedTokenAccountAccount(userSupportedTokenAccount).
		SetFundAccountAccount(fundAccount).
		SetUserFundAccountAccount(userFundAccount).
		SetRewardAccountAccount(rewardAccount).
		SetUserRewardAccountAccount(userRewardAccount).
		SetInstructionSysvarAccount(instructionSysvar)
}
