// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"encoding/base64"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	"reflect"
	"strings"
)

type FundInfoEventData struct {
	LrtMint              ag_solanago.PublicKey
	SupportedTokens      []TokenInfo
	SolAmountIn          uint64
	SolReservedAmount    uint64
	SolWithdrawalFeeRate float32
	SolWithdrawalEnabled bool
}

var FundInfoEventDataDiscriminator = [8]byte{117, 180, 130, 107, 39, 78, 150, 71}

func (obj FundInfoEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundInfoEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LrtMint` param:
	err = encoder.Encode(obj.LrtMint)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokens` param:
	err = encoder.Encode(obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Serialize `SolAmountIn` param:
	err = encoder.Encode(obj.SolAmountIn)
	if err != nil {
		return err
	}
	// Serialize `SolReservedAmount` param:
	err = encoder.Encode(obj.SolReservedAmount)
	if err != nil {
		return err
	}
	// Serialize `SolWithdrawalFeeRate` param:
	err = encoder.Encode(obj.SolWithdrawalFeeRate)
	if err != nil {
		return err
	}
	// Serialize `SolWithdrawalEnabled` param:
	err = encoder.Encode(obj.SolWithdrawalEnabled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundInfoEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundInfoEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[117 180 130 107 39 78 150 71]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LrtMint`:
	err = decoder.Decode(&obj.LrtMint)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokens`:
	err = decoder.Decode(&obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Deserialize `SolAmountIn`:
	err = decoder.Decode(&obj.SolAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `SolReservedAmount`:
	err = decoder.Decode(&obj.SolReservedAmount)
	if err != nil {
		return err
	}
	// Deserialize `SolWithdrawalFeeRate`:
	err = decoder.Decode(&obj.SolWithdrawalFeeRate)
	if err != nil {
		return err
	}
	// Deserialize `SolWithdrawalEnabled`:
	err = decoder.Decode(&obj.SolWithdrawalEnabled)
	if err != nil {
		return err
	}
	return nil
}

func (*FundInfoEventData) isEventData() {}

type FundPriceUpdatedEventData struct {
	LrtMint  ag_solanago.PublicKey
	LrtPrice uint64
	FundInfo FundInfo
}

var FundPriceUpdatedEventDataDiscriminator = [8]byte{211, 220, 64, 84, 22, 25, 52, 81}

func (obj FundPriceUpdatedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundPriceUpdatedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LrtMint` param:
	err = encoder.Encode(obj.LrtMint)
	if err != nil {
		return err
	}
	// Serialize `LrtPrice` param:
	err = encoder.Encode(obj.LrtPrice)
	if err != nil {
		return err
	}
	// Serialize `FundInfo` param:
	err = encoder.Encode(obj.FundInfo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundPriceUpdatedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundPriceUpdatedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[211 220 64 84 22 25 52 81]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LrtMint`:
	err = decoder.Decode(&obj.LrtMint)
	if err != nil {
		return err
	}
	// Deserialize `LrtPrice`:
	err = decoder.Decode(&obj.LrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `FundInfo`:
	err = decoder.Decode(&obj.FundInfo)
	if err != nil {
		return err
	}
	return nil
}

func (*FundPriceUpdatedEventData) isEventData() {}

type FundSOLDepositedEventData struct {
	User                        ag_solanago.PublicKey
	UserLrtAccount              ag_solanago.PublicKey
	UserReceipt                 UserReceipt
	SolDepositAmount            uint64
	SolAmountInFund             uint64
	MintedLrtMint               ag_solanago.PublicKey
	MintedLrtAmount             uint64
	LrtPrice                    uint64
	LrtAmountInUserLrtAccount   uint64
	WalletProvider              *string  `bin:"optional"`
	FpointAccrualRateMultiplier *float32 `bin:"optional"`
	FundInfo                    FundInfo
}

var FundSOLDepositedEventDataDiscriminator = [8]byte{71, 232, 39, 108, 198, 103, 0, 33}

func (obj FundSOLDepositedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundSOLDepositedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserLrtAccount` param:
	err = encoder.Encode(obj.UserLrtAccount)
	if err != nil {
		return err
	}
	// Serialize `UserReceipt` param:
	err = encoder.Encode(obj.UserReceipt)
	if err != nil {
		return err
	}
	// Serialize `SolDepositAmount` param:
	err = encoder.Encode(obj.SolDepositAmount)
	if err != nil {
		return err
	}
	// Serialize `SolAmountInFund` param:
	err = encoder.Encode(obj.SolAmountInFund)
	if err != nil {
		return err
	}
	// Serialize `MintedLrtMint` param:
	err = encoder.Encode(obj.MintedLrtMint)
	if err != nil {
		return err
	}
	// Serialize `MintedLrtAmount` param:
	err = encoder.Encode(obj.MintedLrtAmount)
	if err != nil {
		return err
	}
	// Serialize `LrtPrice` param:
	err = encoder.Encode(obj.LrtPrice)
	if err != nil {
		return err
	}
	// Serialize `LrtAmountInUserLrtAccount` param:
	err = encoder.Encode(obj.LrtAmountInUserLrtAccount)
	if err != nil {
		return err
	}
	// Serialize `WalletProvider` param (optional):
	{
		if obj.WalletProvider == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FpointAccrualRateMultiplier` param (optional):
	{
		if obj.FpointAccrualRateMultiplier == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FpointAccrualRateMultiplier)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FundInfo` param:
	err = encoder.Encode(obj.FundInfo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundSOLDepositedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundSOLDepositedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[71 232 39 108 198 103 0 33]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserLrtAccount`:
	err = decoder.Decode(&obj.UserLrtAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserReceipt`:
	err = decoder.Decode(&obj.UserReceipt)
	if err != nil {
		return err
	}
	// Deserialize `SolDepositAmount`:
	err = decoder.Decode(&obj.SolDepositAmount)
	if err != nil {
		return err
	}
	// Deserialize `SolAmountInFund`:
	err = decoder.Decode(&obj.SolAmountInFund)
	if err != nil {
		return err
	}
	// Deserialize `MintedLrtMint`:
	err = decoder.Decode(&obj.MintedLrtMint)
	if err != nil {
		return err
	}
	// Deserialize `MintedLrtAmount`:
	err = decoder.Decode(&obj.MintedLrtAmount)
	if err != nil {
		return err
	}
	// Deserialize `LrtPrice`:
	err = decoder.Decode(&obj.LrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `LrtAmountInUserLrtAccount`:
	err = decoder.Decode(&obj.LrtAmountInUserLrtAccount)
	if err != nil {
		return err
	}
	// Deserialize `WalletProvider` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FpointAccrualRateMultiplier` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FpointAccrualRateMultiplier)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FundInfo`:
	err = decoder.Decode(&obj.FundInfo)
	if err != nil {
		return err
	}
	return nil
}

func (*FundSOLDepositedEventData) isEventData() {}

type FundSOLWithdrawnEventData struct {
	User              ag_solanago.PublicKey
	UserReceipt       UserReceipt
	RequestId         uint64
	LrtMint           ag_solanago.PublicKey
	LrtAmount         uint64
	LrtPrice          uint64
	SolWithdrawAmount uint64
	SolFeeAmount      uint64
	FundInfo          FundInfo
}

var FundSOLWithdrawnEventDataDiscriminator = [8]byte{73, 80, 182, 218, 157, 178, 52, 71}

func (obj FundSOLWithdrawnEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundSOLWithdrawnEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceipt` param:
	err = encoder.Encode(obj.UserReceipt)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `LrtMint` param:
	err = encoder.Encode(obj.LrtMint)
	if err != nil {
		return err
	}
	// Serialize `LrtAmount` param:
	err = encoder.Encode(obj.LrtAmount)
	if err != nil {
		return err
	}
	// Serialize `LrtPrice` param:
	err = encoder.Encode(obj.LrtPrice)
	if err != nil {
		return err
	}
	// Serialize `SolWithdrawAmount` param:
	err = encoder.Encode(obj.SolWithdrawAmount)
	if err != nil {
		return err
	}
	// Serialize `SolFeeAmount` param:
	err = encoder.Encode(obj.SolFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `FundInfo` param:
	err = encoder.Encode(obj.FundInfo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundSOLWithdrawnEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundSOLWithdrawnEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[73 80 182 218 157 178 52 71]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceipt`:
	err = decoder.Decode(&obj.UserReceipt)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `LrtMint`:
	err = decoder.Decode(&obj.LrtMint)
	if err != nil {
		return err
	}
	// Deserialize `LrtAmount`:
	err = decoder.Decode(&obj.LrtAmount)
	if err != nil {
		return err
	}
	// Deserialize `LrtPrice`:
	err = decoder.Decode(&obj.LrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `SolWithdrawAmount`:
	err = decoder.Decode(&obj.SolWithdrawAmount)
	if err != nil {
		return err
	}
	// Deserialize `SolFeeAmount`:
	err = decoder.Decode(&obj.SolFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `FundInfo`:
	err = decoder.Decode(&obj.FundInfo)
	if err != nil {
		return err
	}
	return nil
}

func (*FundSOLWithdrawnEventData) isEventData() {}

type FundTokenDepositedEventData struct {
	User                        ag_solanago.PublicKey
	UserLrtAccount              ag_solanago.PublicKey
	UserReceipt                 UserReceipt
	DepositedTokenMint          ag_solanago.PublicKey
	DepositedTokenUserAccount   ag_solanago.PublicKey
	TokenDepositAmount          uint64
	TokenAmountInFund           uint64
	MintedLrtMint               ag_solanago.PublicKey
	MintedLrtAmount             uint64
	LrtPrice                    uint64
	LrtAmountInUserLrtAccount   uint64
	WalletProvider              *string  `bin:"optional"`
	FpointAccrualRateMultiplier *float32 `bin:"optional"`
	FundInfo                    FundInfo
}

var FundTokenDepositedEventDataDiscriminator = [8]byte{54, 251, 234, 18, 84, 33, 72, 31}

func (obj FundTokenDepositedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundTokenDepositedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserLrtAccount` param:
	err = encoder.Encode(obj.UserLrtAccount)
	if err != nil {
		return err
	}
	// Serialize `UserReceipt` param:
	err = encoder.Encode(obj.UserReceipt)
	if err != nil {
		return err
	}
	// Serialize `DepositedTokenMint` param:
	err = encoder.Encode(obj.DepositedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `DepositedTokenUserAccount` param:
	err = encoder.Encode(obj.DepositedTokenUserAccount)
	if err != nil {
		return err
	}
	// Serialize `TokenDepositAmount` param:
	err = encoder.Encode(obj.TokenDepositAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAmountInFund` param:
	err = encoder.Encode(obj.TokenAmountInFund)
	if err != nil {
		return err
	}
	// Serialize `MintedLrtMint` param:
	err = encoder.Encode(obj.MintedLrtMint)
	if err != nil {
		return err
	}
	// Serialize `MintedLrtAmount` param:
	err = encoder.Encode(obj.MintedLrtAmount)
	if err != nil {
		return err
	}
	// Serialize `LrtPrice` param:
	err = encoder.Encode(obj.LrtPrice)
	if err != nil {
		return err
	}
	// Serialize `LrtAmountInUserLrtAccount` param:
	err = encoder.Encode(obj.LrtAmountInUserLrtAccount)
	if err != nil {
		return err
	}
	// Serialize `WalletProvider` param (optional):
	{
		if obj.WalletProvider == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FpointAccrualRateMultiplier` param (optional):
	{
		if obj.FpointAccrualRateMultiplier == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.FpointAccrualRateMultiplier)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FundInfo` param:
	err = encoder.Encode(obj.FundInfo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundTokenDepositedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundTokenDepositedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[54 251 234 18 84 33 72 31]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserLrtAccount`:
	err = decoder.Decode(&obj.UserLrtAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserReceipt`:
	err = decoder.Decode(&obj.UserReceipt)
	if err != nil {
		return err
	}
	// Deserialize `DepositedTokenMint`:
	err = decoder.Decode(&obj.DepositedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `DepositedTokenUserAccount`:
	err = decoder.Decode(&obj.DepositedTokenUserAccount)
	if err != nil {
		return err
	}
	// Deserialize `TokenDepositAmount`:
	err = decoder.Decode(&obj.TokenDepositAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmountInFund`:
	err = decoder.Decode(&obj.TokenAmountInFund)
	if err != nil {
		return err
	}
	// Deserialize `MintedLrtMint`:
	err = decoder.Decode(&obj.MintedLrtMint)
	if err != nil {
		return err
	}
	// Deserialize `MintedLrtAmount`:
	err = decoder.Decode(&obj.MintedLrtAmount)
	if err != nil {
		return err
	}
	// Deserialize `LrtPrice`:
	err = decoder.Decode(&obj.LrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `LrtAmountInUserLrtAccount`:
	err = decoder.Decode(&obj.LrtAmountInUserLrtAccount)
	if err != nil {
		return err
	}
	// Deserialize `WalletProvider` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FpointAccrualRateMultiplier` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.FpointAccrualRateMultiplier)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FundInfo`:
	err = decoder.Decode(&obj.FundInfo)
	if err != nil {
		return err
	}
	return nil
}

func (*FundTokenDepositedEventData) isEventData() {}

type FundWithdrawalRequestCanceledEventData struct {
	User                      ag_solanago.PublicKey
	UserLrtAccount            ag_solanago.PublicKey
	UserReceipt               UserReceipt
	RequestId                 uint64
	LrtMint                   ag_solanago.PublicKey
	LrtRequestedAmount        uint64
	LrtAmountInUserLrtAccount uint64
}

var FundWithdrawalRequestCanceledEventDataDiscriminator = [8]byte{139, 184, 243, 157, 114, 191, 210, 62}

func (obj FundWithdrawalRequestCanceledEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundWithdrawalRequestCanceledEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserLrtAccount` param:
	err = encoder.Encode(obj.UserLrtAccount)
	if err != nil {
		return err
	}
	// Serialize `UserReceipt` param:
	err = encoder.Encode(obj.UserReceipt)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `LrtMint` param:
	err = encoder.Encode(obj.LrtMint)
	if err != nil {
		return err
	}
	// Serialize `LrtRequestedAmount` param:
	err = encoder.Encode(obj.LrtRequestedAmount)
	if err != nil {
		return err
	}
	// Serialize `LrtAmountInUserLrtAccount` param:
	err = encoder.Encode(obj.LrtAmountInUserLrtAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundWithdrawalRequestCanceledEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundWithdrawalRequestCanceledEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[139 184 243 157 114 191 210 62]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserLrtAccount`:
	err = decoder.Decode(&obj.UserLrtAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserReceipt`:
	err = decoder.Decode(&obj.UserReceipt)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `LrtMint`:
	err = decoder.Decode(&obj.LrtMint)
	if err != nil {
		return err
	}
	// Deserialize `LrtRequestedAmount`:
	err = decoder.Decode(&obj.LrtRequestedAmount)
	if err != nil {
		return err
	}
	// Deserialize `LrtAmountInUserLrtAccount`:
	err = decoder.Decode(&obj.LrtAmountInUserLrtAccount)
	if err != nil {
		return err
	}
	return nil
}

func (*FundWithdrawalRequestCanceledEventData) isEventData() {}

type FundWithdrawalRequestedEventData struct {
	User                      ag_solanago.PublicKey
	UserLrtAccount            ag_solanago.PublicKey
	UserReceipt               UserReceipt
	RequestId                 uint64
	LrtMint                   ag_solanago.PublicKey
	LrtRequestedAmount        uint64
	LrtAmountInUserLrtAccount uint64
}

var FundWithdrawalRequestedEventDataDiscriminator = [8]byte{18, 229, 16, 214, 255, 42, 5, 239}

func (obj FundWithdrawalRequestedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundWithdrawalRequestedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserLrtAccount` param:
	err = encoder.Encode(obj.UserLrtAccount)
	if err != nil {
		return err
	}
	// Serialize `UserReceipt` param:
	err = encoder.Encode(obj.UserReceipt)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `LrtMint` param:
	err = encoder.Encode(obj.LrtMint)
	if err != nil {
		return err
	}
	// Serialize `LrtRequestedAmount` param:
	err = encoder.Encode(obj.LrtRequestedAmount)
	if err != nil {
		return err
	}
	// Serialize `LrtAmountInUserLrtAccount` param:
	err = encoder.Encode(obj.LrtAmountInUserLrtAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundWithdrawalRequestedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundWithdrawalRequestedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[18 229 16 214 255 42 5 239]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserLrtAccount`:
	err = decoder.Decode(&obj.UserLrtAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserReceipt`:
	err = decoder.Decode(&obj.UserReceipt)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `LrtMint`:
	err = decoder.Decode(&obj.LrtMint)
	if err != nil {
		return err
	}
	// Deserialize `LrtRequestedAmount`:
	err = decoder.Decode(&obj.LrtRequestedAmount)
	if err != nil {
		return err
	}
	// Deserialize `LrtAmountInUserLrtAccount`:
	err = decoder.Decode(&obj.LrtAmountInUserLrtAccount)
	if err != nil {
		return err
	}
	return nil
}

func (*FundWithdrawalRequestedEventData) isEventData() {}

type TokenLRTTransferredEventData struct {
	LrtMint                    ag_solanago.PublicKey
	LrtAmount                  uint64
	SourceLrtAccount           ag_solanago.PublicKey
	SourceLrtAccountOwner      ag_solanago.PublicKey
	DestinationLrtAccount      ag_solanago.PublicKey
	DestinationLrtAccountOnwer ag_solanago.PublicKey
}

var TokenLRTTransferredEventDataDiscriminator = [8]byte{86, 34, 157, 26, 90, 170, 235, 29}

func (obj TokenLRTTransferredEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TokenLRTTransferredEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LrtMint` param:
	err = encoder.Encode(obj.LrtMint)
	if err != nil {
		return err
	}
	// Serialize `LrtAmount` param:
	err = encoder.Encode(obj.LrtAmount)
	if err != nil {
		return err
	}
	// Serialize `SourceLrtAccount` param:
	err = encoder.Encode(obj.SourceLrtAccount)
	if err != nil {
		return err
	}
	// Serialize `SourceLrtAccountOwner` param:
	err = encoder.Encode(obj.SourceLrtAccountOwner)
	if err != nil {
		return err
	}
	// Serialize `DestinationLrtAccount` param:
	err = encoder.Encode(obj.DestinationLrtAccount)
	if err != nil {
		return err
	}
	// Serialize `DestinationLrtAccountOnwer` param:
	err = encoder.Encode(obj.DestinationLrtAccountOnwer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenLRTTransferredEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TokenLRTTransferredEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[86 34 157 26 90 170 235 29]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LrtMint`:
	err = decoder.Decode(&obj.LrtMint)
	if err != nil {
		return err
	}
	// Deserialize `LrtAmount`:
	err = decoder.Decode(&obj.LrtAmount)
	if err != nil {
		return err
	}
	// Deserialize `SourceLrtAccount`:
	err = decoder.Decode(&obj.SourceLrtAccount)
	if err != nil {
		return err
	}
	// Deserialize `SourceLrtAccountOwner`:
	err = decoder.Decode(&obj.SourceLrtAccountOwner)
	if err != nil {
		return err
	}
	// Deserialize `DestinationLrtAccount`:
	err = decoder.Decode(&obj.DestinationLrtAccount)
	if err != nil {
		return err
	}
	// Deserialize `DestinationLrtAccountOnwer`:
	err = decoder.Decode(&obj.DestinationLrtAccountOnwer)
	if err != nil {
		return err
	}
	return nil
}

func (*TokenLRTTransferredEventData) isEventData() {}

var eventTypes = map[[8]byte]reflect.Type{
	FundInfoEventDataDiscriminator:                      reflect.TypeOf(FundInfoEventData{}),
	FundPriceUpdatedEventDataDiscriminator:              reflect.TypeOf(FundPriceUpdatedEventData{}),
	FundSOLDepositedEventDataDiscriminator:              reflect.TypeOf(FundSOLDepositedEventData{}),
	FundSOLWithdrawnEventDataDiscriminator:              reflect.TypeOf(FundSOLWithdrawnEventData{}),
	FundTokenDepositedEventDataDiscriminator:            reflect.TypeOf(FundTokenDepositedEventData{}),
	FundWithdrawalRequestCanceledEventDataDiscriminator: reflect.TypeOf(FundWithdrawalRequestCanceledEventData{}),
	FundWithdrawalRequestedEventDataDiscriminator:       reflect.TypeOf(FundWithdrawalRequestedEventData{}),
	TokenLRTTransferredEventDataDiscriminator:           reflect.TypeOf(TokenLRTTransferredEventData{}),
}
var eventNames = map[[8]byte]string{
	FundInfoEventDataDiscriminator:                      "FundInfo",
	FundPriceUpdatedEventDataDiscriminator:              "FundPriceUpdated",
	FundSOLDepositedEventDataDiscriminator:              "FundSOLDeposited",
	FundSOLWithdrawnEventDataDiscriminator:              "FundSOLWithdrawn",
	FundTokenDepositedEventDataDiscriminator:            "FundTokenDeposited",
	FundWithdrawalRequestCanceledEventDataDiscriminator: "FundWithdrawalRequestCanceled",
	FundWithdrawalRequestedEventDataDiscriminator:       "FundWithdrawalRequested",
	TokenLRTTransferredEventDataDiscriminator:           "TokenLRTTransferred",
}
var (
	_ *strings.Builder = nil
)
var (
	_ *base64.Encoding = nil
)
var (
	_ *ag_binary.Decoder = nil
)

type Event struct {
	Name string
	Data EventData
}

type EventData interface {
	UnmarshalWithDecoder(decoder *ag_binary.Decoder) error
	isEventData()
}

const eventLogPrefix = "Program data: "

func DecodeEvents(logMessages []string) (evts []*Event, err error) {
	decoder := ag_binary.NewDecoderWithEncoding(nil, ag_binary.EncodingBorsh)
	for _, log := range logMessages {
		if strings.HasPrefix(log, eventLogPrefix) {
			eventBase64 := log[len(eventLogPrefix):]

			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				err = fmt.Errorf("failed to decode event log: %s", eventBase64)
				return
			}

			eventDiscriminator := ag_binary.TypeID(eventBinary[:8])
			if eventType, ok := eventTypes[eventDiscriminator]; ok {
				eventData := reflect.New(eventType).Interface().(EventData)
				decoder.Reset(eventBinary)
				if err = eventData.UnmarshalWithDecoder(decoder); err != nil {
					err = fmt.Errorf("failed to unmarshal event %s: %w", eventType.String(), err)
					return
				}
				evts = append(evts, &Event{
					Name: eventNames[eventDiscriminator],
					Data: eventData,
				})
			}
		}
	}
	return
}
