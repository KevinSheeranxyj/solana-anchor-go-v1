// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"encoding/base64"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	"reflect"
	"strings"
)

type FundManagerUpdatedFundEventData struct {
	ReceiptTokenMint ag_solanago.PublicKey
	FundAccount      FundAccountInfo
}

var FundManagerUpdatedFundEventDataDiscriminator = [8]byte{134, 191, 120, 8, 174, 124, 129, 199}

func (obj FundManagerUpdatedFundEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundManagerUpdatedFundEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundManagerUpdatedFundEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundManagerUpdatedFundEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[134 191 120 8 174 124 129 199]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

func (*FundManagerUpdatedFundEventData) isEventData() {}

type FundManagerUpdatedRewardPoolEventData struct {
	RewardAccountDataVersion uint16
	ReceiptTokenMint         ag_solanago.PublicKey
	UpdatedRewardPoolIds     []byte
	Holders                  []HolderInfo
	Rewards                  []RewardInfo
}

var FundManagerUpdatedRewardPoolEventDataDiscriminator = [8]byte{195, 147, 69, 56, 76, 226, 252, 128}

func (obj FundManagerUpdatedRewardPoolEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundManagerUpdatedRewardPoolEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `RewardAccountDataVersion` param:
	err = encoder.Encode(obj.RewardAccountDataVersion)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `UpdatedRewardPoolIds` param:
	err = encoder.Encode(obj.UpdatedRewardPoolIds)
	if err != nil {
		return err
	}
	// Serialize `Holders` param:
	err = encoder.Encode(obj.Holders)
	if err != nil {
		return err
	}
	// Serialize `Rewards` param:
	err = encoder.Encode(obj.Rewards)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundManagerUpdatedRewardPoolEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundManagerUpdatedRewardPoolEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[195 147 69 56 76 226 252 128]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `RewardAccountDataVersion`:
	err = decoder.Decode(&obj.RewardAccountDataVersion)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedRewardPoolIds`:
	err = decoder.Decode(&obj.UpdatedRewardPoolIds)
	if err != nil {
		return err
	}
	// Deserialize `Holders`:
	err = decoder.Decode(&obj.Holders)
	if err != nil {
		return err
	}
	// Deserialize `Rewards`:
	err = decoder.Decode(&obj.Rewards)
	if err != nil {
		return err
	}
	return nil
}

func (*FundManagerUpdatedRewardPoolEventData) isEventData() {}

type OperatorProcessedJobEventData struct {
	ReceiptTokenMint ag_solanago.PublicKey
	FundAccount      FundAccountInfo
}

var OperatorProcessedJobEventDataDiscriminator = [8]byte{46, 144, 150, 12, 163, 170, 52, 13}

func (obj OperatorProcessedJobEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OperatorProcessedJobEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperatorProcessedJobEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OperatorProcessedJobEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[46 144 150 12 163 170 52 13]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

func (*OperatorProcessedJobEventData) isEventData() {}

type OperatorUpdatedFundPriceEventData struct {
	ReceiptTokenMint ag_solanago.PublicKey
	FundAccount      FundAccountInfo
}

var OperatorUpdatedFundPriceEventDataDiscriminator = [8]byte{23, 44, 187, 142, 76, 161, 104, 60}

func (obj OperatorUpdatedFundPriceEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OperatorUpdatedFundPriceEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperatorUpdatedFundPriceEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OperatorUpdatedFundPriceEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[23 44 187 142 76 161 104 60]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

func (*OperatorUpdatedFundPriceEventData) isEventData() {}

type UserCanceledWithdrawalRequestFromFundEventData struct {
	ReceiptTokenMint            ag_solanago.PublicKey
	RequestId                   uint64
	User                        ag_solanago.PublicKey
	UserReceiptTokenAccount     ag_solanago.PublicKey
	UserFundAccount             UserFundAccount
	RequestedReceiptTokenAmount uint64
}

var UserCanceledWithdrawalRequestFromFundEventDataDiscriminator = [8]byte{114, 97, 217, 9, 1, 121, 31, 213}

func (obj UserCanceledWithdrawalRequestFromFundEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserCanceledWithdrawalRequestFromFundEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `RequestedReceiptTokenAmount` param:
	err = encoder.Encode(obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserCanceledWithdrawalRequestFromFundEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserCanceledWithdrawalRequestFromFundEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[114 97 217 9 1 121 31 213]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `RequestedReceiptTokenAmount`:
	err = decoder.Decode(&obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*UserCanceledWithdrawalRequestFromFundEventData) isEventData() {}

type UserDepositedSOLToFundEventData struct {
	ReceiptTokenMint         ag_solanago.PublicKey
	FundAccount              FundAccountInfo
	User                     ag_solanago.PublicKey
	UserReceiptTokenAccount  ag_solanago.PublicKey
	UserFundAccount          UserFundAccount
	WalletProvider           *string `bin:"optional"`
	ContributionAccrualRate  *uint8  `bin:"optional"`
	DepositedSolAmount       uint64
	MintedReceiptTokenAmount uint64
}

var UserDepositedSOLToFundEventDataDiscriminator = [8]byte{166, 170, 80, 178, 102, 88, 160, 18}

func (obj UserDepositedSOLToFundEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserDepositedSOLToFundEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `WalletProvider` param (optional):
	{
		if obj.WalletProvider == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ContributionAccrualRate` param (optional):
	{
		if obj.ContributionAccrualRate == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ContributionAccrualRate)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DepositedSolAmount` param:
	err = encoder.Encode(obj.DepositedSolAmount)
	if err != nil {
		return err
	}
	// Serialize `MintedReceiptTokenAmount` param:
	err = encoder.Encode(obj.MintedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserDepositedSOLToFundEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserDepositedSOLToFundEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[166 170 80 178 102 88 160 18]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `WalletProvider` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ContributionAccrualRate` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ContributionAccrualRate)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DepositedSolAmount`:
	err = decoder.Decode(&obj.DepositedSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintedReceiptTokenAmount`:
	err = decoder.Decode(&obj.MintedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*UserDepositedSOLToFundEventData) isEventData() {}

type UserDepositedSupportedTokenToFundEventData struct {
	ReceiptTokenMint              ag_solanago.PublicKey
	FundAccount                   FundAccountInfo
	User                          ag_solanago.PublicKey
	UserReceiptTokenAccount       ag_solanago.PublicKey
	UserFundAccount               UserFundAccount
	SupportedTokenMint            ag_solanago.PublicKey
	SupportedTokenUserAccount     ag_solanago.PublicKey
	WalletProvider                *string `bin:"optional"`
	ContributionAccrualRate       *uint8  `bin:"optional"`
	DepositedSupportedTokenAmount uint64
	MintedReceiptTokenAmount      uint64
}

var UserDepositedSupportedTokenToFundEventDataDiscriminator = [8]byte{203, 63, 231, 65, 153, 182, 74, 143}

func (obj UserDepositedSupportedTokenToFundEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserDepositedSupportedTokenToFundEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenUserAccount` param:
	err = encoder.Encode(obj.SupportedTokenUserAccount)
	if err != nil {
		return err
	}
	// Serialize `WalletProvider` param (optional):
	{
		if obj.WalletProvider == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ContributionAccrualRate` param (optional):
	{
		if obj.ContributionAccrualRate == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ContributionAccrualRate)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DepositedSupportedTokenAmount` param:
	err = encoder.Encode(obj.DepositedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `MintedReceiptTokenAmount` param:
	err = encoder.Encode(obj.MintedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserDepositedSupportedTokenToFundEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserDepositedSupportedTokenToFundEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[203 63 231 65 153 182 74 143]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenUserAccount`:
	err = decoder.Decode(&obj.SupportedTokenUserAccount)
	if err != nil {
		return err
	}
	// Deserialize `WalletProvider` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ContributionAccrualRate` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ContributionAccrualRate)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DepositedSupportedTokenAmount`:
	err = decoder.Decode(&obj.DepositedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintedReceiptTokenAmount`:
	err = decoder.Decode(&obj.MintedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*UserDepositedSupportedTokenToFundEventData) isEventData() {}

type UserRequestedWithdrawalFromFundEventData struct {
	ReceiptTokenMint            ag_solanago.PublicKey
	BatchId                     uint64
	RequestId                   uint64
	User                        ag_solanago.PublicKey
	UserReceiptTokenAccount     ag_solanago.PublicKey
	UserFundAccount             UserFundAccount
	RequestedReceiptTokenAmount uint64
}

var UserRequestedWithdrawalFromFundEventDataDiscriminator = [8]byte{23, 105, 171, 107, 172, 40, 226, 124}

func (obj UserRequestedWithdrawalFromFundEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserRequestedWithdrawalFromFundEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `RequestedReceiptTokenAmount` param:
	err = encoder.Encode(obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRequestedWithdrawalFromFundEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserRequestedWithdrawalFromFundEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[23 105 171 107 172 40 226 124]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `RequestedReceiptTokenAmount`:
	err = decoder.Decode(&obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*UserRequestedWithdrawalFromFundEventData) isEventData() {}

type UserTransferredReceiptTokenEventData struct {
	ReceiptTokenMint               ag_solanago.PublicKey
	SourceReceiptTokenAccount      ag_solanago.PublicKey
	SourceFundAccount              UserFundAccount
	Source                         ag_solanago.PublicKey
	DestinationReceiptTokenAccount ag_solanago.PublicKey
	DestinationFundAccount         UserFundAccount
	Destination                    ag_solanago.PublicKey
	TransferredReceiptTokenAmount  uint64
}

var UserTransferredReceiptTokenEventDataDiscriminator = [8]byte{50, 130, 164, 229, 182, 55, 117, 0}

func (obj UserTransferredReceiptTokenEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserTransferredReceiptTokenEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `SourceReceiptTokenAccount` param:
	err = encoder.Encode(obj.SourceReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `SourceFundAccount` param:
	err = encoder.Encode(obj.SourceFundAccount)
	if err != nil {
		return err
	}
	// Serialize `Source` param:
	err = encoder.Encode(obj.Source)
	if err != nil {
		return err
	}
	// Serialize `DestinationReceiptTokenAccount` param:
	err = encoder.Encode(obj.DestinationReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `DestinationFundAccount` param:
	err = encoder.Encode(obj.DestinationFundAccount)
	if err != nil {
		return err
	}
	// Serialize `Destination` param:
	err = encoder.Encode(obj.Destination)
	if err != nil {
		return err
	}
	// Serialize `TransferredReceiptTokenAmount` param:
	err = encoder.Encode(obj.TransferredReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserTransferredReceiptTokenEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserTransferredReceiptTokenEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[50 130 164 229 182 55 117 0]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `SourceReceiptTokenAccount`:
	err = decoder.Decode(&obj.SourceReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `SourceFundAccount`:
	err = decoder.Decode(&obj.SourceFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `Source`:
	err = decoder.Decode(&obj.Source)
	if err != nil {
		return err
	}
	// Deserialize `DestinationReceiptTokenAccount`:
	err = decoder.Decode(&obj.DestinationReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `DestinationFundAccount`:
	err = decoder.Decode(&obj.DestinationFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `Destination`:
	err = decoder.Decode(&obj.Destination)
	if err != nil {
		return err
	}
	// Deserialize `TransferredReceiptTokenAmount`:
	err = decoder.Decode(&obj.TransferredReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*UserTransferredReceiptTokenEventData) isEventData() {}

type UserUpdatedRewardPoolEventData struct {
	ReceiptTokenMint ag_solanago.PublicKey
	Updates          []UserRewardAccountUpdateInfo
}

var UserUpdatedRewardPoolEventDataDiscriminator = [8]byte{189, 251, 56, 47, 30, 252, 63, 27}

func (obj UserUpdatedRewardPoolEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserUpdatedRewardPoolEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `Updates` param:
	err = encoder.Encode(obj.Updates)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserUpdatedRewardPoolEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserUpdatedRewardPoolEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[189 251 56 47 30 252 63 27]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `Updates`:
	err = decoder.Decode(&obj.Updates)
	if err != nil {
		return err
	}
	return nil
}

func (*UserUpdatedRewardPoolEventData) isEventData() {}

type UserWithdrewSOLFromFundEventData struct {
	ReceiptTokenMint        ag_solanago.PublicKey
	FundAccount             FundAccountInfo
	RequestId               uint64
	UserFundAccount         UserFundAccount
	User                    ag_solanago.PublicKey
	BurntReceiptTokenAmount uint64
	WithdrawnSolAmount      uint64
	DeductedSolFeeAmount    uint64
}

var UserWithdrewSOLFromFundEventDataDiscriminator = [8]byte{28, 82, 132, 140, 73, 233, 83, 215}

func (obj UserWithdrewSOLFromFundEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserWithdrewSOLFromFundEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `BurntReceiptTokenAmount` param:
	err = encoder.Encode(obj.BurntReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawnSolAmount` param:
	err = encoder.Encode(obj.WithdrawnSolAmount)
	if err != nil {
		return err
	}
	// Serialize `DeductedSolFeeAmount` param:
	err = encoder.Encode(obj.DeductedSolFeeAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserWithdrewSOLFromFundEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserWithdrewSOLFromFundEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[28 82 132 140 73 233 83 215]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `BurntReceiptTokenAmount`:
	err = decoder.Decode(&obj.BurntReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawnSolAmount`:
	err = decoder.Decode(&obj.WithdrawnSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeductedSolFeeAmount`:
	err = decoder.Decode(&obj.DeductedSolFeeAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*UserWithdrewSOLFromFundEventData) isEventData() {}

var eventTypes = map[[8]byte]reflect.Type{
	FundManagerUpdatedFundEventDataDiscriminator:                reflect.TypeOf(FundManagerUpdatedFundEventData{}),
	FundManagerUpdatedRewardPoolEventDataDiscriminator:          reflect.TypeOf(FundManagerUpdatedRewardPoolEventData{}),
	OperatorProcessedJobEventDataDiscriminator:                  reflect.TypeOf(OperatorProcessedJobEventData{}),
	OperatorUpdatedFundPriceEventDataDiscriminator:              reflect.TypeOf(OperatorUpdatedFundPriceEventData{}),
	UserCanceledWithdrawalRequestFromFundEventDataDiscriminator: reflect.TypeOf(UserCanceledWithdrawalRequestFromFundEventData{}),
	UserDepositedSOLToFundEventDataDiscriminator:                reflect.TypeOf(UserDepositedSOLToFundEventData{}),
	UserDepositedSupportedTokenToFundEventDataDiscriminator:     reflect.TypeOf(UserDepositedSupportedTokenToFundEventData{}),
	UserRequestedWithdrawalFromFundEventDataDiscriminator:       reflect.TypeOf(UserRequestedWithdrawalFromFundEventData{}),
	UserTransferredReceiptTokenEventDataDiscriminator:           reflect.TypeOf(UserTransferredReceiptTokenEventData{}),
	UserUpdatedRewardPoolEventDataDiscriminator:                 reflect.TypeOf(UserUpdatedRewardPoolEventData{}),
	UserWithdrewSOLFromFundEventDataDiscriminator:               reflect.TypeOf(UserWithdrewSOLFromFundEventData{}),
}
var eventNames = map[[8]byte]string{
	FundManagerUpdatedFundEventDataDiscriminator:                "FundManagerUpdatedFund",
	FundManagerUpdatedRewardPoolEventDataDiscriminator:          "FundManagerUpdatedRewardPool",
	OperatorProcessedJobEventDataDiscriminator:                  "OperatorProcessedJob",
	OperatorUpdatedFundPriceEventDataDiscriminator:              "OperatorUpdatedFundPrice",
	UserCanceledWithdrawalRequestFromFundEventDataDiscriminator: "UserCanceledWithdrawalRequestFromFund",
	UserDepositedSOLToFundEventDataDiscriminator:                "UserDepositedSOLToFund",
	UserDepositedSupportedTokenToFundEventDataDiscriminator:     "UserDepositedSupportedTokenToFund",
	UserRequestedWithdrawalFromFundEventDataDiscriminator:       "UserRequestedWithdrawalFromFund",
	UserTransferredReceiptTokenEventDataDiscriminator:           "UserTransferredReceiptToken",
	UserUpdatedRewardPoolEventDataDiscriminator:                 "UserUpdatedRewardPool",
	UserWithdrewSOLFromFundEventDataDiscriminator:               "UserWithdrewSOLFromFund",
}
var (
	_ *strings.Builder = nil
)
var (
	_ *base64.Encoding = nil
)
var (
	_ *ag_binary.Decoder = nil
)

type Event struct {
	Name string
	Data EventData
}

type EventData interface {
	UnmarshalWithDecoder(decoder *ag_binary.Decoder) error
	isEventData()
}

const eventLogPrefix = "Program data: "

func DecodeEvents(logMessages []string) (evts []*Event, err error) {
	decoder := ag_binary.NewDecoderWithEncoding(nil, ag_binary.EncodingBorsh)
	for _, log := range logMessages {
		if strings.HasPrefix(log, eventLogPrefix) {
			eventBase64 := log[len(eventLogPrefix):]

			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				err = fmt.Errorf("failed to decode event log: %s", eventBase64)
				return
			}

			eventDiscriminator := ag_binary.TypeID(eventBinary[:8])
			if eventType, ok := eventTypes[eventDiscriminator]; ok {
				eventData := reflect.New(eventType).Interface().(EventData)
				decoder.Reset(eventBinary)
				if err = eventData.UnmarshalWithDecoder(decoder); err != nil {
					err = fmt.Errorf("failed to unmarshal event %s: %w", eventType.String(), err)
					return
				}
				evts = append(evts, &Event{
					Name: eventNames[eventDiscriminator],
					Data: eventData,
				})
			}
		}
	}
	return
}
