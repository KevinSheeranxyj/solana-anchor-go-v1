// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type FundAccount struct {
	DataVersion      uint8
	Bump             uint8
	ReceiptTokenMint ag_solanago.PublicKey
	SupportedTokens  []TokenInfo
	SolAmountIn      uint64
	WithdrawalStatus WithdrawalStatus
}

var FundAccountDiscriminator = [8]byte{62, 128, 183, 208, 91, 31, 212, 209}

func (obj FundAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokens` param:
	err = encoder.Encode(obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Serialize `SolAmountIn` param:
	err = encoder.Encode(obj.SolAmountIn)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalStatus` param:
	err = encoder.Encode(obj.WithdrawalStatus)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[62 128 183 208 91 31 212 209]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokens`:
	err = decoder.Decode(&obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Deserialize `SolAmountIn`:
	err = decoder.Decode(&obj.SolAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalStatus`:
	err = decoder.Decode(&obj.WithdrawalStatus)
	if err != nil {
		return err
	}
	return nil
}

type FundTokenAuthorityAccount struct {
	DataVersion      uint8
	Bump             uint8
	ReceiptTokenMint ag_solanago.PublicKey
}

var FundTokenAuthorityAccountDiscriminator = [8]byte{142, 159, 192, 9, 6, 17, 60, 115}

func (obj FundTokenAuthorityAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FundTokenAuthorityAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundTokenAuthorityAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(FundTokenAuthorityAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[142 159 192 9 6 17 60 115]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	return nil
}

type UserReceiptAccount struct {
	DataVersion        uint8
	Bump               uint8
	User               ag_solanago.PublicKey
	ReceiptTokenMint   ag_solanago.PublicKey
	WithdrawalRequests []WithdrawalRequest
}

var UserReceiptAccountDiscriminator = [8]byte{9, 82, 251, 40, 98, 27, 120, 114}

func (obj UserReceiptAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(UserReceiptAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalRequests` param:
	err = encoder.Encode(obj.WithdrawalRequests)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserReceiptAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(UserReceiptAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[9 82 251 40 98 27 120 114]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalRequests`:
	err = decoder.Decode(&obj.WithdrawalRequests)
	if err != nil {
		return err
	}
	return nil
}
