// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"errors"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// FundAddSupportedToken is the `fund_add_supported_token` instruction.
type FundAddSupportedToken struct {
	TokenCap           *uint64
	TokenPricingSource TokenPricingSource

	// [0] = [WRITE, SIGNER] admin
	//
	// [1] = [WRITE] fund
	//
	// [2] = [] fund_token_authority
	//
	// [3] = [] receipt_token_mint
	//
	// [4] = [WRITE] token_mint
	//
	// [5] = [WRITE] fund_token_account
	//
	// [6] = [] associated_token_program
	//
	// [7] = [] token_program
	//
	// [8] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewFundAddSupportedTokenInstructionBuilder creates a new `FundAddSupportedToken` instruction builder.
func NewFundAddSupportedTokenInstructionBuilder() *FundAddSupportedToken {
	nd := &FundAddSupportedToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(ag_solanago.MustPublicKeyFromBase58("91zBeWL8kHBaMtaVrHwWsck1UacDKvje82QQ3HE2k8mJ")).WRITE().SIGNER()
	nd.AccountMetaSlice[3] = ag_solanago.Meta(ag_solanago.MustPublicKeyFromBase58("FRAGsJAbW4cHk2DYhtAWohV6MUMauJHCFtT1vGvRwnXN"))
	nd.AccountMetaSlice[6] = ag_solanago.Meta(ag_solanago.MustPublicKeyFromBase58("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"))
	nd.AccountMetaSlice[8] = ag_solanago.Meta(ag_solanago.MustPublicKeyFromBase58("11111111111111111111111111111111"))
	return nd
}

// SetTokenCap sets the "token_cap" parameter.
func (inst *FundAddSupportedToken) SetTokenCap(token_cap uint64) *FundAddSupportedToken {
	inst.TokenCap = &token_cap
	return inst
}

// SetTokenPricingSource sets the "token_pricing_source" parameter.
func (inst *FundAddSupportedToken) SetTokenPricingSource(token_pricing_source TokenPricingSource) *FundAddSupportedToken {
	inst.TokenPricingSource = token_pricing_source
	return inst
}

// SetAdminAccount sets the "admin" account.
func (inst *FundAddSupportedToken) SetAdminAccount(admin ag_solanago.PublicKey) *FundAddSupportedToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *FundAddSupportedToken) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFundAccount sets the "fund" account.
func (inst *FundAddSupportedToken) SetFundAccount(fund ag_solanago.PublicKey) *FundAddSupportedToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(fund).WRITE()
	return inst
}

func (inst *FundAddSupportedToken) findFindFundAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: fund_seed
	seeds = append(seeds, []byte{byte(0x66), byte(0x75), byte(0x6e), byte(0x64), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundAddressWithBumpSeed calculates Fund account address with given seeds and a known bump seed.
func (inst *FundAddSupportedToken) FindFundAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *FundAddSupportedToken) MustFindFundAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundAddress finds Fund account address with given seeds.
func (inst *FundAddSupportedToken) FindFundAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundAddress(receiptTokenMint, 0)
	return
}

func (inst *FundAddSupportedToken) MustFindFundAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundAccount gets the "fund" account.
func (inst *FundAddSupportedToken) GetFundAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFundTokenAuthorityAccount sets the "fund_token_authority" account.
func (inst *FundAddSupportedToken) SetFundTokenAuthorityAccount(fundTokenAuthority ag_solanago.PublicKey) *FundAddSupportedToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(fundTokenAuthority)
	return inst
}

func (inst *FundAddSupportedToken) findFindFundTokenAuthorityAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: fund_token_authority_seed
	seeds = append(seeds, []byte{byte(0x66), byte(0x75), byte(0x6e), byte(0x64), byte(0x5f), byte(0x74), byte(0x6f), byte(0x6b), byte(0x65), byte(0x6e), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundTokenAuthorityAddressWithBumpSeed calculates FundTokenAuthority account address with given seeds and a known bump seed.
func (inst *FundAddSupportedToken) FindFundTokenAuthorityAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundTokenAuthorityAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *FundAddSupportedToken) MustFindFundTokenAuthorityAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundTokenAuthorityAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundTokenAuthorityAddress finds FundTokenAuthority account address with given seeds.
func (inst *FundAddSupportedToken) FindFundTokenAuthorityAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundTokenAuthorityAddress(receiptTokenMint, 0)
	return
}

func (inst *FundAddSupportedToken) MustFindFundTokenAuthorityAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundTokenAuthorityAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundTokenAuthorityAccount gets the "fund_token_authority" account.
func (inst *FundAddSupportedToken) GetFundTokenAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetReceiptTokenMintAccount sets the "receipt_token_mint" account.
func (inst *FundAddSupportedToken) SetReceiptTokenMintAccount(receiptTokenMint ag_solanago.PublicKey) *FundAddSupportedToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(receiptTokenMint)
	return inst
}

// GetReceiptTokenMintAccount gets the "receipt_token_mint" account.
func (inst *FundAddSupportedToken) GetReceiptTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenMintAccount sets the "token_mint" account.
func (inst *FundAddSupportedToken) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *FundAddSupportedToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenMint).WRITE()
	return inst
}

// GetTokenMintAccount gets the "token_mint" account.
func (inst *FundAddSupportedToken) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetFundTokenAccountAccount sets the "fund_token_account" account.
func (inst *FundAddSupportedToken) SetFundTokenAccountAccount(fundTokenAccount ag_solanago.PublicKey) *FundAddSupportedToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(fundTokenAccount).WRITE()
	return inst
}

func (inst *FundAddSupportedToken) findFindFundTokenAccountAddress(fundTokenAuthority ag_solanago.PublicKey, tokenProgram ag_solanago.PublicKey, tokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: fundTokenAuthority
	seeds = append(seeds, fundTokenAuthority.Bytes())
	// path: tokenProgram
	seeds = append(seeds, tokenProgram.Bytes())
	// path: tokenMint
	seeds = append(seeds, tokenMint.Bytes())

	programID := ag_solanago.PublicKey([]byte{byte(0x8c), byte(0x97), byte(0x25), byte(0x8f), byte(0x4e), byte(0x24), byte(0x89), byte(0xf1), byte(0xbb), byte(0x3d), byte(0x10), byte(0x29), byte(0x14), byte(0x8e), byte(0xd), byte(0x83), byte(0xb), byte(0x5a), byte(0x13), byte(0x99), byte(0xda), byte(0xff), byte(0x10), byte(0x84), byte(0x4), byte(0x8e), byte(0x7b), byte(0xd8), byte(0xdb), byte(0xe9), byte(0xf8), byte(0x59)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindFundTokenAccountAddressWithBumpSeed calculates FundTokenAccount account address with given seeds and a known bump seed.
func (inst *FundAddSupportedToken) FindFundTokenAccountAddressWithBumpSeed(fundTokenAuthority ag_solanago.PublicKey, tokenProgram ag_solanago.PublicKey, tokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundTokenAccountAddress(fundTokenAuthority, tokenProgram, tokenMint, bumpSeed)
	return
}

func (inst *FundAddSupportedToken) MustFindFundTokenAccountAddressWithBumpSeed(fundTokenAuthority ag_solanago.PublicKey, tokenProgram ag_solanago.PublicKey, tokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundTokenAccountAddress(fundTokenAuthority, tokenProgram, tokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundTokenAccountAddress finds FundTokenAccount account address with given seeds.
func (inst *FundAddSupportedToken) FindFundTokenAccountAddress(fundTokenAuthority ag_solanago.PublicKey, tokenProgram ag_solanago.PublicKey, tokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundTokenAccountAddress(fundTokenAuthority, tokenProgram, tokenMint, 0)
	return
}

func (inst *FundAddSupportedToken) MustFindFundTokenAccountAddress(fundTokenAuthority ag_solanago.PublicKey, tokenProgram ag_solanago.PublicKey, tokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundTokenAccountAddress(fundTokenAuthority, tokenProgram, tokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundTokenAccountAccount gets the "fund_token_account" account.
func (inst *FundAddSupportedToken) GetFundTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAssociatedTokenProgramAccount sets the "associated_token_program" account.
func (inst *FundAddSupportedToken) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *FundAddSupportedToken {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associated_token_program" account.
func (inst *FundAddSupportedToken) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *FundAddSupportedToken) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *FundAddSupportedToken {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *FundAddSupportedToken) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *FundAddSupportedToken) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *FundAddSupportedToken {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *FundAddSupportedToken) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst FundAddSupportedToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_FundAddSupportedToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst FundAddSupportedToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *FundAddSupportedToken) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TokenCap == nil {
			return errors.New("TokenCap parameter is not set")
		}
		if inst.TokenPricingSource == nil {
			return errors.New("TokenPricingSource parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Fund is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FundTokenAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ReceiptTokenMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.FundTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *FundAddSupportedToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("FundAddSupportedToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("            TokenCap", *inst.TokenCap))
						paramsBranch.Child(ag_format.Param("  TokenPricingSource", inst.TokenPricingSource))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   admin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                    fund", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    fund_token_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      receipt_token_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              token_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             fund_token_", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("associated_token_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("           token_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          system_program", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj FundAddSupportedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenCap` param:
	err = encoder.Encode(obj.TokenCap)
	if err != nil {
		return err
	}
	// Serialize `TokenPricingSource` param:
	{
		tmp := tokenPricingSourceContainer{}
		switch realvalue := obj.TokenPricingSource.(type) {
		case *TokenPricingSourceSPLStakePoolTuple:
			tmp.Enum = 0
			tmp.SPLStakePool = *realvalue
		case *TokenPricingSourceMarinadeStakePoolTuple:
			tmp.Enum = 1
			tmp.MarinadeStakePool = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}
func (obj *FundAddSupportedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenCap`:
	err = decoder.Decode(&obj.TokenCap)
	if err != nil {
		return err
	}
	// Deserialize `TokenPricingSource`:
	{
		tmp := new(tokenPricingSourceContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.TokenPricingSource = &tmp.SPLStakePool
		case 1:
			obj.TokenPricingSource = &tmp.MarinadeStakePool
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

// NewFundAddSupportedTokenInstruction declares a new FundAddSupportedToken instruction with the provided parameters and accounts.
func NewFundAddSupportedTokenInstruction(
	// Parameters:
	token_cap uint64,
	token_pricing_source TokenPricingSource,
	// Accounts:
	admin ag_solanago.PublicKey,
	fund ag_solanago.PublicKey,
	fundTokenAuthority ag_solanago.PublicKey,
	receiptTokenMint ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	fundTokenAccount ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *FundAddSupportedToken {
	return NewFundAddSupportedTokenInstructionBuilder().
		SetTokenCap(token_cap).
		SetTokenPricingSource(token_pricing_source).
		SetAdminAccount(admin).
		SetFundAccount(fund).
		SetFundTokenAuthorityAccount(fundTokenAuthority).
		SetReceiptTokenMintAccount(receiptTokenMint).
		SetTokenMintAccount(tokenMint).
		SetFundTokenAccountAccount(fundTokenAccount).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram)
}
