// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrFundSOLTransferFailed = &customErrorDef{
		code: 6000,
		msg:  "SOL transfer failed",
		name: "FundSOLTransferFailed",
	}
	ErrFundTokenTransferFailed = &customErrorDef{
		code: 6001,
		msg:  "Token transfer failed",
		name: "FundTokenTransferFailed",
	}
	ErrFundAlreadyExistingToken = &customErrorDef{
		code: 6002,
		msg:  "Already existing token",
		name: "FundAlreadyExistingToken",
	}
	ErrFundNotExistingToken = &customErrorDef{
		code: 6003,
		msg:  "Not existing token",
		name: "FundNotExistingToken",
	}
	ErrFundDuplicatedToken = &customErrorDef{
		code: 6004,
		msg:  "Duplicated tokens in the list",
		name: "FundDuplicatedToken",
	}
	ErrFundExceedsTokenCap = &customErrorDef{
		code: 6005,
		msg:  "Exceeds the token cap",
		name: "FundExceedsTokenCap",
	}
	ErrFundWithdrawalRequestExceedsSOLAmountsInTemp = &customErrorDef{
		code: 6006,
		msg:  "Batch withdrwal amount exceeds SOL amount in fund",
		name: "FundWithdrawalRequestExceedsSOLAmountsInTemp",
	}
	ErrOperatorUnmetThreshold = &customErrorDef{
		code: 6007,
		msg:  "Operator unmet threshold",
		name: "OperatorUnmetThreshold",
	}
	ErrTokenNotCurrentlyTransferring = &customErrorDef{
		code: 6008,
		msg:  "Token is not currently transferring",
		name: "TokenNotCurrentlyTransferring",
	}
	ErrFundWithdrawalRequestNotFound = &customErrorDef{
		code: 6009,
		msg:  "Withdrawal request not found",
		name: "FundWithdrawalRequestNotFound",
	}
	ErrFundWithdrawalNotCompleted = &customErrorDef{
		code: 6010,
		msg:  "Withdrawal request not completed",
		name: "FundWithdrawalNotCompleted",
	}
	ErrFundNotEnoughReservedSol = &customErrorDef{
		code: 6011,
		msg:  "Not enough reserved Sol",
		name: "FundNotEnoughReservedSol",
	}
	ErrFundWithdrawalDisabled = &customErrorDef{
		code: 6012,
		msg:  "Withdrawal is currently disabled",
		name: "FundWithdrawalDisabled",
	}
	ErrFundWithdrawalAlreadyInProgress = &customErrorDef{
		code: 6013,
		msg:  "Withdrawal request already started processing",
		name: "FundWithdrawalAlreadyInProgress",
	}
	ErrSigVerificationFailed = &customErrorDef{
		code: 6014,
		msg:  "Signature verification failed",
		name: "SigVerificationFailed",
	}
	ErrCalculationFailure = &customErrorDef{
		code: 6015,
		msg:  "Calculation failed due to overflow/underflow",
		name: "CalculationFailure",
	}
	ErrFundTokenPricingSourceNotFound = &customErrorDef{
		code: 6016,
		msg:  "Token pricing source not provided",
		name: "FundTokenPricingSourceNotFound",
	}
	Errors = map[int]CustomError{
		6000: ErrFundSOLTransferFailed,
		6001: ErrFundTokenTransferFailed,
		6002: ErrFundAlreadyExistingToken,
		6003: ErrFundNotExistingToken,
		6004: ErrFundDuplicatedToken,
		6005: ErrFundExceedsTokenCap,
		6006: ErrFundWithdrawalRequestExceedsSOLAmountsInTemp,
		6007: ErrOperatorUnmetThreshold,
		6008: ErrTokenNotCurrentlyTransferring,
		6009: ErrFundWithdrawalRequestNotFound,
		6010: ErrFundWithdrawalNotCompleted,
		6011: ErrFundNotEnoughReservedSol,
		6012: ErrFundWithdrawalDisabled,
		6013: ErrFundWithdrawalAlreadyInProgress,
		6014: ErrSigVerificationFailed,
		6015: ErrCalculationFailure,
		6016: ErrFundTokenPricingSourceNotFound,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
