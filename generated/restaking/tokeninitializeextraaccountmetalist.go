// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TokenInitializeExtraAccountMetaList is the `token_initialize_extra_account_meta_list` instruction.
type TokenInitializeExtraAccountMetaList struct {

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [WRITE] extra_account_meta_list
	//
	// [2] = [] receipt_token_mint
	//
	// [3] = [WRITE] fund
	//
	// [4] = [] token_program
	//
	// [5] = [] system_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTokenInitializeExtraAccountMetaListInstructionBuilder creates a new `TokenInitializeExtraAccountMetaList` instruction builder.
func NewTokenInitializeExtraAccountMetaListInstructionBuilder() *TokenInitializeExtraAccountMetaList {
	nd := &TokenInitializeExtraAccountMetaList{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(ag_solanago.MustPublicKeyFromBase58("FRAGsJAbW4cHk2DYhtAWohV6MUMauJHCFtT1vGvRwnXN"))
	nd.AccountMetaSlice[4] = ag_solanago.Meta(ag_solanago.MustPublicKeyFromBase58("TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"))
	nd.AccountMetaSlice[5] = ag_solanago.Meta(ag_solanago.MustPublicKeyFromBase58("11111111111111111111111111111111"))
	return nd
}

// SetPayerAccount sets the "payer" account.
func (inst *TokenInitializeExtraAccountMetaList) SetPayerAccount(payer ag_solanago.PublicKey) *TokenInitializeExtraAccountMetaList {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *TokenInitializeExtraAccountMetaList) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetExtraAccountMetaListAccount sets the "extra_account_meta_list" account.
func (inst *TokenInitializeExtraAccountMetaList) SetExtraAccountMetaListAccount(extraAccountMetaList ag_solanago.PublicKey) *TokenInitializeExtraAccountMetaList {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(extraAccountMetaList).WRITE()
	return inst
}

func (inst *TokenInitializeExtraAccountMetaList) findFindExtraAccountMetaListAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: extra-account-metas
	seeds = append(seeds, []byte{byte(0x65), byte(0x78), byte(0x74), byte(0x72), byte(0x61), byte(0x2d), byte(0x61), byte(0x63), byte(0x63), byte(0x6f), byte(0x75), byte(0x6e), byte(0x74), byte(0x2d), byte(0x6d), byte(0x65), byte(0x74), byte(0x61), byte(0x73)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindExtraAccountMetaListAddressWithBumpSeed calculates ExtraAccountMetaList account address with given seeds and a known bump seed.
func (inst *TokenInitializeExtraAccountMetaList) FindExtraAccountMetaListAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindExtraAccountMetaListAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *TokenInitializeExtraAccountMetaList) MustFindExtraAccountMetaListAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindExtraAccountMetaListAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindExtraAccountMetaListAddress finds ExtraAccountMetaList account address with given seeds.
func (inst *TokenInitializeExtraAccountMetaList) FindExtraAccountMetaListAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindExtraAccountMetaListAddress(receiptTokenMint, 0)
	return
}

func (inst *TokenInitializeExtraAccountMetaList) MustFindExtraAccountMetaListAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindExtraAccountMetaListAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetExtraAccountMetaListAccount gets the "extra_account_meta_list" account.
func (inst *TokenInitializeExtraAccountMetaList) GetExtraAccountMetaListAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetReceiptTokenMintAccount sets the "receipt_token_mint" account.
func (inst *TokenInitializeExtraAccountMetaList) SetReceiptTokenMintAccount(receiptTokenMint ag_solanago.PublicKey) *TokenInitializeExtraAccountMetaList {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(receiptTokenMint)
	return inst
}

// GetReceiptTokenMintAccount gets the "receipt_token_mint" account.
func (inst *TokenInitializeExtraAccountMetaList) GetReceiptTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFundAccount sets the "fund" account.
func (inst *TokenInitializeExtraAccountMetaList) SetFundAccount(fund ag_solanago.PublicKey) *TokenInitializeExtraAccountMetaList {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(fund).WRITE()
	return inst
}

func (inst *TokenInitializeExtraAccountMetaList) findFindFundAddress(receiptTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: fund_seed
	seeds = append(seeds, []byte{byte(0x66), byte(0x75), byte(0x6e), byte(0x64), byte(0x5f), byte(0x73), byte(0x65), byte(0x65), byte(0x64)})
	// path: receiptTokenMint
	seeds = append(seeds, receiptTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundAddressWithBumpSeed calculates Fund account address with given seeds and a known bump seed.
func (inst *TokenInitializeExtraAccountMetaList) FindFundAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundAddress(receiptTokenMint, bumpSeed)
	return
}

func (inst *TokenInitializeExtraAccountMetaList) MustFindFundAddressWithBumpSeed(receiptTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAddress(receiptTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundAddress finds Fund account address with given seeds.
func (inst *TokenInitializeExtraAccountMetaList) FindFundAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundAddress(receiptTokenMint, 0)
	return
}

func (inst *TokenInitializeExtraAccountMetaList) MustFindFundAddress(receiptTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAddress(receiptTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundAccount gets the "fund" account.
func (inst *TokenInitializeExtraAccountMetaList) GetFundAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *TokenInitializeExtraAccountMetaList) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *TokenInitializeExtraAccountMetaList {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *TokenInitializeExtraAccountMetaList) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *TokenInitializeExtraAccountMetaList) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *TokenInitializeExtraAccountMetaList {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *TokenInitializeExtraAccountMetaList) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst TokenInitializeExtraAccountMetaList) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TokenInitializeExtraAccountMetaList,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TokenInitializeExtraAccountMetaList) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TokenInitializeExtraAccountMetaList) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ExtraAccountMetaList is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ReceiptTokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Fund is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *TokenInitializeExtraAccountMetaList) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TokenInitializeExtraAccountMetaList")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("extra_account_meta_list", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     receipt_token_mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                   fund", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          token_program", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         system_program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj TokenInitializeExtraAccountMetaList) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *TokenInitializeExtraAccountMetaList) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewTokenInitializeExtraAccountMetaListInstruction declares a new TokenInitializeExtraAccountMetaList instruction with the provided parameters and accounts.
func NewTokenInitializeExtraAccountMetaListInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	extraAccountMetaList ag_solanago.PublicKey,
	receiptTokenMint ag_solanago.PublicKey,
	fund ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *TokenInitializeExtraAccountMetaList {
	return NewTokenInitializeExtraAccountMetaListInstructionBuilder().
		SetPayerAccount(payer).
		SetExtraAccountMetaListAccount(extraAccountMetaList).
		SetReceiptTokenMintAccount(receiptTokenMint).
		SetFundAccount(fund).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram)
}
