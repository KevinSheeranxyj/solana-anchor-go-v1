// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// FundManagerCloseFundAccount is the `fund_manager_close_fund_account` instruction.
type FundManagerCloseFundAccount struct {

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] admin
	//
	// [2] = [WRITE] fund_account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewFundManagerCloseFundAccountInstructionBuilder creates a new `FundManagerCloseFundAccount` instruction builder.
func NewFundManagerCloseFundAccountInstructionBuilder() *FundManagerCloseFundAccount {
	nd := &FundManagerCloseFundAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[1] = ag_solanago.Meta(Addresses["5FjrErTQ9P1ThYVdY9RamrPUCQGTMCcczUjH21iKzbwx"]).SIGNER()
	return nd
}

// SetPayerAccount sets the "payer" account.
func (inst *FundManagerCloseFundAccount) SetPayerAccount(payer ag_solanago.PublicKey) *FundManagerCloseFundAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *FundManagerCloseFundAccount) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *FundManagerCloseFundAccount) SetAdminAccount(admin ag_solanago.PublicKey) *FundManagerCloseFundAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *FundManagerCloseFundAccount) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFundAccountAccount sets the "fund_account" account.
func (inst *FundManagerCloseFundAccount) SetFundAccountAccount(fundAccount ag_solanago.PublicKey) *FundManagerCloseFundAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(fundAccount).WRITE()
	return inst
}

func (inst *FundManagerCloseFundAccount) findFindFundAccountAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: fund
	seeds = append(seeds, []byte{byte(0x66), byte(0x75), byte(0x6e), byte(0x64)})
	// const (raw): [176 64 228 130 214 123 80 76 100 178 192 192 179 126 147 60 234 167 167 116 119 133 49 140 60 54 168 166 57 242 137 226]
	seeds = append(seeds, []byte{byte(0xb0), byte(0x40), byte(0xe4), byte(0x82), byte(0xd6), byte(0x7b), byte(0x50), byte(0x4c), byte(0x64), byte(0xb2), byte(0xc0), byte(0xc0), byte(0xb3), byte(0x7e), byte(0x93), byte(0x3c), byte(0xea), byte(0xa7), byte(0xa7), byte(0x74), byte(0x77), byte(0x85), byte(0x31), byte(0x8c), byte(0x3c), byte(0x36), byte(0xa8), byte(0xa6), byte(0x39), byte(0xf2), byte(0x89), byte(0xe2)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundAccountAddressWithBumpSeed calculates FundAccount account address with given seeds and a known bump seed.
func (inst *FundManagerCloseFundAccount) FindFundAccountAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundAccountAddress(bumpSeed)
	return
}

func (inst *FundManagerCloseFundAccount) MustFindFundAccountAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundAccountAddress finds FundAccount account address with given seeds.
func (inst *FundManagerCloseFundAccount) FindFundAccountAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundAccountAddress(0)
	return
}

func (inst *FundManagerCloseFundAccount) MustFindFundAccountAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundAccountAccount gets the "fund_account" account.
func (inst *FundManagerCloseFundAccount) GetFundAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst FundManagerCloseFundAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_FundManagerCloseFundAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst FundManagerCloseFundAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *FundManagerCloseFundAccount) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FundAccount is not set")
		}
	}
	return nil
}

func (inst *FundManagerCloseFundAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("FundManagerCloseFundAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("fund_", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj FundManagerCloseFundAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *FundManagerCloseFundAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewFundManagerCloseFundAccountInstruction declares a new FundManagerCloseFundAccount instruction with the provided parameters and accounts.
func NewFundManagerCloseFundAccountInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	fundAccount ag_solanago.PublicKey) *FundManagerCloseFundAccount {
	return NewFundManagerCloseFundAccountInstructionBuilder().
		SetPayerAccount(payer).
		SetAdminAccount(admin).
		SetFundAccountAccount(fundAccount)
}
