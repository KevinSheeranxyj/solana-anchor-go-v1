// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// FundManagerCloseFundAccount is the `fund_manager_close_fund_account` instruction.
type FundManagerCloseFundAccount struct {

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] fund_manager
	//
	// [2] = [WRITE] fund_account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewFundManagerCloseFundAccountInstructionBuilder creates a new `FundManagerCloseFundAccount` instruction builder.
func NewFundManagerCloseFundAccountInstructionBuilder() *FundManagerCloseFundAccount {
	nd := &FundManagerCloseFundAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	nd.AccountMetaSlice[1] = ag_solanago.Meta(Addresses["5UpLTLA7Wjqp7qdfjuTtPcUw3aVtbqFA5Mgm34mxPNg2"]).SIGNER()
	return nd
}

// SetPayerAccount sets the "payer" account.
func (inst *FundManagerCloseFundAccount) SetPayerAccount(payer ag_solanago.PublicKey) *FundManagerCloseFundAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *FundManagerCloseFundAccount) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFundManagerAccount sets the "fund_manager" account.
func (inst *FundManagerCloseFundAccount) SetFundManagerAccount(fundManager ag_solanago.PublicKey) *FundManagerCloseFundAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(fundManager).SIGNER()
	return inst
}

// GetFundManagerAccount gets the "fund_manager" account.
func (inst *FundManagerCloseFundAccount) GetFundManagerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFundAccountAccount sets the "fund_account" account.
func (inst *FundManagerCloseFundAccount) SetFundAccountAccount(fundAccount ag_solanago.PublicKey) *FundManagerCloseFundAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(fundAccount).WRITE()
	return inst
}

func (inst *FundManagerCloseFundAccount) findFindFundAccountAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: fund
	seeds = append(seeds, []byte{byte(0x66), byte(0x75), byte(0x6e), byte(0x64)})
	// const (raw): [214 52 8 155 182 149 115 57 20 131 125 232 82 251 210 76 255 40 78 39 34 166 52 128 105 118 67 202 117 247 108 146]
	seeds = append(seeds, []byte{byte(0xd6), byte(0x34), byte(0x8), byte(0x9b), byte(0xb6), byte(0x95), byte(0x73), byte(0x39), byte(0x14), byte(0x83), byte(0x7d), byte(0xe8), byte(0x52), byte(0xfb), byte(0xd2), byte(0x4c), byte(0xff), byte(0x28), byte(0x4e), byte(0x27), byte(0x22), byte(0xa6), byte(0x34), byte(0x80), byte(0x69), byte(0x76), byte(0x43), byte(0xca), byte(0x75), byte(0xf7), byte(0x6c), byte(0x92)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindFundAccountAddressWithBumpSeed calculates FundAccount account address with given seeds and a known bump seed.
func (inst *FundManagerCloseFundAccount) FindFundAccountAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindFundAccountAddress(bumpSeed)
	return
}

func (inst *FundManagerCloseFundAccount) MustFindFundAccountAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindFundAccountAddress finds FundAccount account address with given seeds.
func (inst *FundManagerCloseFundAccount) FindFundAccountAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindFundAccountAddress(0)
	return
}

func (inst *FundManagerCloseFundAccount) MustFindFundAccountAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindFundAccountAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetFundAccountAccount gets the "fund_account" account.
func (inst *FundManagerCloseFundAccount) GetFundAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst FundManagerCloseFundAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_FundManagerCloseFundAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst FundManagerCloseFundAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *FundManagerCloseFundAccount) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FundManager is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FundAccount is not set")
		}
	}
	return nil
}

func (inst *FundManagerCloseFundAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("FundManagerCloseFundAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("fund_manager", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       fund_", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj FundManagerCloseFundAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *FundManagerCloseFundAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewFundManagerCloseFundAccountInstruction declares a new FundManagerCloseFundAccount instruction with the provided parameters and accounts.
func NewFundManagerCloseFundAccountInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	fundManager ag_solanago.PublicKey,
	fundAccount ag_solanago.PublicKey) *FundManagerCloseFundAccount {
	return NewFundManagerCloseFundAccountInstructionBuilder().
		SetPayerAccount(payer).
		SetFundManagerAccount(fundManager).
		SetFundAccountAccount(fundAccount)
}
