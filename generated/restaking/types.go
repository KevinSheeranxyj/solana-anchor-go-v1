// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Asset interface {
	isAsset()
}

type assetContainer struct {
	Enum  ag_binary.BorshEnum `borsh_enum:"true"`
	SOL   AssetSOLTuple
	Token AssetTokenTuple
}

type AssetSOLTuple struct {
	Elem0 uint64
}

func (_ AssetSOLTuple) isAsset() {}

type AssetTokenTuple struct {
	Elem0 ag_solanago.PublicKey
	Elem1 *TokenPricingSource `bin:"optional"`
	Elem2 uint64
}

func (_ AssetTokenTuple) isAsset() {}

type AssetPod struct {
	Discriminant       uint8
	Padding            [7]uint8
	SolAmount          uint64
	TokenAmount        uint64
	TokenMint          ag_solanago.PublicKey
	TokenPricingSource TokenPricingSourcePod
}

func (obj AssetPod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Discriminant` param:
	err = encoder.Encode(obj.Discriminant)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `SolAmount` param:
	err = encoder.Encode(obj.SolAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAmount` param:
	err = encoder.Encode(obj.TokenAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `TokenPricingSource` param:
	err = encoder.Encode(obj.TokenPricingSource)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AssetPod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Discriminant`:
	err = decoder.Decode(&obj.Discriminant)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `SolAmount`:
	err = decoder.Decode(&obj.SolAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmount`:
	err = decoder.Decode(&obj.TokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenPricingSource`:
	err = decoder.Decode(&obj.TokenPricingSource)
	if err != nil {
		return err
	}
	return nil
}

type AssetState struct {
	TokenMint                        ag_solanago.PublicKey
	TokenProgram                     ag_solanago.PublicKey
	AccumulatedDepositCapacityAmount uint64
	AccumulatedDepositAmount         uint64
	Depositable                      uint8
	Padding                          [4]uint8
	Withdrawable                     uint8
	NormalReserveRateBps             uint16
	NormalReserveMaxAmount           uint64
	WithdrawalLastCreatedRequestId   uint64
	WithdrawalLastProcessedBatchId   uint64
	WithdrawalLastBatchEnqueuedAt    int64
	WithdrawalLastBatchProcessedAt   int64
	WithdrawalPendingBatch           WithdrawalBatch
	Padding2                         [15]uint8
	WithdrawalNumQueuedBatches       uint8
	WithdrawalQueuedBatches          [10]WithdrawalBatch
	Reserved                         [56]uint8

	// receipt token amount that users can request to withdraw with the given asset from the fund.
	// it can be conditionally inaccurate on price changes among multiple assets, so make sure to update this properly before any use of it.
	// do not make any hard limit constraints with this value from off-chain. a requested withdrawal amount will be adjusted on-chain based on the status.
	WithdrawableValueAsReceiptTokenAmount uint64

	// informative: reserved amount that users can claim for processed withdrawal requests, which is not accounted for as an asset of the fund.
	WithdrawalUserReservedAmount uint64

	// asset: receivable amount that the fund may charge the users requesting withdrawals.
	// It is accrued during either the preparation of the withdrawal obligation or rebalancing of LST like fees from (un)staking or (un)restaking.
	// And it shall be settled by the withdrawal fee normally. And it also can be written off by a donation operation.
	// Then it costs the rebalancing expense to the capital of the fund itself as an operation cost instead of charging the users requesting withdrawals.
	OperationReceivableAmount uint64

	// asset: remaining asset for cash-in/out
	OperationReservedAmount uint64
}

func (obj AssetState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `TokenProgram` param:
	err = encoder.Encode(obj.TokenProgram)
	if err != nil {
		return err
	}
	// Serialize `AccumulatedDepositCapacityAmount` param:
	err = encoder.Encode(obj.AccumulatedDepositCapacityAmount)
	if err != nil {
		return err
	}
	// Serialize `AccumulatedDepositAmount` param:
	err = encoder.Encode(obj.AccumulatedDepositAmount)
	if err != nil {
		return err
	}
	// Serialize `Depositable` param:
	err = encoder.Encode(obj.Depositable)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Withdrawable` param:
	err = encoder.Encode(obj.Withdrawable)
	if err != nil {
		return err
	}
	// Serialize `NormalReserveRateBps` param:
	err = encoder.Encode(obj.NormalReserveRateBps)
	if err != nil {
		return err
	}
	// Serialize `NormalReserveMaxAmount` param:
	err = encoder.Encode(obj.NormalReserveMaxAmount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalLastCreatedRequestId` param:
	err = encoder.Encode(obj.WithdrawalLastCreatedRequestId)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalLastProcessedBatchId` param:
	err = encoder.Encode(obj.WithdrawalLastProcessedBatchId)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalLastBatchEnqueuedAt` param:
	err = encoder.Encode(obj.WithdrawalLastBatchEnqueuedAt)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalLastBatchProcessedAt` param:
	err = encoder.Encode(obj.WithdrawalLastBatchProcessedAt)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalPendingBatch` param:
	err = encoder.Encode(obj.WithdrawalPendingBatch)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalNumQueuedBatches` param:
	err = encoder.Encode(obj.WithdrawalNumQueuedBatches)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalQueuedBatches` param:
	err = encoder.Encode(obj.WithdrawalQueuedBatches)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `WithdrawableValueAsReceiptTokenAmount` param:
	err = encoder.Encode(obj.WithdrawableValueAsReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalUserReservedAmount` param:
	err = encoder.Encode(obj.WithdrawalUserReservedAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReceivableAmount` param:
	err = encoder.Encode(obj.OperationReceivableAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedAmount` param:
	err = encoder.Encode(obj.OperationReservedAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AssetState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenProgram`:
	err = decoder.Decode(&obj.TokenProgram)
	if err != nil {
		return err
	}
	// Deserialize `AccumulatedDepositCapacityAmount`:
	err = decoder.Decode(&obj.AccumulatedDepositCapacityAmount)
	if err != nil {
		return err
	}
	// Deserialize `AccumulatedDepositAmount`:
	err = decoder.Decode(&obj.AccumulatedDepositAmount)
	if err != nil {
		return err
	}
	// Deserialize `Depositable`:
	err = decoder.Decode(&obj.Depositable)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Withdrawable`:
	err = decoder.Decode(&obj.Withdrawable)
	if err != nil {
		return err
	}
	// Deserialize `NormalReserveRateBps`:
	err = decoder.Decode(&obj.NormalReserveRateBps)
	if err != nil {
		return err
	}
	// Deserialize `NormalReserveMaxAmount`:
	err = decoder.Decode(&obj.NormalReserveMaxAmount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalLastCreatedRequestId`:
	err = decoder.Decode(&obj.WithdrawalLastCreatedRequestId)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalLastProcessedBatchId`:
	err = decoder.Decode(&obj.WithdrawalLastProcessedBatchId)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalLastBatchEnqueuedAt`:
	err = decoder.Decode(&obj.WithdrawalLastBatchEnqueuedAt)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalLastBatchProcessedAt`:
	err = decoder.Decode(&obj.WithdrawalLastBatchProcessedAt)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalPendingBatch`:
	err = decoder.Decode(&obj.WithdrawalPendingBatch)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalNumQueuedBatches`:
	err = decoder.Decode(&obj.WithdrawalNumQueuedBatches)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalQueuedBatches`:
	err = decoder.Decode(&obj.WithdrawalQueuedBatches)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawableValueAsReceiptTokenAmount`:
	err = decoder.Decode(&obj.WithdrawableValueAsReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalUserReservedAmount`:
	err = decoder.Decode(&obj.WithdrawalUserReservedAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReceivableAmount`:
	err = decoder.Decode(&obj.OperationReceivableAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedAmount`:
	err = decoder.Decode(&obj.OperationReservedAmount)
	if err != nil {
		return err
	}
	return nil
}

type ClaimUnrestakedVSTCommand struct {
	Items []ClaimUnrestakedVSTCommandItem
	State ClaimUnrestakedVSTCommandState
}

func (obj ClaimUnrestakedVSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	{
		tmp := claimUnrestakedVSTCommandStateContainer{}
		switch realvalue := obj.State.(type) {
		case *ClaimUnrestakedVSTCommandStateInitTuple:
			tmp.Enum = 0
			tmp.Init = *realvalue
		case *ClaimUnrestakedVSTCommandStateInit2Tuple:
			tmp.Enum = 1
			tmp.Init2 = *realvalue
		case *ClaimUnrestakedVSTCommandStateReadVaultStateTuple:
			tmp.Enum = 2
			tmp.ReadVaultState = *realvalue
		case *ClaimUnrestakedVSTCommandStateClaimTuple:
			tmp.Enum = 3
			tmp.Claim = *realvalue
		case *ClaimUnrestakedVSTCommandStateSetupDenormalizeTuple:
			tmp.Enum = 4
			tmp.SetupDenormalize = *realvalue
		case *ClaimUnrestakedVSTCommandStateDenormalizeTuple:
			tmp.Enum = 5
			tmp.Denormalize = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *ClaimUnrestakedVSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	{
		tmp := new(claimUnrestakedVSTCommandStateContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.State = (*ClaimUnrestakedVSTCommandStateInitTuple)(&tmp.Enum)
		case 1:
			obj.State = (*ClaimUnrestakedVSTCommandStateInit2Tuple)(&tmp.Enum)
		case 2:
			obj.State = (*ClaimUnrestakedVSTCommandStateReadVaultStateTuple)(&tmp.Enum)
		case 3:
			obj.State = &tmp.Claim
		case 4:
			obj.State = &tmp.SetupDenormalize
		case 5:
			obj.State = &tmp.Denormalize
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

type ClaimUnrestakedVSTCommandItem struct {
	VaultAddress ag_solanago.PublicKey
}

func (obj ClaimUnrestakedVSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VaultAddress` param:
	err = encoder.Encode(obj.VaultAddress)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnrestakedVSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VaultAddress`:
	err = decoder.Decode(&obj.VaultAddress)
	if err != nil {
		return err
	}
	return nil
}

type ClaimUnrestakedVSTCommandResult struct{}

func (obj ClaimUnrestakedVSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimUnrestakedVSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type ClaimUnrestakedVSTCommandState interface {
	isClaimUnrestakedVSTCommandState()
}

type claimUnrestakedVSTCommandStateContainer struct {
	Enum             ag_binary.BorshEnum `borsh_enum:"true"`
	Init             ClaimUnrestakedVSTCommandStateInitTuple
	Init2            ClaimUnrestakedVSTCommandStateInit2Tuple
	ReadVaultState   ClaimUnrestakedVSTCommandStateReadVaultStateTuple
	Claim            ClaimUnrestakedVSTCommandStateClaimTuple
	SetupDenormalize ClaimUnrestakedVSTCommandStateSetupDenormalizeTuple
	Denormalize      ClaimUnrestakedVSTCommandStateDenormalizeTuple
}

type ClaimUnrestakedVSTCommandStateInitTuple uint8

func (obj ClaimUnrestakedVSTCommandStateInitTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimUnrestakedVSTCommandStateInitTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ClaimUnrestakedVSTCommandStateInitTuple) isClaimUnrestakedVSTCommandState() {}

type ClaimUnrestakedVSTCommandStateInit2Tuple uint8

func (obj ClaimUnrestakedVSTCommandStateInit2Tuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimUnrestakedVSTCommandStateInit2Tuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ClaimUnrestakedVSTCommandStateInit2Tuple) isClaimUnrestakedVSTCommandState() {}

type ClaimUnrestakedVSTCommandStateReadVaultStateTuple uint8

func (obj ClaimUnrestakedVSTCommandStateReadVaultStateTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimUnrestakedVSTCommandStateReadVaultStateTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ClaimUnrestakedVSTCommandStateReadVaultStateTuple) isClaimUnrestakedVSTCommandState() {}

type ClaimUnrestakedVSTCommandStateClaimTuple struct {
	Elem0 ClaimableUnrestakeWithdrawalStatus
}

func (_ ClaimUnrestakedVSTCommandStateClaimTuple) isClaimUnrestakedVSTCommandState() {}

type ClaimUnrestakedVSTCommandStateSetupDenormalizeTuple struct {
	Elem0 uint64
}

func (_ ClaimUnrestakedVSTCommandStateSetupDenormalizeTuple) isClaimUnrestakedVSTCommandState() {}

type ClaimUnrestakedVSTCommandStateDenormalizeTuple struct {
	Elem0 []DenormalizeSupportedTokenAsset
}

func (_ ClaimUnrestakedVSTCommandStateDenormalizeTuple) isClaimUnrestakedVSTCommandState() {}

type ClaimUnstakedSOLCommand struct {
	Items []ClaimUnstakedSOLCommandItem
	State ClaimUnstakedSOLCommandState
}

func (obj ClaimUnstakedSOLCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnstakedSOLCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	return nil
}

type ClaimUnstakedSOLCommandItem struct {
	Mint              ag_solanago.PublicKey
	FundStakeAccounts []ag_solanago.PublicKey
}

func (obj ClaimUnstakedSOLCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `FundStakeAccounts` param:
	err = encoder.Encode(obj.FundStakeAccounts)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimUnstakedSOLCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `FundStakeAccounts`:
	err = decoder.Decode(&obj.FundStakeAccounts)
	if err != nil {
		return err
	}
	return nil
}

type ClaimUnstakedSOLCommandResult struct{}

func (obj ClaimUnstakedSOLCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ClaimUnstakedSOLCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type ClaimUnstakedSOLCommandState ag_binary.BorshEnum

const (
	ClaimUnstakedSOLCommandStateInit ClaimUnstakedSOLCommandState = iota
	ClaimUnstakedSOLCommandStateReadPoolState
	ClaimUnstakedSOLCommandStateClaim
)

func (value ClaimUnstakedSOLCommandState) String() string {
	switch value {
	case ClaimUnstakedSOLCommandStateInit:
		return "Init"
	case ClaimUnstakedSOLCommandStateReadPoolState:
		return "ReadPoolState"
	case ClaimUnstakedSOLCommandStateClaim:
		return "Claim"
	default:
		return ""
	}
}

type ClaimableUnrestakeWithdrawalStatus struct {
	WithdrawalTickets   []ClaimableUnrestakeWithdrawalTicket
	ExpectedNcnEpoch    uint64
	DelayedNcnEpoch     uint64
	UnrestakedVstAmount uint64
}

func (obj ClaimableUnrestakeWithdrawalStatus) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WithdrawalTickets` param:
	err = encoder.Encode(obj.WithdrawalTickets)
	if err != nil {
		return err
	}
	// Serialize `ExpectedNcnEpoch` param:
	err = encoder.Encode(obj.ExpectedNcnEpoch)
	if err != nil {
		return err
	}
	// Serialize `DelayedNcnEpoch` param:
	err = encoder.Encode(obj.DelayedNcnEpoch)
	if err != nil {
		return err
	}
	// Serialize `UnrestakedVstAmount` param:
	err = encoder.Encode(obj.UnrestakedVstAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimableUnrestakeWithdrawalStatus) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WithdrawalTickets`:
	err = decoder.Decode(&obj.WithdrawalTickets)
	if err != nil {
		return err
	}
	// Deserialize `ExpectedNcnEpoch`:
	err = decoder.Decode(&obj.ExpectedNcnEpoch)
	if err != nil {
		return err
	}
	// Deserialize `DelayedNcnEpoch`:
	err = decoder.Decode(&obj.DelayedNcnEpoch)
	if err != nil {
		return err
	}
	// Deserialize `UnrestakedVstAmount`:
	err = decoder.Decode(&obj.UnrestakedVstAmount)
	if err != nil {
		return err
	}
	return nil
}

type ClaimableUnrestakeWithdrawalTicket struct {
	WithdrawalTicketAccount      ag_solanago.PublicKey
	WithdrawalTicketTokenAccount ag_solanago.PublicKey
}

func (obj ClaimableUnrestakeWithdrawalTicket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WithdrawalTicketAccount` param:
	err = encoder.Encode(obj.WithdrawalTicketAccount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalTicketTokenAccount` param:
	err = encoder.Encode(obj.WithdrawalTicketTokenAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimableUnrestakeWithdrawalTicket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WithdrawalTicketAccount`:
	err = decoder.Decode(&obj.WithdrawalTicketAccount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalTicketTokenAccount`:
	err = decoder.Decode(&obj.WithdrawalTicketTokenAccount)
	if err != nil {
		return err
	}
	return nil
}

type DelegateVSTCommand struct{}

func (obj DelegateVSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *DelegateVSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type DelegateVSTCommandResult struct{}

func (obj DelegateVSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *DelegateVSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type DenormalizeNTCommand struct{}

func (obj DenormalizeNTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *DenormalizeNTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type DenormalizeNTCommandResult struct{}

func (obj DenormalizeNTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *DenormalizeNTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type DenormalizeSupportedTokenAsset struct {
	OperationReservedAmount uint64
	TokenMint               ag_solanago.PublicKey
	TokenProgram            ag_solanago.PublicKey
}

func (obj DenormalizeSupportedTokenAsset) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OperationReservedAmount` param:
	err = encoder.Encode(obj.OperationReservedAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `TokenProgram` param:
	err = encoder.Encode(obj.TokenProgram)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DenormalizeSupportedTokenAsset) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OperationReservedAmount`:
	err = decoder.Decode(&obj.OperationReservedAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenProgram`:
	err = decoder.Decode(&obj.TokenProgram)
	if err != nil {
		return err
	}
	return nil
}

type DepositMetadata struct {
	User                    ag_solanago.PublicKey
	WalletProvider          string
	ContributionAccrualRate uint8
	ExpiredAt               int64
}

func (obj DepositMetadata) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `WalletProvider` param:
	err = encoder.Encode(obj.WalletProvider)
	if err != nil {
		return err
	}
	// Serialize `ContributionAccrualRate` param:
	err = encoder.Encode(obj.ContributionAccrualRate)
	if err != nil {
		return err
	}
	// Serialize `ExpiredAt` param:
	err = encoder.Encode(obj.ExpiredAt)
	if err != nil {
		return err
	}
	return nil
}

func (obj *DepositMetadata) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `WalletProvider`:
	err = decoder.Decode(&obj.WalletProvider)
	if err != nil {
		return err
	}
	// Deserialize `ContributionAccrualRate`:
	err = decoder.Decode(&obj.ContributionAccrualRate)
	if err != nil {
		return err
	}
	// Deserialize `ExpiredAt`:
	err = decoder.Decode(&obj.ExpiredAt)
	if err != nil {
		return err
	}
	return nil
}

type EnqueueWithdrawalBatchCommand struct {
	Forced bool
}

func (obj EnqueueWithdrawalBatchCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Forced` param:
	err = encoder.Encode(obj.Forced)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EnqueueWithdrawalBatchCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Forced`:
	err = decoder.Decode(&obj.Forced)
	if err != nil {
		return err
	}
	return nil
}

type EnqueueWithdrawalBatchCommandResult struct {
	EnqueuedReceiptTokenAmount    uint64
	TotalQueuedReceiptTokenAmount uint64
}

func (obj EnqueueWithdrawalBatchCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EnqueuedReceiptTokenAmount` param:
	err = encoder.Encode(obj.EnqueuedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalQueuedReceiptTokenAmount` param:
	err = encoder.Encode(obj.TotalQueuedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EnqueueWithdrawalBatchCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EnqueuedReceiptTokenAmount`:
	err = decoder.Decode(&obj.EnqueuedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalQueuedReceiptTokenAmount`:
	err = decoder.Decode(&obj.TotalQueuedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type FundAccount struct {
	DataVersion         uint16
	Bump                uint8
	ReserveAccountBump  uint8
	TreasuryAccountBump uint8
	Padding             [10]uint8
	TransferEnabled     uint8

	// receipt token information
	ReceiptTokenMint             ag_solanago.PublicKey
	ReceiptTokenProgram          ag_solanago.PublicKey
	ReceiptTokenDecimals         uint8
	Padding2                     [7]uint8
	ReceiptTokenSupplyAmount     uint64
	OneReceiptTokenAsSol         uint64
	ReceiptTokenValueUpdatedSlot uint64
	ReceiptTokenValue            TokenValuePod

	// global withdrawal configurations
	WithdrawalBatchThresholdIntervalSeconds int64
	WithdrawalFeeRateBps                    uint16
	WithdrawalEnabled                       uint8
	DepositEnabled                          uint8
	Padding4                                [4]uint8

	// SOL deposit & withdrawal
	Sol AssetState

	// underlying assets
	Padding6           [15]uint8
	NumSupportedTokens uint8
	SupportedTokens    [30]SupportedToken

	// optional basket of underlying assets
	NormalizedToken NormalizedToken

	// investments
	Padding7           [15]uint8
	NumRestakingVaults uint8
	RestakingVaults    [30]RestakingVault

	// fund operation state
	Operation OperationState
}

func (obj FundAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReserveAccountBump` param:
	err = encoder.Encode(obj.ReserveAccountBump)
	if err != nil {
		return err
	}
	// Serialize `TreasuryAccountBump` param:
	err = encoder.Encode(obj.TreasuryAccountBump)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `TransferEnabled` param:
	err = encoder.Encode(obj.TransferEnabled)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenProgram` param:
	err = encoder.Encode(obj.ReceiptTokenProgram)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenDecimals` param:
	err = encoder.Encode(obj.ReceiptTokenDecimals)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenSupplyAmount` param:
	err = encoder.Encode(obj.ReceiptTokenSupplyAmount)
	if err != nil {
		return err
	}
	// Serialize `OneReceiptTokenAsSol` param:
	err = encoder.Encode(obj.OneReceiptTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenValueUpdatedSlot` param:
	err = encoder.Encode(obj.ReceiptTokenValueUpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenValue` param:
	err = encoder.Encode(obj.ReceiptTokenValue)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalBatchThresholdIntervalSeconds` param:
	err = encoder.Encode(obj.WithdrawalBatchThresholdIntervalSeconds)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalFeeRateBps` param:
	err = encoder.Encode(obj.WithdrawalFeeRateBps)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalEnabled` param:
	err = encoder.Encode(obj.WithdrawalEnabled)
	if err != nil {
		return err
	}
	// Serialize `DepositEnabled` param:
	err = encoder.Encode(obj.DepositEnabled)
	if err != nil {
		return err
	}
	// Serialize `Padding4` param:
	err = encoder.Encode(obj.Padding4)
	if err != nil {
		return err
	}
	// Serialize `Sol` param:
	err = encoder.Encode(obj.Sol)
	if err != nil {
		return err
	}
	// Serialize `Padding6` param:
	err = encoder.Encode(obj.Padding6)
	if err != nil {
		return err
	}
	// Serialize `NumSupportedTokens` param:
	err = encoder.Encode(obj.NumSupportedTokens)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokens` param:
	err = encoder.Encode(obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Serialize `NormalizedToken` param:
	err = encoder.Encode(obj.NormalizedToken)
	if err != nil {
		return err
	}
	// Serialize `Padding7` param:
	err = encoder.Encode(obj.Padding7)
	if err != nil {
		return err
	}
	// Serialize `NumRestakingVaults` param:
	err = encoder.Encode(obj.NumRestakingVaults)
	if err != nil {
		return err
	}
	// Serialize `RestakingVaults` param:
	err = encoder.Encode(obj.RestakingVaults)
	if err != nil {
		return err
	}
	// Serialize `Operation` param:
	err = encoder.Encode(obj.Operation)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReserveAccountBump`:
	err = decoder.Decode(&obj.ReserveAccountBump)
	if err != nil {
		return err
	}
	// Deserialize `TreasuryAccountBump`:
	err = decoder.Decode(&obj.TreasuryAccountBump)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `TransferEnabled`:
	err = decoder.Decode(&obj.TransferEnabled)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenProgram`:
	err = decoder.Decode(&obj.ReceiptTokenProgram)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenDecimals`:
	err = decoder.Decode(&obj.ReceiptTokenDecimals)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenSupplyAmount`:
	err = decoder.Decode(&obj.ReceiptTokenSupplyAmount)
	if err != nil {
		return err
	}
	// Deserialize `OneReceiptTokenAsSol`:
	err = decoder.Decode(&obj.OneReceiptTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenValueUpdatedSlot`:
	err = decoder.Decode(&obj.ReceiptTokenValueUpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenValue`:
	err = decoder.Decode(&obj.ReceiptTokenValue)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalBatchThresholdIntervalSeconds`:
	err = decoder.Decode(&obj.WithdrawalBatchThresholdIntervalSeconds)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalFeeRateBps`:
	err = decoder.Decode(&obj.WithdrawalFeeRateBps)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalEnabled`:
	err = decoder.Decode(&obj.WithdrawalEnabled)
	if err != nil {
		return err
	}
	// Deserialize `DepositEnabled`:
	err = decoder.Decode(&obj.DepositEnabled)
	if err != nil {
		return err
	}
	// Deserialize `Padding4`:
	err = decoder.Decode(&obj.Padding4)
	if err != nil {
		return err
	}
	// Deserialize `Sol`:
	err = decoder.Decode(&obj.Sol)
	if err != nil {
		return err
	}
	// Deserialize `Padding6`:
	err = decoder.Decode(&obj.Padding6)
	if err != nil {
		return err
	}
	// Deserialize `NumSupportedTokens`:
	err = decoder.Decode(&obj.NumSupportedTokens)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokens`:
	err = decoder.Decode(&obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedToken`:
	err = decoder.Decode(&obj.NormalizedToken)
	if err != nil {
		return err
	}
	// Deserialize `Padding7`:
	err = decoder.Decode(&obj.Padding7)
	if err != nil {
		return err
	}
	// Deserialize `NumRestakingVaults`:
	err = decoder.Decode(&obj.NumRestakingVaults)
	if err != nil {
		return err
	}
	// Deserialize `RestakingVaults`:
	err = decoder.Decode(&obj.RestakingVaults)
	if err != nil {
		return err
	}
	// Deserialize `Operation`:
	err = decoder.Decode(&obj.Operation)
	if err != nil {
		return err
	}
	return nil
}

type FundManagerUpdatedFund struct {
	ReceiptTokenMint ag_solanago.PublicKey
	FundAccount      ag_solanago.PublicKey
}

func (obj FundManagerUpdatedFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundManagerUpdatedFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

type FundManagerUpdatedRewardPool struct {
	ReceiptTokenMint ag_solanago.PublicKey
	RewardAccount    ag_solanago.PublicKey
}

func (obj FundManagerUpdatedRewardPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `RewardAccount` param:
	err = encoder.Encode(obj.RewardAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundManagerUpdatedRewardPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `RewardAccount`:
	err = decoder.Decode(&obj.RewardAccount)
	if err != nil {
		return err
	}
	return nil
}

type FundWithdrawalBatchAccount struct {
	DataVersion               uint16
	Bump                      uint8
	ReceiptTokenMint          ag_solanago.PublicKey
	SupportedTokenMint        *ag_solanago.PublicKey `bin:"optional"`
	SupportedTokenProgram     *ag_solanago.PublicKey `bin:"optional"`
	BatchId                   uint64
	NumRequests               uint64
	NumClaimedRequests        uint64
	ReceiptTokenAmount        uint64
	ClaimedReceiptTokenAmount uint64

	// asset to be withdrawn
	AssetUserAmount        uint64
	ClaimedAssetUserAmount uint64

	// informative: withdrawal fee is already paid to the treasury account, just informative.
	AssetFeeAmount uint64
	ProcessedAt    int64
	Reserved       [32]uint8
}

func (obj FundWithdrawalBatchAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `SupportedTokenProgram` param (optional):
	{
		if obj.SupportedTokenProgram == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenProgram)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `NumRequests` param:
	err = encoder.Encode(obj.NumRequests)
	if err != nil {
		return err
	}
	// Serialize `NumClaimedRequests` param:
	err = encoder.Encode(obj.NumClaimedRequests)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `ClaimedReceiptTokenAmount` param:
	err = encoder.Encode(obj.ClaimedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `AssetUserAmount` param:
	err = encoder.Encode(obj.AssetUserAmount)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAssetUserAmount` param:
	err = encoder.Encode(obj.ClaimedAssetUserAmount)
	if err != nil {
		return err
	}
	// Serialize `AssetFeeAmount` param:
	err = encoder.Encode(obj.AssetFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `ProcessedAt` param:
	err = encoder.Encode(obj.ProcessedAt)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FundWithdrawalBatchAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `SupportedTokenProgram` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenProgram)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `NumRequests`:
	err = decoder.Decode(&obj.NumRequests)
	if err != nil {
		return err
	}
	// Deserialize `NumClaimedRequests`:
	err = decoder.Decode(&obj.NumClaimedRequests)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedReceiptTokenAmount`:
	err = decoder.Decode(&obj.ClaimedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `AssetUserAmount`:
	err = decoder.Decode(&obj.AssetUserAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAssetUserAmount`:
	err = decoder.Decode(&obj.ClaimedAssetUserAmount)
	if err != nil {
		return err
	}
	// Deserialize `AssetFeeAmount`:
	err = decoder.Decode(&obj.AssetFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `ProcessedAt`:
	err = decoder.Decode(&obj.ProcessedAt)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type HarvestRewardCommand struct{}

func (obj HarvestRewardCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *HarvestRewardCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type HarvestRewardCommandResult struct{}

func (obj HarvestRewardCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *HarvestRewardCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type InitializeCommand struct {
	State InitializeCommandState
}

func (obj InitializeCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	{
		tmp := initializeCommandStateContainer{}
		switch realvalue := obj.State.(type) {
		case *InitializeCommandStateNewTuple:
			tmp.Enum = 0
			tmp.New = *realvalue
		case *InitializeCommandStatePrepareSingleRestakingVaultUpdateTuple:
			tmp.Enum = 1
			tmp.PrepareSingleRestakingVaultUpdate = *realvalue
		case *InitializeCommandStatePrepareRestakingVaultUpdateTuple:
			tmp.Enum = 2
			tmp.PrepareRestakingVaultUpdate = *realvalue
		case *InitializeCommandStateExecuteRestakingVaultUpdateTuple:
			tmp.Enum = 3
			tmp.ExecuteRestakingVaultUpdate = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *InitializeCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	{
		tmp := new(initializeCommandStateContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.State = (*InitializeCommandStateNewTuple)(&tmp.Enum)
		case 1:
			obj.State = &tmp.PrepareSingleRestakingVaultUpdate
		case 2:
			obj.State = &tmp.PrepareRestakingVaultUpdate
		case 3:
			obj.State = &tmp.ExecuteRestakingVaultUpdate
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

type InitializeCommandRestakingVaultUpdateItem struct {
	Vault                    ag_solanago.PublicKey
	DelegationsUpdatedBitmap []bool
}

func (obj InitializeCommandRestakingVaultUpdateItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `DelegationsUpdatedBitmap` param:
	err = encoder.Encode(obj.DelegationsUpdatedBitmap)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommandRestakingVaultUpdateItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `DelegationsUpdatedBitmap`:
	err = decoder.Decode(&obj.DelegationsUpdatedBitmap)
	if err != nil {
		return err
	}
	return nil
}

type InitializeCommandResult struct {
	RestakingVaultUpdated *InitializeCommandResultRestakingVaultUpdated `bin:"optional"`
}

func (obj InitializeCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RestakingVaultUpdated` param (optional):
	{
		if obj.RestakingVaultUpdated == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RestakingVaultUpdated)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *InitializeCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RestakingVaultUpdated` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RestakingVaultUpdated)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type InitializeCommandResultRestakingVaultDelegationUpdate struct {
	Operator           ag_solanago.PublicKey
	DelegatedAmount    uint64
	UndelegatingAmount uint64
}

func (obj InitializeCommandResultRestakingVaultDelegationUpdate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `DelegatedAmount` param:
	err = encoder.Encode(obj.DelegatedAmount)
	if err != nil {
		return err
	}
	// Serialize `UndelegatingAmount` param:
	err = encoder.Encode(obj.UndelegatingAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommandResultRestakingVaultDelegationUpdate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `DelegatedAmount`:
	err = decoder.Decode(&obj.DelegatedAmount)
	if err != nil {
		return err
	}
	// Deserialize `UndelegatingAmount`:
	err = decoder.Decode(&obj.UndelegatingAmount)
	if err != nil {
		return err
	}
	return nil
}

type InitializeCommandResultRestakingVaultUpdated struct {
	Vault              ag_solanago.PublicKey
	Epoch              uint64
	Finalized          bool
	SupportedTokenMint ag_solanago.PublicKey
	Delegations        []InitializeCommandResultRestakingVaultDelegationUpdate
}

func (obj InitializeCommandResultRestakingVaultUpdated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Epoch` param:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return err
	}
	// Serialize `Finalized` param:
	err = encoder.Encode(obj.Finalized)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `Delegations` param:
	err = encoder.Encode(obj.Delegations)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommandResultRestakingVaultUpdated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return err
	}
	// Deserialize `Finalized`:
	err = decoder.Decode(&obj.Finalized)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `Delegations`:
	err = decoder.Decode(&obj.Delegations)
	if err != nil {
		return err
	}
	return nil
}

type InitializeCommandState interface {
	isInitializeCommandState()
}

type initializeCommandStateContainer struct {
	Enum                              ag_binary.BorshEnum `borsh_enum:"true"`
	New                               InitializeCommandStateNewTuple
	PrepareSingleRestakingVaultUpdate InitializeCommandStatePrepareSingleRestakingVaultUpdateTuple
	PrepareRestakingVaultUpdate       InitializeCommandStatePrepareRestakingVaultUpdateTuple
	ExecuteRestakingVaultUpdate       InitializeCommandStateExecuteRestakingVaultUpdateTuple
}

type InitializeCommandStateNewTuple uint8

func (obj InitializeCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *InitializeCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ InitializeCommandStateNewTuple) isInitializeCommandState() {}

type InitializeCommandStatePrepareSingleRestakingVaultUpdateTuple struct {
	Vault    ag_solanago.PublicKey
	Operator ag_solanago.PublicKey
}

func (obj InitializeCommandStatePrepareSingleRestakingVaultUpdateTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommandStatePrepareSingleRestakingVaultUpdateTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (_ InitializeCommandStatePrepareSingleRestakingVaultUpdateTuple) isInitializeCommandState() {}

type InitializeCommandStatePrepareRestakingVaultUpdateTuple struct {
	Items []InitializeCommandRestakingVaultUpdateItem
}

func (obj InitializeCommandStatePrepareRestakingVaultUpdateTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommandStatePrepareRestakingVaultUpdateTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ InitializeCommandStatePrepareRestakingVaultUpdateTuple) isInitializeCommandState() {}

type InitializeCommandStateExecuteRestakingVaultUpdateTuple struct {
	Items []InitializeCommandRestakingVaultUpdateItem
}

func (obj InitializeCommandStateExecuteRestakingVaultUpdateTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InitializeCommandStateExecuteRestakingVaultUpdateTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ InitializeCommandStateExecuteRestakingVaultUpdateTuple) isInitializeCommandState() {}

type NormalizeSTCommand struct {
	State NormalizeSTCommandState
}

func (obj NormalizeSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	{
		tmp := normalizeSTCommandStateContainer{}
		switch realvalue := obj.State.(type) {
		case *NormalizeSTCommandStateNewTuple:
			tmp.Enum = 0
			tmp.New = *realvalue
		case *NormalizeSTCommandStatePrepareTuple:
			tmp.Enum = 1
			tmp.Prepare = *realvalue
		case *NormalizeSTCommandStateExecuteTuple:
			tmp.Enum = 2
			tmp.Execute = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *NormalizeSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	{
		tmp := new(normalizeSTCommandStateContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.State = (*NormalizeSTCommandStateNewTuple)(&tmp.Enum)
		case 1:
			obj.State = &tmp.Prepare
		case 2:
			obj.State = &tmp.Execute
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

type NormalizeSTCommandItem struct {
	SupportedTokenMint   ag_solanago.PublicKey
	AllocatedTokenAmount uint64
}

func (obj NormalizeSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `AllocatedTokenAmount` param:
	err = encoder.Encode(obj.AllocatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizeSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedTokenAmount`:
	err = decoder.Decode(&obj.AllocatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type NormalizeSTCommandResult struct {
	SupportedTokenMint             ag_solanago.PublicKey
	NormalizedSupportedTokenAmount uint64
	MintedTokenAmount              uint64
	OperationReservedTokenAmount   uint64
}

func (obj NormalizeSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `NormalizedSupportedTokenAmount` param:
	err = encoder.Encode(obj.NormalizedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `MintedTokenAmount` param:
	err = encoder.Encode(obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedTokenAmount` param:
	err = encoder.Encode(obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizeSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedSupportedTokenAmount`:
	err = decoder.Decode(&obj.NormalizedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintedTokenAmount`:
	err = decoder.Decode(&obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedTokenAmount`:
	err = decoder.Decode(&obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type NormalizeSTCommandState interface {
	isNormalizeSTCommandState()
}

type normalizeSTCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     NormalizeSTCommandStateNewTuple
	Prepare NormalizeSTCommandStatePrepareTuple
	Execute NormalizeSTCommandStateExecuteTuple
}

type NormalizeSTCommandStateNewTuple uint8

func (obj NormalizeSTCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *NormalizeSTCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ NormalizeSTCommandStateNewTuple) isNormalizeSTCommandState() {}

type NormalizeSTCommandStatePrepareTuple struct {
	Items []NormalizeSTCommandItem
}

func (obj NormalizeSTCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizeSTCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ NormalizeSTCommandStatePrepareTuple) isNormalizeSTCommandState() {}

type NormalizeSTCommandStateExecuteTuple struct {
	Items []NormalizeSTCommandItem
}

func (obj NormalizeSTCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizeSTCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ NormalizeSTCommandStateExecuteTuple) isNormalizeSTCommandState() {}

type NormalizedClaimableToken struct {
	Mint            ag_solanago.PublicKey
	Program         ag_solanago.PublicKey
	ClaimableAmount uint64
	Claimed         bool
}

func (obj NormalizedClaimableToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `ClaimableAmount` param:
	err = encoder.Encode(obj.ClaimableAmount)
	if err != nil {
		return err
	}
	// Serialize `Claimed` param:
	err = encoder.Encode(obj.Claimed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizedClaimableToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `ClaimableAmount`:
	err = decoder.Decode(&obj.ClaimableAmount)
	if err != nil {
		return err
	}
	// Deserialize `Claimed`:
	err = decoder.Decode(&obj.Claimed)
	if err != nil {
		return err
	}
	return nil
}

type NormalizedSupportedToken struct {
	Mint                     ag_solanago.PublicKey
	Program                  ag_solanago.PublicKey
	ReserveAccount           ag_solanago.PublicKey
	LockedAmount             uint64
	Decimals                 uint8
	WithdrawalReservedAmount uint64
	OneTokenAsSol            uint64
	PricingSource            TokenPricingSource
	Reserved                 [14]uint8
}

func (obj NormalizedSupportedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `ReserveAccount` param:
	err = encoder.Encode(obj.ReserveAccount)
	if err != nil {
		return err
	}
	// Serialize `LockedAmount` param:
	err = encoder.Encode(obj.LockedAmount)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalReservedAmount` param:
	err = encoder.Encode(obj.WithdrawalReservedAmount)
	if err != nil {
		return err
	}
	// Serialize `OneTokenAsSol` param:
	err = encoder.Encode(obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `PricingSource` param:
	{
		tmp := tokenPricingSourceContainer{}
		switch realvalue := obj.PricingSource.(type) {
		case *TokenPricingSourceSPLStakePoolTuple:
			tmp.Enum = 0
			tmp.SPLStakePool = *realvalue
		case *TokenPricingSourceMarinadeStakePoolTuple:
			tmp.Enum = 1
			tmp.MarinadeStakePool = *realvalue
		case *TokenPricingSourceJitoRestakingVaultTuple:
			tmp.Enum = 2
			tmp.JitoRestakingVault = *realvalue
		case *TokenPricingSourceFragmetricNormalizedTokenPoolTuple:
			tmp.Enum = 3
			tmp.FragmetricNormalizedTokenPool = *realvalue
		case *TokenPricingSourceFragmetricRestakingFundTuple:
			tmp.Enum = 4
			tmp.FragmetricRestakingFund = *realvalue
		case *TokenPricingSourceOrcaDEXLiquidityPoolTuple:
			tmp.Enum = 5
			tmp.OrcaDEXLiquidityPool = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizedSupportedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `ReserveAccount`:
	err = decoder.Decode(&obj.ReserveAccount)
	if err != nil {
		return err
	}
	// Deserialize `LockedAmount`:
	err = decoder.Decode(&obj.LockedAmount)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalReservedAmount`:
	err = decoder.Decode(&obj.WithdrawalReservedAmount)
	if err != nil {
		return err
	}
	// Deserialize `OneTokenAsSol`:
	err = decoder.Decode(&obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `PricingSource`:
	{
		tmp := new(tokenPricingSourceContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.PricingSource = &tmp.SPLStakePool
		case 1:
			obj.PricingSource = &tmp.MarinadeStakePool
		case 2:
			obj.PricingSource = &tmp.JitoRestakingVault
		case 3:
			obj.PricingSource = &tmp.FragmetricNormalizedTokenPool
		case 4:
			obj.PricingSource = &tmp.FragmetricRestakingFund
		case 5:
			obj.PricingSource = &tmp.OrcaDEXLiquidityPool
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type NormalizedToken struct {
	Mint                    ag_solanago.PublicKey
	Program                 ag_solanago.PublicKey
	Decimals                uint8
	Enabled                 uint8
	Padding                 [6]uint8
	PricingSource           TokenPricingSourcePod
	OneTokenAsSol           uint64
	OperationReservedAmount uint64
	Reserved                [64]uint8
}

func (obj NormalizedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `PricingSource` param:
	err = encoder.Encode(obj.PricingSource)
	if err != nil {
		return err
	}
	// Serialize `OneTokenAsSol` param:
	err = encoder.Encode(obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedAmount` param:
	err = encoder.Encode(obj.OperationReservedAmount)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `PricingSource`:
	err = decoder.Decode(&obj.PricingSource)
	if err != nil {
		return err
	}
	// Deserialize `OneTokenAsSol`:
	err = decoder.Decode(&obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedAmount`:
	err = decoder.Decode(&obj.OperationReservedAmount)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type NormalizedTokenPoolAccount struct {
	DataVersion                     uint16
	Bump                            uint8
	NormalizedTokenMint             ag_solanago.PublicKey
	NormalizedTokenProgram          ag_solanago.PublicKey
	SupportedTokens                 []NormalizedSupportedToken
	NormalizedTokenDecimals         uint8
	NormalizedTokenSupplyAmount     uint64
	NormalizedTokenValue            TokenValue
	NormalizedTokenValueUpdatedSlot uint64
	OneNormalizedTokenAsSol         uint64
	Reserved                        [128]uint8
}

func (obj NormalizedTokenPoolAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenMint` param:
	err = encoder.Encode(obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenProgram` param:
	err = encoder.Encode(obj.NormalizedTokenProgram)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokens` param:
	err = encoder.Encode(obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenDecimals` param:
	err = encoder.Encode(obj.NormalizedTokenDecimals)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenSupplyAmount` param:
	err = encoder.Encode(obj.NormalizedTokenSupplyAmount)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenValue` param:
	err = encoder.Encode(obj.NormalizedTokenValue)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenValueUpdatedSlot` param:
	err = encoder.Encode(obj.NormalizedTokenValueUpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `OneNormalizedTokenAsSol` param:
	err = encoder.Encode(obj.OneNormalizedTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizedTokenPoolAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenMint`:
	err = decoder.Decode(&obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenProgram`:
	err = decoder.Decode(&obj.NormalizedTokenProgram)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokens`:
	err = decoder.Decode(&obj.SupportedTokens)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenDecimals`:
	err = decoder.Decode(&obj.NormalizedTokenDecimals)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenSupplyAmount`:
	err = decoder.Decode(&obj.NormalizedTokenSupplyAmount)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenValue`:
	err = decoder.Decode(&obj.NormalizedTokenValue)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenValueUpdatedSlot`:
	err = decoder.Decode(&obj.NormalizedTokenValueUpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `OneNormalizedTokenAsSol`:
	err = decoder.Decode(&obj.OneNormalizedTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type NormalizedTokenWithdrawalAccount struct {
	DataVersion           uint16
	Bump                  uint8
	WithdrawalAuthority   ag_solanago.PublicKey
	NormalizedTokenMint   ag_solanago.PublicKey
	NormalizedTokenPool   ag_solanago.PublicKey
	NormalizedTokenAmount uint64
	ClaimableTokens       []NormalizedClaimableToken
	CreatedAt             int64
	Reserved              [32]uint8
}

func (obj NormalizedTokenWithdrawalAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalAuthority` param:
	err = encoder.Encode(obj.WithdrawalAuthority)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenMint` param:
	err = encoder.Encode(obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenPool` param:
	err = encoder.Encode(obj.NormalizedTokenPool)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenAmount` param:
	err = encoder.Encode(obj.NormalizedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `ClaimableTokens` param:
	err = encoder.Encode(obj.ClaimableTokens)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NormalizedTokenWithdrawalAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalAuthority`:
	err = decoder.Decode(&obj.WithdrawalAuthority)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenMint`:
	err = decoder.Decode(&obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenPool`:
	err = decoder.Decode(&obj.NormalizedTokenPool)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenAmount`:
	err = decoder.Decode(&obj.NormalizedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimableTokens`:
	err = decoder.Decode(&obj.ClaimableTokens)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type OperationCommand interface {
	isOperationCommand()
}

type operationCommandContainer struct {
	Enum                   ag_binary.BorshEnum `borsh_enum:"true"`
	Initialize             OperationCommandInitializeTuple
	EnqueueWithdrawalBatch OperationCommandEnqueueWithdrawalBatchTuple
	ClaimUnrestakedVST     OperationCommandClaimUnrestakedVSTTuple
	DenormalizeNT          OperationCommandDenormalizeNTTuple
	UndelegateVST          OperationCommandUndelegateVSTTuple
	UnrestakeVRT           OperationCommandUnrestakeVRTTuple
	ClaimUnstakedSOL       OperationCommandClaimUnstakedSOLTuple
	UnstakeLST             OperationCommandUnstakeLSTTuple
	ProcessWithdrawalBatch OperationCommandProcessWithdrawalBatchTuple
	StakeSOL               OperationCommandStakeSOLTuple
	NormalizeST            OperationCommandNormalizeSTTuple
	RestakeVST             OperationCommandRestakeVSTTuple
	DelegateVST            OperationCommandDelegateVSTTuple
	HarvestReward          OperationCommandHarvestRewardTuple
}

type OperationCommandInitializeTuple struct {
	Elem0 InitializeCommand
}

func (_ OperationCommandInitializeTuple) isOperationCommand() {}

type OperationCommandEnqueueWithdrawalBatchTuple struct {
	Elem0 EnqueueWithdrawalBatchCommand
}

func (_ OperationCommandEnqueueWithdrawalBatchTuple) isOperationCommand() {}

type OperationCommandClaimUnrestakedVSTTuple struct {
	Elem0 ClaimUnrestakedVSTCommand
}

func (_ OperationCommandClaimUnrestakedVSTTuple) isOperationCommand() {}

type OperationCommandDenormalizeNTTuple struct {
	Elem0 DenormalizeNTCommand
}

func (_ OperationCommandDenormalizeNTTuple) isOperationCommand() {}

type OperationCommandUndelegateVSTTuple struct {
	Elem0 UndelegateVSTCommand
}

func (_ OperationCommandUndelegateVSTTuple) isOperationCommand() {}

type OperationCommandUnrestakeVRTTuple struct {
	Elem0 UnrestakeVRTCommand
}

func (_ OperationCommandUnrestakeVRTTuple) isOperationCommand() {}

type OperationCommandClaimUnstakedSOLTuple struct {
	Elem0 ClaimUnstakedSOLCommand
}

func (_ OperationCommandClaimUnstakedSOLTuple) isOperationCommand() {}

type OperationCommandUnstakeLSTTuple struct {
	Elem0 UnstakeLSTCommand
}

func (_ OperationCommandUnstakeLSTTuple) isOperationCommand() {}

type OperationCommandProcessWithdrawalBatchTuple struct {
	Elem0 ProcessWithdrawalBatchCommand
}

func (_ OperationCommandProcessWithdrawalBatchTuple) isOperationCommand() {}

type OperationCommandStakeSOLTuple struct {
	Elem0 StakeSOLCommand
}

func (_ OperationCommandStakeSOLTuple) isOperationCommand() {}

type OperationCommandNormalizeSTTuple struct {
	Elem0 NormalizeSTCommand
}

func (_ OperationCommandNormalizeSTTuple) isOperationCommand() {}

type OperationCommandRestakeVSTTuple struct {
	Elem0 RestakeVSTCommand
}

func (_ OperationCommandRestakeVSTTuple) isOperationCommand() {}

type OperationCommandDelegateVSTTuple struct {
	Elem0 DelegateVSTCommand
}

func (_ OperationCommandDelegateVSTTuple) isOperationCommand() {}

type OperationCommandHarvestRewardTuple struct {
	Elem0 HarvestRewardCommand
}

func (_ OperationCommandHarvestRewardTuple) isOperationCommand() {}

type OperationCommandAccountMeta struct {
	Pubkey     ag_solanago.PublicKey
	IsWritable bool
}

func (obj OperationCommandAccountMeta) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandAccountMeta) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

type OperationCommandAccountMetaPod struct {
	Pubkey     ag_solanago.PublicKey
	IsWritable uint8
	Padding    [7]uint8
}

func (obj OperationCommandAccountMetaPod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandAccountMetaPod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type OperationCommandEntry struct {
	Command          OperationCommand
	RequiredAccounts []OperationCommandAccountMeta
}
//
//func (obj OperationCommandEntry) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
//	// Serialize `Command` param:
//	{
//		tmp := operationCommandContainer{}
//		switch realvalue := obj.Command.(type) {
//		case *OperationCommandInitializeTuple:
//			tmp.Enum = 0
//			tmp.Initialize = *realvalue
//		case *OperationCommandEnqueueWithdrawalBatchTuple:
//			tmp.Enum = 1
//			tmp.EnqueueWithdrawalBatch = *realvalue
//		case *OperationCommandClaimUnrestakedVSTTuple:
//			tmp.Enum = 2
//			tmp.ClaimUnrestakedVST = *realvalue
//		case *OperationCommandDenormalizeNTTuple:
//			tmp.Enum = 3
//			tmp.DenormalizeNT = *realvalue
//		case *OperationCommandUndelegateVSTTuple:
//			tmp.Enum = 4
//			tmp.UndelegateVST = *realvalue
//		case *OperationCommandUnrestakeVRTTuple:
//			tmp.Enum = 5
//			tmp.UnrestakeVRT = *realvalue
//		case *OperationCommandClaimUnstakedSOLTuple:
//			tmp.Enum = 6
//			tmp.ClaimUnstakedSOL = *realvalue
//		case *OperationCommandUnstakeLSTTuple:
//			tmp.Enum = 7
//			tmp.UnstakeLST = *realvalue
//		case *OperationCommandProcessWithdrawalBatchTuple:
//			tmp.Enum = 8
//			tmp.ProcessWithdrawalBatch = *realvalue
//		case *OperationCommandStakeSOLTuple:
//			tmp.Enum = 9
//			tmp.StakeSOL = *realvalue
//		case *OperationCommandNormalizeSTTuple:
//			tmp.Enum = 10
//			tmp.NormalizeST = *realvalue
//		case *OperationCommandRestakeVSTTuple:
//			tmp.Enum = 11
//			tmp.RestakeVST = *realvalue
//		case *OperationCommandDelegateVSTTuple:
//			tmp.Enum = 12
//			tmp.DelegateVST = *realvalue
//		case *OperationCommandHarvestRewardTuple:
//			tmp.Enum = 13
//			tmp.HarvestReward = *realvalue
//		}
//		err := encoder.Encode(tmp)
//		if err != nil {
//			return err
//		}
//	}
//	// Serialize `RequiredAccounts` param:
//	err = encoder.Encode(obj.RequiredAccounts)
//	if err != nil {
//		return err
//	}
//	return nil
//}
//
//func (obj *OperationCommandEntry) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
//	// Deserialize `Command`:
//	{
//		tmp := new(operationCommandContainer)
//		err := decoder.Decode(tmp)
//		if err != nil {
//			return err
//		}
//		switch tmp.Enum {
//		case 0:
//			obj.Command = &tmp.Initialize
//		case 1:
//			obj.Command = &tmp.EnqueueWithdrawalBatch
//		case 2:
//			obj.Command = &tmp.ClaimUnrestakedVST
//		case 3:
//			obj.Command = &tmp.DenormalizeNT
//		case 4:
//			obj.Command = &tmp.UndelegateVST
//		case 5:
//			obj.Command = &tmp.UnrestakeVRT
//		case 6:
//			obj.Command = &tmp.ClaimUnstakedSOL
//		case 7:
//			obj.Command = &tmp.UnstakeLST
//		case 8:
//			obj.Command = &tmp.ProcessWithdrawalBatch
//		case 9:
//			obj.Command = &tmp.StakeSOL
//		case 10:
//			obj.Command = &tmp.NormalizeST
//		case 11:
//			obj.Command = &tmp.RestakeVST
//		case 12:
//			obj.Command = &tmp.DelegateVST
//		case 13:
//			obj.Command = &tmp.HarvestReward
//		default:
//			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
//		}
//	}
//	// Deserialize `RequiredAccounts`:
//	err = decoder.Decode(&obj.RequiredAccounts)
//	if err != nil {
//		return err
//	}
//	return nil
//}

type OperationCommandEntryPod struct {
	NumRequiredAccounts uint8
	Padding             [7]uint8
	RequiredAccounts    [32]OperationCommandAccountMetaPod
	Command             OperationCommandPod
}

func (obj OperationCommandEntryPod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NumRequiredAccounts` param:
	err = encoder.Encode(obj.NumRequiredAccounts)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `RequiredAccounts` param:
	err = encoder.Encode(obj.RequiredAccounts)
	if err != nil {
		return err
	}
	// Serialize `Command` param:
	err = encoder.Encode(obj.Command)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandEntryPod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NumRequiredAccounts`:
	err = decoder.Decode(&obj.NumRequiredAccounts)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `RequiredAccounts`:
	err = decoder.Decode(&obj.RequiredAccounts)
	if err != nil {
		return err
	}
	// Deserialize `Command`:
	err = decoder.Decode(&obj.Command)
	if err != nil {
		return err
	}
	return nil
}

type OperationCommandPod struct {
	Discriminant uint8
	Buffer       [2535]uint8
}

func (obj OperationCommandPod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Discriminant` param:
	err = encoder.Encode(obj.Discriminant)
	if err != nil {
		return err
	}
	// Serialize `Buffer` param:
	err = encoder.Encode(obj.Buffer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationCommandPod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Discriminant`:
	err = decoder.Decode(&obj.Discriminant)
	if err != nil {
		return err
	}
	// Deserialize `Buffer`:
	err = decoder.Decode(&obj.Buffer)
	if err != nil {
		return err
	}
	return nil
}

type OperationCommandResult interface {
	isOperationCommandResult()
}

type operationCommandResultContainer struct {
	Enum                   ag_binary.BorshEnum `borsh_enum:"true"`
	Initialize             OperationCommandResultInitializeTuple
	EnqueueWithdrawalBatch OperationCommandResultEnqueueWithdrawalBatchTuple
	ClaimUnrestakedVST     OperationCommandResultClaimUnrestakedVSTTuple
	DenormalizeNT          OperationCommandResultDenormalizeNTTuple
	UndelegateVST          OperationCommandResultUndelegateVSTTuple
	UnrestakeVRT           OperationCommandResultUnrestakeVRTTuple
	ClaimUnstakedSOL       OperationCommandResultClaimUnstakedSOLTuple
	UnstakeLST             OperationCommandResultUnstakeLSTTuple
	ProcessWithdrawalBatch OperationCommandResultProcessWithdrawalBatchTuple
	StakeSOL               OperationCommandResultStakeSOLTuple
	NormalizeST            OperationCommandResultNormalizeSTTuple
	RestakeVST             OperationCommandResultRestakeVSTTuple
	DelegateVST            OperationCommandResultDelegateVSTTuple
	HarvestReward          OperationCommandResultHarvestRewardTuple
}

type OperationCommandResultInitializeTuple struct {
	Elem0 InitializeCommandResult
}

func (_ OperationCommandResultInitializeTuple) isOperationCommandResult() {}

type OperationCommandResultEnqueueWithdrawalBatchTuple struct {
	Elem0 EnqueueWithdrawalBatchCommandResult
}

func (_ OperationCommandResultEnqueueWithdrawalBatchTuple) isOperationCommandResult() {}

type OperationCommandResultClaimUnrestakedVSTTuple struct {
	Elem0 ClaimUnrestakedVSTCommandResult
}

func (_ OperationCommandResultClaimUnrestakedVSTTuple) isOperationCommandResult() {}

type OperationCommandResultDenormalizeNTTuple struct {
	Elem0 DenormalizeNTCommandResult
}

func (_ OperationCommandResultDenormalizeNTTuple) isOperationCommandResult() {}

type OperationCommandResultUndelegateVSTTuple struct {
	Elem0 UndelegateVSTCommandResult
}

func (_ OperationCommandResultUndelegateVSTTuple) isOperationCommandResult() {}

type OperationCommandResultUnrestakeVRTTuple struct {
	Elem0 UnrestakeVRTCommandResult
}

func (_ OperationCommandResultUnrestakeVRTTuple) isOperationCommandResult() {}

type OperationCommandResultClaimUnstakedSOLTuple struct {
	Elem0 ClaimUnstakedSOLCommandResult
}

func (_ OperationCommandResultClaimUnstakedSOLTuple) isOperationCommandResult() {}

type OperationCommandResultUnstakeLSTTuple struct {
	Elem0 UnstakeLSTCommandResult
}

func (_ OperationCommandResultUnstakeLSTTuple) isOperationCommandResult() {}

type OperationCommandResultProcessWithdrawalBatchTuple struct {
	Elem0 ProcessWithdrawalBatchCommandResult
}

func (_ OperationCommandResultProcessWithdrawalBatchTuple) isOperationCommandResult() {}

type OperationCommandResultStakeSOLTuple struct {
	Elem0 StakeSOLCommandResult
}

func (_ OperationCommandResultStakeSOLTuple) isOperationCommandResult() {}

type OperationCommandResultNormalizeSTTuple struct {
	Elem0 NormalizeSTCommandResult
}

func (_ OperationCommandResultNormalizeSTTuple) isOperationCommandResult() {}

type OperationCommandResultRestakeVSTTuple struct {
	Elem0 RestakeVSTCommandResult
}

func (_ OperationCommandResultRestakeVSTTuple) isOperationCommandResult() {}

type OperationCommandResultDelegateVSTTuple struct {
	Elem0 DelegateVSTCommandResult
}

func (_ OperationCommandResultDelegateVSTTuple) isOperationCommandResult() {}

type OperationCommandResultHarvestRewardTuple struct {
	Elem0 HarvestRewardCommandResult
}

func (_ OperationCommandResultHarvestRewardTuple) isOperationCommandResult() {}

type OperationState struct {
	UpdatedSlot uint64
	UpdatedAt   int64
	ExpiredAt   int64
	Padding     [5]uint8

	// when the no_transition flag turned on, current command should not be transitioned to other command.
	// the purpose of this flag is for internal testing by set boundary of the reset command operation.
	NoTransition uint8
	NextSequence uint16
	NumOperated  uint64
	NextCommand  OperationCommandEntryPod
	Reserved     [128]uint8
}

func (obj OperationState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `UpdatedSlot` param:
	err = encoder.Encode(obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `UpdatedAt` param:
	err = encoder.Encode(obj.UpdatedAt)
	if err != nil {
		return err
	}
	// Serialize `ExpiredAt` param:
	err = encoder.Encode(obj.ExpiredAt)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `NoTransition` param:
	err = encoder.Encode(obj.NoTransition)
	if err != nil {
		return err
	}
	// Serialize `NextSequence` param:
	err = encoder.Encode(obj.NextSequence)
	if err != nil {
		return err
	}
	// Serialize `NumOperated` param:
	err = encoder.Encode(obj.NumOperated)
	if err != nil {
		return err
	}
	// Serialize `NextCommand` param:
	err = encoder.Encode(obj.NextCommand)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `UpdatedSlot`:
	err = decoder.Decode(&obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedAt`:
	err = decoder.Decode(&obj.UpdatedAt)
	if err != nil {
		return err
	}
	// Deserialize `ExpiredAt`:
	err = decoder.Decode(&obj.ExpiredAt)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `NoTransition`:
	err = decoder.Decode(&obj.NoTransition)
	if err != nil {
		return err
	}
	// Deserialize `NextSequence`:
	err = decoder.Decode(&obj.NextSequence)
	if err != nil {
		return err
	}
	// Deserialize `NumOperated`:
	err = decoder.Decode(&obj.NumOperated)
	if err != nil {
		return err
	}
	// Deserialize `NextCommand`:
	err = decoder.Decode(&obj.NextCommand)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type OperatorDonatedToFund struct {
	ReceiptTokenMint          ag_solanago.PublicKey
	FundAccount               ag_solanago.PublicKey
	SupportedTokenMint        *ag_solanago.PublicKey `bin:"optional"`
	DonatedAmount             uint64
	DepositedAmount           uint64
	OffsettedReceivableAmount uint64
}

func (obj OperatorDonatedToFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DonatedAmount` param:
	err = encoder.Encode(obj.DonatedAmount)
	if err != nil {
		return err
	}
	// Serialize `DepositedAmount` param:
	err = encoder.Encode(obj.DepositedAmount)
	if err != nil {
		return err
	}
	// Serialize `OffsettedReceivableAmount` param:
	err = encoder.Encode(obj.OffsettedReceivableAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperatorDonatedToFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DonatedAmount`:
	err = decoder.Decode(&obj.DonatedAmount)
	if err != nil {
		return err
	}
	// Deserialize `DepositedAmount`:
	err = decoder.Decode(&obj.DepositedAmount)
	if err != nil {
		return err
	}
	// Deserialize `OffsettedReceivableAmount`:
	err = decoder.Decode(&obj.OffsettedReceivableAmount)
	if err != nil {
		return err
	}
	return nil
}

type OperatorRanFundCommand struct {
	ReceiptTokenMint ag_solanago.PublicKey
	FundAccount      ag_solanago.PublicKey
	NextSequence     uint16
	NumOperated      uint64
	Command          OperationCommand
	Result           *OperationCommandResult `bin:"optional"`
}

func (obj OperatorRanFundCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `NextSequence` param:
	err = encoder.Encode(obj.NextSequence)
	if err != nil {
		return err
	}
	// Serialize `NumOperated` param:
	err = encoder.Encode(obj.NumOperated)
	if err != nil {
		return err
	}
	// Serialize `Command` param:
	{
		tmp := operationCommandContainer{}
		switch realvalue := obj.Command.(type) {
		case *OperationCommandInitializeTuple:
			tmp.Enum = 0
			tmp.Initialize = *realvalue
		case *OperationCommandEnqueueWithdrawalBatchTuple:
			tmp.Enum = 1
			tmp.EnqueueWithdrawalBatch = *realvalue
		case *OperationCommandClaimUnrestakedVSTTuple:
			tmp.Enum = 2
			tmp.ClaimUnrestakedVST = *realvalue
		case *OperationCommandDenormalizeNTTuple:
			tmp.Enum = 3
			tmp.DenormalizeNT = *realvalue
		case *OperationCommandUndelegateVSTTuple:
			tmp.Enum = 4
			tmp.UndelegateVST = *realvalue
		case *OperationCommandUnrestakeVRTTuple:
			tmp.Enum = 5
			tmp.UnrestakeVRT = *realvalue
		case *OperationCommandClaimUnstakedSOLTuple:
			tmp.Enum = 6
			tmp.ClaimUnstakedSOL = *realvalue
		case *OperationCommandUnstakeLSTTuple:
			tmp.Enum = 7
			tmp.UnstakeLST = *realvalue
		case *OperationCommandProcessWithdrawalBatchTuple:
			tmp.Enum = 8
			tmp.ProcessWithdrawalBatch = *realvalue
		case *OperationCommandStakeSOLTuple:
			tmp.Enum = 9
			tmp.StakeSOL = *realvalue
		case *OperationCommandNormalizeSTTuple:
			tmp.Enum = 10
			tmp.NormalizeST = *realvalue
		case *OperationCommandRestakeVSTTuple:
			tmp.Enum = 11
			tmp.RestakeVST = *realvalue
		case *OperationCommandDelegateVSTTuple:
			tmp.Enum = 12
			tmp.DelegateVST = *realvalue
		case *OperationCommandHarvestRewardTuple:
			tmp.Enum = 13
			tmp.HarvestReward = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Result` param (optional):
	{
		if obj.Result == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Result)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *OperatorRanFundCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `NextSequence`:
	err = decoder.Decode(&obj.NextSequence)
	if err != nil {
		return err
	}
	// Deserialize `NumOperated`:
	err = decoder.Decode(&obj.NumOperated)
	if err != nil {
		return err
	}
	// Deserialize `Command`:
	{
		tmp := new(operationCommandContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.Command = &tmp.Initialize
		case 1:
			obj.Command = &tmp.EnqueueWithdrawalBatch
		case 2:
			obj.Command = &tmp.ClaimUnrestakedVST
		case 3:
			obj.Command = &tmp.DenormalizeNT
		case 4:
			obj.Command = &tmp.UndelegateVST
		case 5:
			obj.Command = &tmp.UnrestakeVRT
		case 6:
			obj.Command = &tmp.ClaimUnstakedSOL
		case 7:
			obj.Command = &tmp.UnstakeLST
		case 8:
			obj.Command = &tmp.ProcessWithdrawalBatch
		case 9:
			obj.Command = &tmp.StakeSOL
		case 10:
			obj.Command = &tmp.NormalizeST
		case 11:
			obj.Command = &tmp.RestakeVST
		case 12:
			obj.Command = &tmp.DelegateVST
		case 13:
			obj.Command = &tmp.HarvestReward
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Result` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Result)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type OperatorUpdatedFundPrices struct {
	ReceiptTokenMint ag_solanago.PublicKey
	FundAccount      ag_solanago.PublicKey
}

func (obj OperatorUpdatedFundPrices) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperatorUpdatedFundPrices) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	return nil
}

type OperatorUpdatedNormalizedTokenPoolPrices struct {
	NormalizedTokenMint        ag_solanago.PublicKey
	NormalizedTokenPoolAccount ag_solanago.PublicKey
}

func (obj OperatorUpdatedNormalizedTokenPoolPrices) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NormalizedTokenMint` param:
	err = encoder.Encode(obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `NormalizedTokenPoolAccount` param:
	err = encoder.Encode(obj.NormalizedTokenPoolAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperatorUpdatedNormalizedTokenPoolPrices) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NormalizedTokenMint`:
	err = decoder.Decode(&obj.NormalizedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `NormalizedTokenPoolAccount`:
	err = decoder.Decode(&obj.NormalizedTokenPoolAccount)
	if err != nil {
		return err
	}
	return nil
}

type OperatorUpdatedRewardPools struct {
	ReceiptTokenMint ag_solanago.PublicKey
	RewardAccount    ag_solanago.PublicKey
}

func (obj OperatorUpdatedRewardPools) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `RewardAccount` param:
	err = encoder.Encode(obj.RewardAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperatorUpdatedRewardPools) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `RewardAccount`:
	err = decoder.Decode(&obj.RewardAccount)
	if err != nil {
		return err
	}
	return nil
}

type ProcessWithdrawalBatchCommand struct {
	State  ProcessWithdrawalBatchCommandState
	Forced bool
}

func (obj ProcessWithdrawalBatchCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	{
		tmp := processWithdrawalBatchCommandStateContainer{}
		switch realvalue := obj.State.(type) {
		case *ProcessWithdrawalBatchCommandStateNewTuple:
			tmp.Enum = 0
			tmp.New = *realvalue
		case *ProcessWithdrawalBatchCommandStatePrepareTuple:
			tmp.Enum = 1
			tmp.Prepare = *realvalue
		case *ProcessWithdrawalBatchCommandStateExecuteTuple:
			tmp.Enum = 2
			tmp.Execute = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Forced` param:
	err = encoder.Encode(obj.Forced)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProcessWithdrawalBatchCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	{
		tmp := new(processWithdrawalBatchCommandStateContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.State = (*ProcessWithdrawalBatchCommandStateNewTuple)(&tmp.Enum)
		case 1:
			obj.State = &tmp.Prepare
		case 2:
			obj.State = &tmp.Execute
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Forced`:
	err = decoder.Decode(&obj.Forced)
	if err != nil {
		return err
	}
	return nil
}

type ProcessWithdrawalBatchCommandResult struct {
	RequestedReceiptTokenAmount   uint64
	ProcessedReceiptTokenAmount   uint64
	AssetTokenMint                *ag_solanago.PublicKey `bin:"optional"`
	ReservedAssetUserAmount       uint64
	DeductedAssetFeeAmount        uint64
	OffsettedAssetReceivables     []ProcessWithdrawalBatchCommandResultAssetReceivable
	TransferredAssetRevenueAmount uint64
	WithdrawalFeeRateBps          uint16
}

func (obj ProcessWithdrawalBatchCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RequestedReceiptTokenAmount` param:
	err = encoder.Encode(obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `ProcessedReceiptTokenAmount` param:
	err = encoder.Encode(obj.ProcessedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `AssetTokenMint` param (optional):
	{
		if obj.AssetTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ReservedAssetUserAmount` param:
	err = encoder.Encode(obj.ReservedAssetUserAmount)
	if err != nil {
		return err
	}
	// Serialize `DeductedAssetFeeAmount` param:
	err = encoder.Encode(obj.DeductedAssetFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `OffsettedAssetReceivables` param:
	err = encoder.Encode(obj.OffsettedAssetReceivables)
	if err != nil {
		return err
	}
	// Serialize `TransferredAssetRevenueAmount` param:
	err = encoder.Encode(obj.TransferredAssetRevenueAmount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalFeeRateBps` param:
	err = encoder.Encode(obj.WithdrawalFeeRateBps)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProcessWithdrawalBatchCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RequestedReceiptTokenAmount`:
	err = decoder.Decode(&obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `ProcessedReceiptTokenAmount`:
	err = decoder.Decode(&obj.ProcessedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `AssetTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ReservedAssetUserAmount`:
	err = decoder.Decode(&obj.ReservedAssetUserAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeductedAssetFeeAmount`:
	err = decoder.Decode(&obj.DeductedAssetFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `OffsettedAssetReceivables`:
	err = decoder.Decode(&obj.OffsettedAssetReceivables)
	if err != nil {
		return err
	}
	// Deserialize `TransferredAssetRevenueAmount`:
	err = decoder.Decode(&obj.TransferredAssetRevenueAmount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalFeeRateBps`:
	err = decoder.Decode(&obj.WithdrawalFeeRateBps)
	if err != nil {
		return err
	}
	return nil
}

type ProcessWithdrawalBatchCommandResultAssetReceivable struct {
	AssetTokenMint *ag_solanago.PublicKey `bin:"optional"`
	AssetAmount    uint64
}

func (obj ProcessWithdrawalBatchCommandResultAssetReceivable) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AssetTokenMint` param (optional):
	{
		if obj.AssetTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `AssetAmount` param:
	err = encoder.Encode(obj.AssetAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProcessWithdrawalBatchCommandResultAssetReceivable) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AssetTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `AssetAmount`:
	err = decoder.Decode(&obj.AssetAmount)
	if err != nil {
		return err
	}
	return nil
}

type ProcessWithdrawalBatchCommandState interface {
	isProcessWithdrawalBatchCommandState()
}

type processWithdrawalBatchCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     ProcessWithdrawalBatchCommandStateNewTuple
	Prepare ProcessWithdrawalBatchCommandStatePrepareTuple
	Execute ProcessWithdrawalBatchCommandStateExecuteTuple
}

type ProcessWithdrawalBatchCommandStateNewTuple uint8

func (obj ProcessWithdrawalBatchCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *ProcessWithdrawalBatchCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ ProcessWithdrawalBatchCommandStateNewTuple) isProcessWithdrawalBatchCommandState() {}

type ProcessWithdrawalBatchCommandStatePrepareTuple struct {
	AssetTokenMint *ag_solanago.PublicKey `bin:"optional"`
}

func (obj ProcessWithdrawalBatchCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AssetTokenMint` param (optional):
	{
		if obj.AssetTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *ProcessWithdrawalBatchCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AssetTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (_ ProcessWithdrawalBatchCommandStatePrepareTuple) isProcessWithdrawalBatchCommandState() {}

type ProcessWithdrawalBatchCommandStateExecuteTuple struct {
	AssetTokenMint       *ag_solanago.PublicKey `bin:"optional"`
	NumProcessingBatches uint8
	ReceiptTokenAmount   uint64
}

func (obj ProcessWithdrawalBatchCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AssetTokenMint` param (optional):
	{
		if obj.AssetTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `NumProcessingBatches` param:
	err = encoder.Encode(obj.NumProcessingBatches)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProcessWithdrawalBatchCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AssetTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.AssetTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `NumProcessingBatches`:
	err = decoder.Decode(&obj.NumProcessingBatches)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (_ ProcessWithdrawalBatchCommandStateExecuteTuple) isProcessWithdrawalBatchCommandState() {}

type RestakeVSTCommand struct {
	State RestakeVSTCommandState
}

func (obj RestakeVSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	{
		tmp := restakeVSTCommandStateContainer{}
		switch realvalue := obj.State.(type) {
		case *RestakeVSTCommandStateNewTuple:
			tmp.Enum = 0
			tmp.New = *realvalue
		case *RestakeVSTCommandStatePrepareTuple:
			tmp.Enum = 1
			tmp.Prepare = *realvalue
		case *RestakeVSTCommandStateExecuteTuple:
			tmp.Enum = 2
			tmp.Execute = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *RestakeVSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	{
		tmp := new(restakeVSTCommandStateContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.State = (*RestakeVSTCommandStateNewTuple)(&tmp.Enum)
		case 1:
			obj.State = &tmp.Prepare
		case 2:
			obj.State = &tmp.Execute
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

type RestakeVSTCommandItem struct {
	Vault                ag_solanago.PublicKey
	SupportedTokenMint   ag_solanago.PublicKey
	AllocatedTokenAmount uint64
}

func (obj RestakeVSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `AllocatedTokenAmount` param:
	err = encoder.Encode(obj.AllocatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakeVSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedTokenAmount`:
	err = decoder.Decode(&obj.AllocatedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type RestakeVSTCommandResult struct {
	SupportedTokenMint              ag_solanago.PublicKey
	DepositedSupportedTokenAmount   uint64
	DeductedSupportedTokenFeeAmount uint64
	MintedTokenAmount               uint64
	OperationReservedTokenAmount    uint64
}

func (obj RestakeVSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `DepositedSupportedTokenAmount` param:
	err = encoder.Encode(obj.DepositedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `DeductedSupportedTokenFeeAmount` param:
	err = encoder.Encode(obj.DeductedSupportedTokenFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `MintedTokenAmount` param:
	err = encoder.Encode(obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedTokenAmount` param:
	err = encoder.Encode(obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakeVSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `DepositedSupportedTokenAmount`:
	err = decoder.Decode(&obj.DepositedSupportedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeductedSupportedTokenFeeAmount`:
	err = decoder.Decode(&obj.DeductedSupportedTokenFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintedTokenAmount`:
	err = decoder.Decode(&obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedTokenAmount`:
	err = decoder.Decode(&obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type RestakeVSTCommandState interface {
	isRestakeVSTCommandState()
}

type restakeVSTCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     RestakeVSTCommandStateNewTuple
	Prepare RestakeVSTCommandStatePrepareTuple
	Execute RestakeVSTCommandStateExecuteTuple
}

type RestakeVSTCommandStateNewTuple uint8

func (obj RestakeVSTCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *RestakeVSTCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ RestakeVSTCommandStateNewTuple) isRestakeVSTCommandState() {}

type RestakeVSTCommandStatePrepareTuple struct {
	Items []RestakeVSTCommandItem
}

func (obj RestakeVSTCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakeVSTCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ RestakeVSTCommandStatePrepareTuple) isRestakeVSTCommandState() {}

type RestakeVSTCommandStateExecuteTuple struct {
	Items []RestakeVSTCommandItem
}

func (obj RestakeVSTCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakeVSTCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ RestakeVSTCommandStateExecuteTuple) isRestakeVSTCommandState() {}

type RestakingVault struct {
	Vault                ag_solanago.PublicKey
	Program              ag_solanago.PublicKey
	SupportedTokenMint   ag_solanago.PublicKey
	ReceiptTokenMint     ag_solanago.PublicKey
	ReceiptTokenProgram  ag_solanago.PublicKey
	ReceiptTokenDecimals uint8
	Padding              [7]uint8

	// transient price
	OneReceiptTokenAsSol                uint64
	ReceiptTokenPricingSource           TokenPricingSourcePod
	ReceiptTokenOperationReservedAmount uint64

	// the amount of vrt being unrestaked
	ReceiptTokenOperationReceivableAmount uint64

	// configuration: used for restaking allocation strategy.
	SolAllocationWeight         uint64
	SolAllocationCapacityAmount uint64
	Padding2                    [7]uint8
	NumDelegations              uint8
	Delegations                 [30]RestakingVaultDelegation

	// auto-compounding
	CompoundingRewardTokenMints [10]ag_solanago.PublicKey
	Reserved                    [128]uint8
}

func (obj RestakingVault) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Vault` param:
	err = encoder.Encode(obj.Vault)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param:
	err = encoder.Encode(obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenProgram` param:
	err = encoder.Encode(obj.ReceiptTokenProgram)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenDecimals` param:
	err = encoder.Encode(obj.ReceiptTokenDecimals)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `OneReceiptTokenAsSol` param:
	err = encoder.Encode(obj.OneReceiptTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenPricingSource` param:
	err = encoder.Encode(obj.ReceiptTokenPricingSource)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenOperationReservedAmount` param:
	err = encoder.Encode(obj.ReceiptTokenOperationReservedAmount)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenOperationReceivableAmount` param:
	err = encoder.Encode(obj.ReceiptTokenOperationReceivableAmount)
	if err != nil {
		return err
	}
	// Serialize `SolAllocationWeight` param:
	err = encoder.Encode(obj.SolAllocationWeight)
	if err != nil {
		return err
	}
	// Serialize `SolAllocationCapacityAmount` param:
	err = encoder.Encode(obj.SolAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `NumDelegations` param:
	err = encoder.Encode(obj.NumDelegations)
	if err != nil {
		return err
	}
	// Serialize `Delegations` param:
	err = encoder.Encode(obj.Delegations)
	if err != nil {
		return err
	}
	// Serialize `CompoundingRewardTokenMints` param:
	err = encoder.Encode(obj.CompoundingRewardTokenMints)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakingVault) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Vault`:
	err = decoder.Decode(&obj.Vault)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint`:
	err = decoder.Decode(&obj.SupportedTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenProgram`:
	err = decoder.Decode(&obj.ReceiptTokenProgram)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenDecimals`:
	err = decoder.Decode(&obj.ReceiptTokenDecimals)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `OneReceiptTokenAsSol`:
	err = decoder.Decode(&obj.OneReceiptTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenPricingSource`:
	err = decoder.Decode(&obj.ReceiptTokenPricingSource)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenOperationReservedAmount`:
	err = decoder.Decode(&obj.ReceiptTokenOperationReservedAmount)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenOperationReceivableAmount`:
	err = decoder.Decode(&obj.ReceiptTokenOperationReceivableAmount)
	if err != nil {
		return err
	}
	// Deserialize `SolAllocationWeight`:
	err = decoder.Decode(&obj.SolAllocationWeight)
	if err != nil {
		return err
	}
	// Deserialize `SolAllocationCapacityAmount`:
	err = decoder.Decode(&obj.SolAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `NumDelegations`:
	err = decoder.Decode(&obj.NumDelegations)
	if err != nil {
		return err
	}
	// Deserialize `Delegations`:
	err = decoder.Decode(&obj.Delegations)
	if err != nil {
		return err
	}
	// Deserialize `CompoundingRewardTokenMints`:
	err = decoder.Decode(&obj.CompoundingRewardTokenMints)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type RestakingVaultDelegation struct {
	Operator ag_solanago.PublicKey

	// configuration: used for delegation strategy.
	SupportedTokenAllocationWeight         uint64
	SupportedTokenAllocationCapacityAmount uint64

	// informative field; these values shall be synced from remote state periodically.
	SupportedTokenDelegatedAmount    uint64
	SupportedTokenUndelegatingAmount uint64

	// configuration: the amount requested to be undelegated as soon as possible regardless of current state, this value should be decreased by each undelegation requested amount.
	SupportedTokenRedelegatingAmount uint64
	Reserved                         [24]uint8
}

func (obj RestakingVaultDelegation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenAllocationWeight` param:
	err = encoder.Encode(obj.SupportedTokenAllocationWeight)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenAllocationCapacityAmount` param:
	err = encoder.Encode(obj.SupportedTokenAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenDelegatedAmount` param:
	err = encoder.Encode(obj.SupportedTokenDelegatedAmount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenUndelegatingAmount` param:
	err = encoder.Encode(obj.SupportedTokenUndelegatingAmount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenRedelegatingAmount` param:
	err = encoder.Encode(obj.SupportedTokenRedelegatingAmount)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RestakingVaultDelegation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenAllocationWeight`:
	err = decoder.Decode(&obj.SupportedTokenAllocationWeight)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenAllocationCapacityAmount`:
	err = decoder.Decode(&obj.SupportedTokenAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenDelegatedAmount`:
	err = decoder.Decode(&obj.SupportedTokenDelegatedAmount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenUndelegatingAmount`:
	err = decoder.Decode(&obj.SupportedTokenUndelegatingAmount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenRedelegatingAmount`:
	err = decoder.Decode(&obj.SupportedTokenRedelegatingAmount)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type Reward struct {
	// ID is determined by reward account.
	Id                     uint16
	Name                   [14]uint8
	Description            [128]uint8
	RewardTypeDiscriminant uint8
	TokenMint              ag_solanago.PublicKey
	TokenProgram           ag_solanago.PublicKey
	Decimals               uint8
	Padding                [14]uint8
	Reserved               [16]uint64
}

func (obj Reward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Description` param:
	err = encoder.Encode(obj.Description)
	if err != nil {
		return err
	}
	// Serialize `RewardTypeDiscriminant` param:
	err = encoder.Encode(obj.RewardTypeDiscriminant)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `TokenProgram` param:
	err = encoder.Encode(obj.TokenProgram)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Reward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Description`:
	err = decoder.Decode(&obj.Description)
	if err != nil {
		return err
	}
	// Deserialize `RewardTypeDiscriminant`:
	err = decoder.Decode(&obj.RewardTypeDiscriminant)
	if err != nil {
		return err
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenProgram`:
	err = decoder.Decode(&obj.TokenProgram)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type RewardAccount struct {
	DataVersion      uint16
	Bump             uint8
	ReceiptTokenMint ag_solanago.PublicKey
	MaxHolders       uint8
	MaxRewards       uint16
	MaxRewardPools   uint8
	NumHolders       uint8
	NumRewards       uint16
	NumRewardPools   uint8
	Padding          [5]uint8
	Holders1         [4]RewardPoolHolder
	Rewards1         [16]Reward
	RewardPools1     [4]RewardPool
}

func (obj RewardAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `MaxHolders` param:
	err = encoder.Encode(obj.MaxHolders)
	if err != nil {
		return err
	}
	// Serialize `MaxRewards` param:
	err = encoder.Encode(obj.MaxRewards)
	if err != nil {
		return err
	}
	// Serialize `MaxRewardPools` param:
	err = encoder.Encode(obj.MaxRewardPools)
	if err != nil {
		return err
	}
	// Serialize `NumHolders` param:
	err = encoder.Encode(obj.NumHolders)
	if err != nil {
		return err
	}
	// Serialize `NumRewards` param:
	err = encoder.Encode(obj.NumRewards)
	if err != nil {
		return err
	}
	// Serialize `NumRewardPools` param:
	err = encoder.Encode(obj.NumRewardPools)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Holders1` param:
	err = encoder.Encode(obj.Holders1)
	if err != nil {
		return err
	}
	// Serialize `Rewards1` param:
	err = encoder.Encode(obj.Rewards1)
	if err != nil {
		return err
	}
	// Serialize `RewardPools1` param:
	err = encoder.Encode(obj.RewardPools1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `MaxHolders`:
	err = decoder.Decode(&obj.MaxHolders)
	if err != nil {
		return err
	}
	// Deserialize `MaxRewards`:
	err = decoder.Decode(&obj.MaxRewards)
	if err != nil {
		return err
	}
	// Deserialize `MaxRewardPools`:
	err = decoder.Decode(&obj.MaxRewardPools)
	if err != nil {
		return err
	}
	// Deserialize `NumHolders`:
	err = decoder.Decode(&obj.NumHolders)
	if err != nil {
		return err
	}
	// Deserialize `NumRewards`:
	err = decoder.Decode(&obj.NumRewards)
	if err != nil {
		return err
	}
	// Deserialize `NumRewardPools`:
	err = decoder.Decode(&obj.NumRewardPools)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Holders1`:
	err = decoder.Decode(&obj.Holders1)
	if err != nil {
		return err
	}
	// Deserialize `Rewards1`:
	err = decoder.Decode(&obj.Rewards1)
	if err != nil {
		return err
	}
	// Deserialize `RewardPools1`:
	err = decoder.Decode(&obj.RewardPools1)
	if err != nil {
		return err
	}
	return nil
}

type RewardPool struct {
	// ID is determined by reward account.
	Id                   uint8
	Name                 [14]uint8
	RewardPoolBitmap     uint8
	TokenAllocatedAmount TokenAllocatedAmount
	Contribution         ag_binary.Uint128
	InitialSlot          uint64
	UpdatedSlot          uint64
	ClosedSlot           uint64
	HolderId             uint8
	NumRewardSettlements uint8
	Padding              [6]uint8
	Reserved             [32]uint64
	RewardSettlements1   [16]RewardSettlement
}

func (obj RewardPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `RewardPoolBitmap` param:
	err = encoder.Encode(obj.RewardPoolBitmap)
	if err != nil {
		return err
	}
	// Serialize `TokenAllocatedAmount` param:
	err = encoder.Encode(obj.TokenAllocatedAmount)
	if err != nil {
		return err
	}
	// Serialize `Contribution` param:
	err = encoder.Encode(obj.Contribution)
	if err != nil {
		return err
	}
	// Serialize `InitialSlot` param:
	err = encoder.Encode(obj.InitialSlot)
	if err != nil {
		return err
	}
	// Serialize `UpdatedSlot` param:
	err = encoder.Encode(obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `ClosedSlot` param:
	err = encoder.Encode(obj.ClosedSlot)
	if err != nil {
		return err
	}
	// Serialize `HolderId` param:
	err = encoder.Encode(obj.HolderId)
	if err != nil {
		return err
	}
	// Serialize `NumRewardSettlements` param:
	err = encoder.Encode(obj.NumRewardSettlements)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `RewardSettlements1` param:
	err = encoder.Encode(obj.RewardSettlements1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `RewardPoolBitmap`:
	err = decoder.Decode(&obj.RewardPoolBitmap)
	if err != nil {
		return err
	}
	// Deserialize `TokenAllocatedAmount`:
	err = decoder.Decode(&obj.TokenAllocatedAmount)
	if err != nil {
		return err
	}
	// Deserialize `Contribution`:
	err = decoder.Decode(&obj.Contribution)
	if err != nil {
		return err
	}
	// Deserialize `InitialSlot`:
	err = decoder.Decode(&obj.InitialSlot)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedSlot`:
	err = decoder.Decode(&obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `ClosedSlot`:
	err = decoder.Decode(&obj.ClosedSlot)
	if err != nil {
		return err
	}
	// Deserialize `HolderId`:
	err = decoder.Decode(&obj.HolderId)
	if err != nil {
		return err
	}
	// Deserialize `NumRewardSettlements`:
	err = decoder.Decode(&obj.NumRewardSettlements)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `RewardSettlements1`:
	err = decoder.Decode(&obj.RewardSettlements1)
	if err != nil {
		return err
	}
	return nil
}

type RewardPoolHolder struct {
	// ID is determined by reward account.
	Id          uint8
	Name        [14]uint8
	Description [128]uint8
	NumPubkeys  uint8
	Reserved    [32]uint64

	// List of allowed pubkeys for this holder.
	Pubkeys1 [8]ag_solanago.PublicKey
}

func (obj RewardPoolHolder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Description` param:
	err = encoder.Encode(obj.Description)
	if err != nil {
		return err
	}
	// Serialize `NumPubkeys` param:
	err = encoder.Encode(obj.NumPubkeys)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `Pubkeys1` param:
	err = encoder.Encode(obj.Pubkeys1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardPoolHolder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Description`:
	err = decoder.Decode(&obj.Description)
	if err != nil {
		return err
	}
	// Deserialize `NumPubkeys`:
	err = decoder.Decode(&obj.NumPubkeys)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `Pubkeys1`:
	err = decoder.Decode(&obj.Pubkeys1)
	if err != nil {
		return err
	}
	return nil
}

type RewardSettlement struct {
	RewardId             uint16
	RewardPoolId         uint8
	NumSettlementBlocks  uint8
	SettlementBlocksHead uint8
	SettlementBlocksTail uint8
	Padding              [2]uint8

	// Leftovers from each settlement block when clearing
	RemainingAmount                            uint64
	ClaimedAmount                              uint64
	ClaimedAmountUpdatedSlot                   uint64
	SettledAmount                              uint64
	SettlementBlocksLastSlot                   uint64
	SettlementBlocksLastRewardPoolContribution ag_binary.Uint128
	SettlementBlocks                           [64]RewardSettlementBlock
}

func (obj RewardSettlement) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardId` param:
	err = encoder.Encode(obj.RewardId)
	if err != nil {
		return err
	}
	// Serialize `RewardPoolId` param:
	err = encoder.Encode(obj.RewardPoolId)
	if err != nil {
		return err
	}
	// Serialize `NumSettlementBlocks` param:
	err = encoder.Encode(obj.NumSettlementBlocks)
	if err != nil {
		return err
	}
	// Serialize `SettlementBlocksHead` param:
	err = encoder.Encode(obj.SettlementBlocksHead)
	if err != nil {
		return err
	}
	// Serialize `SettlementBlocksTail` param:
	err = encoder.Encode(obj.SettlementBlocksTail)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `RemainingAmount` param:
	err = encoder.Encode(obj.RemainingAmount)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAmount` param:
	err = encoder.Encode(obj.ClaimedAmount)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAmountUpdatedSlot` param:
	err = encoder.Encode(obj.ClaimedAmountUpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `SettledAmount` param:
	err = encoder.Encode(obj.SettledAmount)
	if err != nil {
		return err
	}
	// Serialize `SettlementBlocksLastSlot` param:
	err = encoder.Encode(obj.SettlementBlocksLastSlot)
	if err != nil {
		return err
	}
	// Serialize `SettlementBlocksLastRewardPoolContribution` param:
	err = encoder.Encode(obj.SettlementBlocksLastRewardPoolContribution)
	if err != nil {
		return err
	}
	// Serialize `SettlementBlocks` param:
	err = encoder.Encode(obj.SettlementBlocks)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardSettlement) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardId`:
	err = decoder.Decode(&obj.RewardId)
	if err != nil {
		return err
	}
	// Deserialize `RewardPoolId`:
	err = decoder.Decode(&obj.RewardPoolId)
	if err != nil {
		return err
	}
	// Deserialize `NumSettlementBlocks`:
	err = decoder.Decode(&obj.NumSettlementBlocks)
	if err != nil {
		return err
	}
	// Deserialize `SettlementBlocksHead`:
	err = decoder.Decode(&obj.SettlementBlocksHead)
	if err != nil {
		return err
	}
	// Deserialize `SettlementBlocksTail`:
	err = decoder.Decode(&obj.SettlementBlocksTail)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `RemainingAmount`:
	err = decoder.Decode(&obj.RemainingAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAmount`:
	err = decoder.Decode(&obj.ClaimedAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAmountUpdatedSlot`:
	err = decoder.Decode(&obj.ClaimedAmountUpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `SettledAmount`:
	err = decoder.Decode(&obj.SettledAmount)
	if err != nil {
		return err
	}
	// Deserialize `SettlementBlocksLastSlot`:
	err = decoder.Decode(&obj.SettlementBlocksLastSlot)
	if err != nil {
		return err
	}
	// Deserialize `SettlementBlocksLastRewardPoolContribution`:
	err = decoder.Decode(&obj.SettlementBlocksLastRewardPoolContribution)
	if err != nil {
		return err
	}
	// Deserialize `SettlementBlocks`:
	err = decoder.Decode(&obj.SettlementBlocks)
	if err != nil {
		return err
	}
	return nil
}

type RewardSettlementBlock struct {
	Amount                         uint64
	StartingSlot                   uint64
	StartingRewardPoolContribution ag_binary.Uint128
	EndingRewardPoolContribution   ag_binary.Uint128
	EndingSlot                     uint64
	UserSettledAmount              uint64
	UserSettledContribution        ag_binary.Uint128
}

func (obj RewardSettlementBlock) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `StartingSlot` param:
	err = encoder.Encode(obj.StartingSlot)
	if err != nil {
		return err
	}
	// Serialize `StartingRewardPoolContribution` param:
	err = encoder.Encode(obj.StartingRewardPoolContribution)
	if err != nil {
		return err
	}
	// Serialize `EndingRewardPoolContribution` param:
	err = encoder.Encode(obj.EndingRewardPoolContribution)
	if err != nil {
		return err
	}
	// Serialize `EndingSlot` param:
	err = encoder.Encode(obj.EndingSlot)
	if err != nil {
		return err
	}
	// Serialize `UserSettledAmount` param:
	err = encoder.Encode(obj.UserSettledAmount)
	if err != nil {
		return err
	}
	// Serialize `UserSettledContribution` param:
	err = encoder.Encode(obj.UserSettledContribution)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardSettlementBlock) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `StartingSlot`:
	err = decoder.Decode(&obj.StartingSlot)
	if err != nil {
		return err
	}
	// Deserialize `StartingRewardPoolContribution`:
	err = decoder.Decode(&obj.StartingRewardPoolContribution)
	if err != nil {
		return err
	}
	// Deserialize `EndingRewardPoolContribution`:
	err = decoder.Decode(&obj.EndingRewardPoolContribution)
	if err != nil {
		return err
	}
	// Deserialize `EndingSlot`:
	err = decoder.Decode(&obj.EndingSlot)
	if err != nil {
		return err
	}
	// Deserialize `UserSettledAmount`:
	err = decoder.Decode(&obj.UserSettledAmount)
	if err != nil {
		return err
	}
	// Deserialize `UserSettledContribution`:
	err = decoder.Decode(&obj.UserSettledContribution)
	if err != nil {
		return err
	}
	return nil
}

type RewardType interface {
	isRewardType()
}

type rewardTypeContainer struct {
	Enum  ag_binary.BorshEnum `borsh_enum:"true"`
	Point RewardTypePointTuple
	Token RewardTypeTokenTuple
	SOL   RewardTypeSOLTuple
}

type RewardTypePointTuple struct {
	Decimals uint8
}

func (obj RewardTypePointTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardTypePointTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}

func (_ RewardTypePointTuple) isRewardType() {}

type RewardTypeTokenTuple struct {
	Mint     ag_solanago.PublicKey
	Program  ag_solanago.PublicKey
	Decimals uint8
}

func (obj RewardTypeTokenTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardTypeTokenTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	return nil
}

func (_ RewardTypeTokenTuple) isRewardType() {}

type RewardTypeSOLTuple uint8

func (obj RewardTypeSOLTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *RewardTypeSOLTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ RewardTypeSOLTuple) isRewardType() {}

type SplWithdrawStakeItem struct {
	ValidatorStakeAccount       ag_solanago.PublicKey
	FundStakeAccount            ag_solanago.PublicKey
	FundStakeAccountSignerSeeds [][]byte
	TokenAmount                 uint64
}

func (obj SplWithdrawStakeItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ValidatorStakeAccount` param:
	err = encoder.Encode(obj.ValidatorStakeAccount)
	if err != nil {
		return err
	}
	// Serialize `FundStakeAccount` param:
	err = encoder.Encode(obj.FundStakeAccount)
	if err != nil {
		return err
	}
	// Serialize `FundStakeAccountSignerSeeds` param:
	err = encoder.Encode(obj.FundStakeAccountSignerSeeds)
	if err != nil {
		return err
	}
	// Serialize `TokenAmount` param:
	err = encoder.Encode(obj.TokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SplWithdrawStakeItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ValidatorStakeAccount`:
	err = decoder.Decode(&obj.ValidatorStakeAccount)
	if err != nil {
		return err
	}
	// Deserialize `FundStakeAccount`:
	err = decoder.Decode(&obj.FundStakeAccount)
	if err != nil {
		return err
	}
	// Deserialize `FundStakeAccountSignerSeeds`:
	err = decoder.Decode(&obj.FundStakeAccountSignerSeeds)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmount`:
	err = decoder.Decode(&obj.TokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type StakeSOLCommand struct {
	State StakeSOLCommandState
}

func (obj StakeSOLCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `State` param:
	{
		tmp := stakeSOLCommandStateContainer{}
		switch realvalue := obj.State.(type) {
		case *StakeSOLCommandStateNewTuple:
			tmp.Enum = 0
			tmp.New = *realvalue
		case *StakeSOLCommandStatePrepareTuple:
			tmp.Enum = 1
			tmp.Prepare = *realvalue
		case *StakeSOLCommandStateExecuteTuple:
			tmp.Enum = 2
			tmp.Execute = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *StakeSOLCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `State`:
	{
		tmp := new(stakeSOLCommandStateContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.State = (*StakeSOLCommandStateNewTuple)(&tmp.Enum)
		case 1:
			obj.State = &tmp.Prepare
		case 2:
			obj.State = &tmp.Execute
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

type StakeSOLCommandItem struct {
	TokenMint          ag_solanago.PublicKey
	AllocatedSolAmount uint64
}

func (obj StakeSOLCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `AllocatedSolAmount` param:
	err = encoder.Encode(obj.AllocatedSolAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakeSOLCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `AllocatedSolAmount`:
	err = decoder.Decode(&obj.AllocatedSolAmount)
	if err != nil {
		return err
	}
	return nil
}

type StakeSOLCommandResult struct {
	TokenMint                    ag_solanago.PublicKey
	StakedSolAmount              uint64
	DeductedSolFeeAmount         uint64
	MintedTokenAmount            uint64
	OperationReservedTokenAmount uint64
}

func (obj StakeSOLCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	// Serialize `StakedSolAmount` param:
	err = encoder.Encode(obj.StakedSolAmount)
	if err != nil {
		return err
	}
	// Serialize `DeductedSolFeeAmount` param:
	err = encoder.Encode(obj.DeductedSolFeeAmount)
	if err != nil {
		return err
	}
	// Serialize `MintedTokenAmount` param:
	err = encoder.Encode(obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `OperationReservedTokenAmount` param:
	err = encoder.Encode(obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakeSOLCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	// Deserialize `StakedSolAmount`:
	err = decoder.Decode(&obj.StakedSolAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeductedSolFeeAmount`:
	err = decoder.Decode(&obj.DeductedSolFeeAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintedTokenAmount`:
	err = decoder.Decode(&obj.MintedTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `OperationReservedTokenAmount`:
	err = decoder.Decode(&obj.OperationReservedTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type StakeSOLCommandState interface {
	isStakeSOLCommandState()
}

type stakeSOLCommandStateContainer struct {
	Enum    ag_binary.BorshEnum `borsh_enum:"true"`
	New     StakeSOLCommandStateNewTuple
	Prepare StakeSOLCommandStatePrepareTuple
	Execute StakeSOLCommandStateExecuteTuple
}

type StakeSOLCommandStateNewTuple uint8

func (obj StakeSOLCommandStateNewTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *StakeSOLCommandStateNewTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ StakeSOLCommandStateNewTuple) isStakeSOLCommandState() {}

type StakeSOLCommandStatePrepareTuple struct {
	Items []StakeSOLCommandItem
}

func (obj StakeSOLCommandStatePrepareTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakeSOLCommandStatePrepareTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ StakeSOLCommandStatePrepareTuple) isStakeSOLCommandState() {}

type StakeSOLCommandStateExecuteTuple struct {
	Items []StakeSOLCommandItem
}

func (obj StakeSOLCommandStateExecuteTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StakeSOLCommandStateExecuteTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	return nil
}

func (_ StakeSOLCommandStateExecuteTuple) isStakeSOLCommandState() {}

type SupportedToken struct {
	Mint          ag_solanago.PublicKey
	Program       ag_solanago.PublicKey
	Decimals      uint8
	Padding       [7]uint8
	PricingSource TokenPricingSourcePod

	// informative
	OneTokenAsSol uint64

	// token deposit & withdrawal
	Token AssetState

	// configuration: the amount requested to be unstaked as soon as possible regardless of current state, this value should be decreased by each unstaking requested amount.
	RebalancingAmount uint64

	// configuration: used for staking allocation strategy.
	SolAllocationWeight         uint64
	SolAllocationCapacityAmount uint64
	Reserved                    [64]uint8
}

func (obj SupportedToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Program` param:
	err = encoder.Encode(obj.Program)
	if err != nil {
		return err
	}
	// Serialize `Decimals` param:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `PricingSource` param:
	err = encoder.Encode(obj.PricingSource)
	if err != nil {
		return err
	}
	// Serialize `OneTokenAsSol` param:
	err = encoder.Encode(obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Serialize `Token` param:
	err = encoder.Encode(obj.Token)
	if err != nil {
		return err
	}
	// Serialize `RebalancingAmount` param:
	err = encoder.Encode(obj.RebalancingAmount)
	if err != nil {
		return err
	}
	// Serialize `SolAllocationWeight` param:
	err = encoder.Encode(obj.SolAllocationWeight)
	if err != nil {
		return err
	}
	// Serialize `SolAllocationCapacityAmount` param:
	err = encoder.Encode(obj.SolAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SupportedToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Program`:
	err = decoder.Decode(&obj.Program)
	if err != nil {
		return err
	}
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `PricingSource`:
	err = decoder.Decode(&obj.PricingSource)
	if err != nil {
		return err
	}
	// Deserialize `OneTokenAsSol`:
	err = decoder.Decode(&obj.OneTokenAsSol)
	if err != nil {
		return err
	}
	// Deserialize `Token`:
	err = decoder.Decode(&obj.Token)
	if err != nil {
		return err
	}
	// Deserialize `RebalancingAmount`:
	err = decoder.Decode(&obj.RebalancingAmount)
	if err != nil {
		return err
	}
	// Deserialize `SolAllocationWeight`:
	err = decoder.Decode(&obj.SolAllocationWeight)
	if err != nil {
		return err
	}
	// Deserialize `SolAllocationCapacityAmount`:
	err = decoder.Decode(&obj.SolAllocationCapacityAmount)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type TokenAllocatedAmount struct {
	TotalAmount uint64
	NumRecords  uint8
	Padding     [7]uint8
	Records     [10]TokenAllocatedAmountRecord
}

func (obj TokenAllocatedAmount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TotalAmount` param:
	err = encoder.Encode(obj.TotalAmount)
	if err != nil {
		return err
	}
	// Serialize `NumRecords` param:
	err = encoder.Encode(obj.NumRecords)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Records` param:
	err = encoder.Encode(obj.Records)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenAllocatedAmount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TotalAmount`:
	err = decoder.Decode(&obj.TotalAmount)
	if err != nil {
		return err
	}
	// Deserialize `NumRecords`:
	err = decoder.Decode(&obj.NumRecords)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Records`:
	err = decoder.Decode(&obj.Records)
	if err != nil {
		return err
	}
	return nil
}

type TokenAllocatedAmountRecord struct {
	Amount uint64

	// Contribution accrual rate per 1 lamports (decimals = 2)
	// e.g., rate = 135 => actual rate = 1.35
	ContributionAccrualRate uint8
	Padding                 [7]uint8
}

func (obj TokenAllocatedAmountRecord) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `ContributionAccrualRate` param:
	err = encoder.Encode(obj.ContributionAccrualRate)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenAllocatedAmountRecord) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `ContributionAccrualRate`:
	err = decoder.Decode(&obj.ContributionAccrualRate)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type TokenPricingSource interface {
	isTokenPricingSource()
}

type tokenPricingSourceContainer struct {
	Enum                          ag_binary.BorshEnum `borsh_enum:"true"`
	SPLStakePool                  TokenPricingSourceSPLStakePoolTuple
	MarinadeStakePool             TokenPricingSourceMarinadeStakePoolTuple
	JitoRestakingVault            TokenPricingSourceJitoRestakingVaultTuple
	FragmetricNormalizedTokenPool TokenPricingSourceFragmetricNormalizedTokenPoolTuple
	FragmetricRestakingFund       TokenPricingSourceFragmetricRestakingFundTuple
	OrcaDEXLiquidityPool          TokenPricingSourceOrcaDEXLiquidityPoolTuple
}

type TokenPricingSourceSPLStakePoolTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceSPLStakePoolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceSPLStakePoolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceSPLStakePoolTuple) isTokenPricingSource() {}

type TokenPricingSourceMarinadeStakePoolTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceMarinadeStakePoolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceMarinadeStakePoolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceMarinadeStakePoolTuple) isTokenPricingSource() {}

type TokenPricingSourceJitoRestakingVaultTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceJitoRestakingVaultTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceJitoRestakingVaultTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceJitoRestakingVaultTuple) isTokenPricingSource() {}

type TokenPricingSourceFragmetricNormalizedTokenPoolTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceFragmetricNormalizedTokenPoolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceFragmetricNormalizedTokenPoolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceFragmetricNormalizedTokenPoolTuple) isTokenPricingSource() {}

type TokenPricingSourceFragmetricRestakingFundTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceFragmetricRestakingFundTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceFragmetricRestakingFundTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceFragmetricRestakingFundTuple) isTokenPricingSource() {}

type TokenPricingSourceOrcaDEXLiquidityPoolTuple struct {
	Address ag_solanago.PublicKey
}

func (obj TokenPricingSourceOrcaDEXLiquidityPoolTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourceOrcaDEXLiquidityPoolTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (_ TokenPricingSourceOrcaDEXLiquidityPoolTuple) isTokenPricingSource() {}

type TokenPricingSourcePod struct {
	Discriminant uint8
	Padding      [7]uint8
	Address      ag_solanago.PublicKey
}

func (obj TokenPricingSourcePod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Discriminant` param:
	err = encoder.Encode(obj.Discriminant)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenPricingSourcePod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Discriminant`:
	err = decoder.Decode(&obj.Discriminant)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

type TokenValue struct {
	Numerator   []Asset
	Denominator uint64
}

func (obj TokenValue) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Numerator` param:
	err = encoder.Encode(obj.Numerator)
	if err != nil {
		return err
	}
	// Serialize `Denominator` param:
	err = encoder.Encode(obj.Denominator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenValue) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Numerator`:
	err = decoder.Decode(&obj.Numerator)
	if err != nil {
		return err
	}
	// Deserialize `Denominator`:
	err = decoder.Decode(&obj.Denominator)
	if err != nil {
		return err
	}
	return nil
}

type TokenValuePod struct {
	Numerator    [33]AssetPod
	NumNumerator uint64
	Denominator  uint64
}

func (obj TokenValuePod) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Numerator` param:
	err = encoder.Encode(obj.Numerator)
	if err != nil {
		return err
	}
	// Serialize `NumNumerator` param:
	err = encoder.Encode(obj.NumNumerator)
	if err != nil {
		return err
	}
	// Serialize `Denominator` param:
	err = encoder.Encode(obj.Denominator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenValuePod) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Numerator`:
	err = decoder.Decode(&obj.Numerator)
	if err != nil {
		return err
	}
	// Deserialize `NumNumerator`:
	err = decoder.Decode(&obj.NumNumerator)
	if err != nil {
		return err
	}
	// Deserialize `Denominator`:
	err = decoder.Decode(&obj.Denominator)
	if err != nil {
		return err
	}
	return nil
}

type UndelegateVSTCommand struct{}

func (obj UndelegateVSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UndelegateVSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type UndelegateVSTCommandResult struct{}

func (obj UndelegateVSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UndelegateVSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type UnrestakeVRTCommand struct {
	Items []UnrestakeVSTCommandItem
	State UnrestakeVRTCommandState
}

func (obj UnrestakeVRTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	{
		tmp := unrestakeVRTCommandStateContainer{}
		switch realvalue := obj.State.(type) {
		case *UnrestakeVRTCommandStateInitTuple:
			tmp.Enum = 0
			tmp.Init = *realvalue
		case *UnrestakeVRTCommandStateReadVaultStateTuple:
			tmp.Enum = 1
			tmp.ReadVaultState = *realvalue
		case *UnrestakeVRTCommandStateUnstakeTuple:
			tmp.Enum = 2
			tmp.Unstake = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	return nil
}

func (obj *UnrestakeVRTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	{
		tmp := new(unrestakeVRTCommandStateContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.State = (*UnrestakeVRTCommandStateInitTuple)(&tmp.Enum)
		case 1:
			obj.State = (*UnrestakeVRTCommandStateReadVaultStateTuple)(&tmp.Enum)
		case 2:
			obj.State = &tmp.Unstake
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	return nil
}

type UnrestakeVRTCommandResult struct{}

func (obj UnrestakeVRTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UnrestakeVRTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type UnrestakeVRTCommandState interface {
	isUnrestakeVRTCommandState()
}

type unrestakeVRTCommandStateContainer struct {
	Enum           ag_binary.BorshEnum `borsh_enum:"true"`
	Init           UnrestakeVRTCommandStateInitTuple
	ReadVaultState UnrestakeVRTCommandStateReadVaultStateTuple
	Unstake        UnrestakeVRTCommandStateUnstakeTuple
}

type UnrestakeVRTCommandStateInitTuple uint8

func (obj UnrestakeVRTCommandStateInitTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UnrestakeVRTCommandStateInitTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ UnrestakeVRTCommandStateInitTuple) isUnrestakeVRTCommandState() {}

type UnrestakeVRTCommandStateReadVaultStateTuple uint8

func (obj UnrestakeVRTCommandStateReadVaultStateTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UnrestakeVRTCommandStateReadVaultStateTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ UnrestakeVRTCommandStateReadVaultStateTuple) isUnrestakeVRTCommandState() {}

type UnrestakeVRTCommandStateUnstakeTuple struct {
	Elem0 [][]byte
}

func (_ UnrestakeVRTCommandStateUnstakeTuple) isUnrestakeVRTCommandState() {}

type UnrestakeVSTCommandItem struct {
	VaultAddress ag_solanago.PublicKey
	SolAmount    uint64
}

func (obj UnrestakeVSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VaultAddress` param:
	err = encoder.Encode(obj.VaultAddress)
	if err != nil {
		return err
	}
	// Serialize `SolAmount` param:
	err = encoder.Encode(obj.SolAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnrestakeVSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VaultAddress`:
	err = decoder.Decode(&obj.VaultAddress)
	if err != nil {
		return err
	}
	// Deserialize `SolAmount`:
	err = decoder.Decode(&obj.SolAmount)
	if err != nil {
		return err
	}
	return nil
}

type UnstakeLSTCommand struct {
	Items                 []UnstakeLSTCommandItem
	State                 UnstakeLSTCommandState
	SplWithdrawStakeItems []SplWithdrawStakeItem
}

func (obj UnstakeLSTCommand) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Items` param:
	err = encoder.Encode(obj.Items)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	// Serialize `SplWithdrawStakeItems` param:
	err = encoder.Encode(obj.SplWithdrawStakeItems)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnstakeLSTCommand) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Items`:
	err = decoder.Decode(&obj.Items)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	// Deserialize `SplWithdrawStakeItems`:
	err = decoder.Decode(&obj.SplWithdrawStakeItems)
	if err != nil {
		return err
	}
	return nil
}

type UnstakeLSTCommandItem struct {
	Mint        ag_solanago.PublicKey
	TokenAmount uint64
}

func (obj UnstakeLSTCommandItem) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `TokenAmount` param:
	err = encoder.Encode(obj.TokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UnstakeLSTCommandItem) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `TokenAmount`:
	err = decoder.Decode(&obj.TokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UnstakeLSTCommandResult struct{}

func (obj UnstakeLSTCommandResult) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *UnstakeLSTCommandResult) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

type UnstakeLSTCommandState ag_binary.BorshEnum

const (
	UnstakeLSTCommandStateInit UnstakeLSTCommandState = iota
	UnstakeLSTCommandStateReadPoolState
	UnstakeLSTCommandStateGetAvailableUnstakeAccount
	UnstakeLSTCommandStateUnstake
	UnstakeLSTCommandStateRequestUnstake
)

func (value UnstakeLSTCommandState) String() string {
	switch value {
	case UnstakeLSTCommandStateInit:
		return "Init"
	case UnstakeLSTCommandStateReadPoolState:
		return "ReadPoolState"
	case UnstakeLSTCommandStateGetAvailableUnstakeAccount:
		return "GetAvailableUnstakeAccount"
	case UnstakeLSTCommandStateUnstake:
		return "Unstake"
	case UnstakeLSTCommandStateRequestUnstake:
		return "RequestUnstake"
	default:
		return ""
	}
}

type UserCanceledWithdrawalRequestFromFund struct {
	ReceiptTokenMint            ag_solanago.PublicKey
	FundAccount                 ag_solanago.PublicKey
	SupportedTokenMint          *ag_solanago.PublicKey `bin:"optional"`
	UpdatedUserRewardAccounts   []ag_solanago.PublicKey
	User                        ag_solanago.PublicKey
	UserReceiptTokenAccount     ag_solanago.PublicKey
	UserFundAccount             ag_solanago.PublicKey
	BatchId                     uint64
	RequestId                   uint64
	RequestedReceiptTokenAmount uint64
}

func (obj UserCanceledWithdrawalRequestFromFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdatedUserRewardAccounts` param:
	err = encoder.Encode(obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `RequestedReceiptTokenAmount` param:
	err = encoder.Encode(obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserCanceledWithdrawalRequestFromFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdatedUserRewardAccounts`:
	err = decoder.Decode(&obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `RequestedReceiptTokenAmount`:
	err = decoder.Decode(&obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserCreatedOrUpdatedFundAccount struct {
	ReceiptTokenMint ag_solanago.PublicKey
	UserFundAccount  ag_solanago.PublicKey
}

func (obj UserCreatedOrUpdatedFundAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserCreatedOrUpdatedFundAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	return nil
}

type UserCreatedOrUpdatedRewardAccount struct {
	ReceiptTokenMint  ag_solanago.PublicKey
	UserRewardAccount ag_solanago.PublicKey
}

func (obj UserCreatedOrUpdatedRewardAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `UserRewardAccount` param:
	err = encoder.Encode(obj.UserRewardAccount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserCreatedOrUpdatedRewardAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `UserRewardAccount`:
	err = decoder.Decode(&obj.UserRewardAccount)
	if err != nil {
		return err
	}
	return nil
}

type UserDepositedToFund struct {
	ReceiptTokenMint          ag_solanago.PublicKey
	FundAccount               ag_solanago.PublicKey
	SupportedTokenMint        *ag_solanago.PublicKey `bin:"optional"`
	UpdatedUserRewardAccounts []ag_solanago.PublicKey
	User                      ag_solanago.PublicKey
	UserReceiptTokenAccount   ag_solanago.PublicKey
	UserFundAccount           ag_solanago.PublicKey
	UserSupportedTokenAccount *ag_solanago.PublicKey `bin:"optional"`
	WalletProvider            *string                `bin:"optional"`
	ContributionAccrualRate   *uint8                 `bin:"optional"`
	DepositedAmount           uint64
	MintedReceiptTokenAmount  uint64
}

func (obj UserDepositedToFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdatedUserRewardAccounts` param:
	err = encoder.Encode(obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `UserSupportedTokenAccount` param (optional):
	{
		if obj.UserSupportedTokenAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UserSupportedTokenAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `WalletProvider` param (optional):
	{
		if obj.WalletProvider == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `ContributionAccrualRate` param (optional):
	{
		if obj.ContributionAccrualRate == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ContributionAccrualRate)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `DepositedAmount` param:
	err = encoder.Encode(obj.DepositedAmount)
	if err != nil {
		return err
	}
	// Serialize `MintedReceiptTokenAmount` param:
	err = encoder.Encode(obj.MintedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserDepositedToFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdatedUserRewardAccounts`:
	err = decoder.Decode(&obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserSupportedTokenAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UserSupportedTokenAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `WalletProvider` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.WalletProvider)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `ContributionAccrualRate` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ContributionAccrualRate)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `DepositedAmount`:
	err = decoder.Decode(&obj.DepositedAmount)
	if err != nil {
		return err
	}
	// Deserialize `MintedReceiptTokenAmount`:
	err = decoder.Decode(&obj.MintedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserFundAccount struct {
	DataVersion        uint16
	Bump               uint8
	ReceiptTokenMint   ag_solanago.PublicKey
	User               ag_solanago.PublicKey
	ReceiptTokenAmount uint64
	Reserved           [32]uint8
	WithdrawalRequests []WithdrawalRequest
}

func (obj UserFundAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `WithdrawalRequests` param:
	err = encoder.Encode(obj.WithdrawalRequests)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserFundAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawalRequests`:
	err = decoder.Decode(&obj.WithdrawalRequests)
	if err != nil {
		return err
	}
	return nil
}

type UserRequestedWithdrawalFromFund struct {
	ReceiptTokenMint            ag_solanago.PublicKey
	FundAccount                 ag_solanago.PublicKey
	SupportedTokenMint          *ag_solanago.PublicKey `bin:"optional"`
	UpdatedUserRewardAccounts   []ag_solanago.PublicKey
	User                        ag_solanago.PublicKey
	UserReceiptTokenAccount     ag_solanago.PublicKey
	UserFundAccount             ag_solanago.PublicKey
	BatchId                     uint64
	RequestId                   uint64
	RequestedReceiptTokenAmount uint64
}

func (obj UserRequestedWithdrawalFromFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `UpdatedUserRewardAccounts` param:
	err = encoder.Encode(obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `RequestedReceiptTokenAmount` param:
	err = encoder.Encode(obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRequestedWithdrawalFromFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `UpdatedUserRewardAccounts`:
	err = decoder.Decode(&obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `RequestedReceiptTokenAmount`:
	err = decoder.Decode(&obj.RequestedReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserRewardAccount struct {
	DataVersion        uint16
	Bump               uint8
	ReceiptTokenMint   ag_solanago.PublicKey
	User               ag_solanago.PublicKey
	NumUserRewardPools uint8
	MaxUserRewardPools uint8
	Padding            [11]uint8
	UserRewardPools1   [4]UserRewardPool
}

func (obj UserRewardAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DataVersion` param:
	err = encoder.Encode(obj.DataVersion)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `NumUserRewardPools` param:
	err = encoder.Encode(obj.NumUserRewardPools)
	if err != nil {
		return err
	}
	// Serialize `MaxUserRewardPools` param:
	err = encoder.Encode(obj.MaxUserRewardPools)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `UserRewardPools1` param:
	err = encoder.Encode(obj.UserRewardPools1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRewardAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DataVersion`:
	err = decoder.Decode(&obj.DataVersion)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `NumUserRewardPools`:
	err = decoder.Decode(&obj.NumUserRewardPools)
	if err != nil {
		return err
	}
	// Deserialize `MaxUserRewardPools`:
	err = decoder.Decode(&obj.MaxUserRewardPools)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `UserRewardPools1`:
	err = decoder.Decode(&obj.UserRewardPools1)
	if err != nil {
		return err
	}
	return nil
}

type UserRewardPool struct {
	TokenAllocatedAmount TokenAllocatedAmount
	Contribution         ag_binary.Uint128
	UpdatedSlot          uint64
	RewardPoolId         uint8
	NumRewardSettlements uint8
	Padding              [6]uint8
	Reserved             [8]uint64
	RewardSettlements1   [16]UserRewardSettlement
}

func (obj UserRewardPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenAllocatedAmount` param:
	err = encoder.Encode(obj.TokenAllocatedAmount)
	if err != nil {
		return err
	}
	// Serialize `Contribution` param:
	err = encoder.Encode(obj.Contribution)
	if err != nil {
		return err
	}
	// Serialize `UpdatedSlot` param:
	err = encoder.Encode(obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Serialize `RewardPoolId` param:
	err = encoder.Encode(obj.RewardPoolId)
	if err != nil {
		return err
	}
	// Serialize `NumRewardSettlements` param:
	err = encoder.Encode(obj.NumRewardSettlements)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `RewardSettlements1` param:
	err = encoder.Encode(obj.RewardSettlements1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRewardPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenAllocatedAmount`:
	err = decoder.Decode(&obj.TokenAllocatedAmount)
	if err != nil {
		return err
	}
	// Deserialize `Contribution`:
	err = decoder.Decode(&obj.Contribution)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedSlot`:
	err = decoder.Decode(&obj.UpdatedSlot)
	if err != nil {
		return err
	}
	// Deserialize `RewardPoolId`:
	err = decoder.Decode(&obj.RewardPoolId)
	if err != nil {
		return err
	}
	// Deserialize `NumRewardSettlements`:
	err = decoder.Decode(&obj.NumRewardSettlements)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `RewardSettlements1`:
	err = decoder.Decode(&obj.RewardSettlements1)
	if err != nil {
		return err
	}
	return nil
}

type UserRewardSettlement struct {
	RewardId            uint16
	Padding             [6]uint8
	SettledAmount       uint64
	SettledContribution ag_binary.Uint128
	SettledSlot         uint64
	ClaimedAmount       uint64
}

func (obj UserRewardSettlement) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardId` param:
	err = encoder.Encode(obj.RewardId)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `SettledAmount` param:
	err = encoder.Encode(obj.SettledAmount)
	if err != nil {
		return err
	}
	// Serialize `SettledContribution` param:
	err = encoder.Encode(obj.SettledContribution)
	if err != nil {
		return err
	}
	// Serialize `SettledSlot` param:
	err = encoder.Encode(obj.SettledSlot)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAmount` param:
	err = encoder.Encode(obj.ClaimedAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserRewardSettlement) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardId`:
	err = decoder.Decode(&obj.RewardId)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `SettledAmount`:
	err = decoder.Decode(&obj.SettledAmount)
	if err != nil {
		return err
	}
	// Deserialize `SettledContribution`:
	err = decoder.Decode(&obj.SettledContribution)
	if err != nil {
		return err
	}
	// Deserialize `SettledSlot`:
	err = decoder.Decode(&obj.SettledSlot)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAmount`:
	err = decoder.Decode(&obj.ClaimedAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserTransferredReceiptToken struct {
	ReceiptTokenMint               ag_solanago.PublicKey
	FundAccount                    ag_solanago.PublicKey
	UpdatedUserRewardAccounts      []ag_solanago.PublicKey
	Source                         ag_solanago.PublicKey
	SourceReceiptTokenAccount      ag_solanago.PublicKey
	SourceFundAccount              *ag_solanago.PublicKey `bin:"optional"`
	Destination                    ag_solanago.PublicKey
	DestinationReceiptTokenAccount ag_solanago.PublicKey
	DestinationFundAccount         *ag_solanago.PublicKey `bin:"optional"`
	TransferredReceiptTokenAmount  uint64
}

func (obj UserTransferredReceiptToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `UpdatedUserRewardAccounts` param:
	err = encoder.Encode(obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Serialize `Source` param:
	err = encoder.Encode(obj.Source)
	if err != nil {
		return err
	}
	// Serialize `SourceReceiptTokenAccount` param:
	err = encoder.Encode(obj.SourceReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `SourceFundAccount` param (optional):
	{
		if obj.SourceFundAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SourceFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Destination` param:
	err = encoder.Encode(obj.Destination)
	if err != nil {
		return err
	}
	// Serialize `DestinationReceiptTokenAccount` param:
	err = encoder.Encode(obj.DestinationReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `DestinationFundAccount` param (optional):
	{
		if obj.DestinationFundAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.DestinationFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `TransferredReceiptTokenAmount` param:
	err = encoder.Encode(obj.TransferredReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserTransferredReceiptToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedUserRewardAccounts`:
	err = decoder.Decode(&obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	// Deserialize `Source`:
	err = decoder.Decode(&obj.Source)
	if err != nil {
		return err
	}
	// Deserialize `SourceReceiptTokenAccount`:
	err = decoder.Decode(&obj.SourceReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `SourceFundAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SourceFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Destination`:
	err = decoder.Decode(&obj.Destination)
	if err != nil {
		return err
	}
	// Deserialize `DestinationReceiptTokenAccount`:
	err = decoder.Decode(&obj.DestinationReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `DestinationFundAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.DestinationFundAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `TransferredReceiptTokenAmount`:
	err = decoder.Decode(&obj.TransferredReceiptTokenAmount)
	if err != nil {
		return err
	}
	return nil
}

type UserUpdatedRewardPool struct {
	ReceiptTokenMint          ag_solanago.PublicKey
	UpdatedUserRewardAccounts []ag_solanago.PublicKey
}

func (obj UserUpdatedRewardPool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `UpdatedUserRewardAccounts` param:
	err = encoder.Encode(obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserUpdatedRewardPool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedUserRewardAccounts`:
	err = decoder.Decode(&obj.UpdatedUserRewardAccounts)
	if err != nil {
		return err
	}
	return nil
}

type UserWithdrewFromFund struct {
	ReceiptTokenMint           ag_solanago.PublicKey
	FundAccount                ag_solanago.PublicKey
	SupportedTokenMint         *ag_solanago.PublicKey `bin:"optional"`
	User                       ag_solanago.PublicKey
	UserReceiptTokenAccount    ag_solanago.PublicKey
	UserFundAccount            ag_solanago.PublicKey
	UserSupportedTokenAccount  *ag_solanago.PublicKey `bin:"optional"`
	FundWithdrawalBatchAccount ag_solanago.PublicKey
	BatchId                    uint64
	RequestId                  uint64
	BurntReceiptTokenAmount    uint64
	ReturnedReceiptTokenAmount uint64
	WithdrawnAmount            uint64
	DeductedFeeAmount          uint64
}

func (obj UserWithdrewFromFund) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ReceiptTokenMint` param:
	err = encoder.Encode(obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Serialize `FundAccount` param:
	err = encoder.Encode(obj.FundAccount)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `User` param:
	err = encoder.Encode(obj.User)
	if err != nil {
		return err
	}
	// Serialize `UserReceiptTokenAccount` param:
	err = encoder.Encode(obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `UserFundAccount` param:
	err = encoder.Encode(obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Serialize `UserSupportedTokenAccount` param (optional):
	{
		if obj.UserSupportedTokenAccount == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.UserSupportedTokenAccount)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `FundWithdrawalBatchAccount` param:
	err = encoder.Encode(obj.FundWithdrawalBatchAccount)
	if err != nil {
		return err
	}
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `BurntReceiptTokenAmount` param:
	err = encoder.Encode(obj.BurntReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `ReturnedReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReturnedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `WithdrawnAmount` param:
	err = encoder.Encode(obj.WithdrawnAmount)
	if err != nil {
		return err
	}
	// Serialize `DeductedFeeAmount` param:
	err = encoder.Encode(obj.DeductedFeeAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *UserWithdrewFromFund) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ReceiptTokenMint`:
	err = decoder.Decode(&obj.ReceiptTokenMint)
	if err != nil {
		return err
	}
	// Deserialize `FundAccount`:
	err = decoder.Decode(&obj.FundAccount)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return err
	}
	// Deserialize `UserReceiptTokenAccount`:
	err = decoder.Decode(&obj.UserReceiptTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserFundAccount`:
	err = decoder.Decode(&obj.UserFundAccount)
	if err != nil {
		return err
	}
	// Deserialize `UserSupportedTokenAccount` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.UserSupportedTokenAccount)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `FundWithdrawalBatchAccount`:
	err = decoder.Decode(&obj.FundWithdrawalBatchAccount)
	if err != nil {
		return err
	}
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `BurntReceiptTokenAmount`:
	err = decoder.Decode(&obj.BurntReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `ReturnedReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReturnedReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawnAmount`:
	err = decoder.Decode(&obj.WithdrawnAmount)
	if err != nil {
		return err
	}
	// Deserialize `DeductedFeeAmount`:
	err = decoder.Decode(&obj.DeductedFeeAmount)
	if err != nil {
		return err
	}
	return nil
}

type WithdrawalBatch struct {
	BatchId            uint64
	NumRequests        uint64
	ReceiptTokenAmount uint64
	EnqueuedAt         int64
	Reserved           [32]uint8
}

func (obj WithdrawalBatch) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `NumRequests` param:
	err = encoder.Encode(obj.NumRequests)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `EnqueuedAt` param:
	err = encoder.Encode(obj.EnqueuedAt)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawalBatch) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `NumRequests`:
	err = decoder.Decode(&obj.NumRequests)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `EnqueuedAt`:
	err = decoder.Decode(&obj.EnqueuedAt)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type WithdrawalRequest struct {
	BatchId               uint64
	RequestId             uint64
	ReceiptTokenAmount    uint64
	CreatedAt             int64
	SupportedTokenMint    *ag_solanago.PublicKey `bin:"optional"`
	SupportedTokenProgram *ag_solanago.PublicKey `bin:"optional"`
	Reserved              [14]uint8
}

func (obj WithdrawalRequest) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BatchId` param:
	err = encoder.Encode(obj.BatchId)
	if err != nil {
		return err
	}
	// Serialize `RequestId` param:
	err = encoder.Encode(obj.RequestId)
	if err != nil {
		return err
	}
	// Serialize `ReceiptTokenAmount` param:
	err = encoder.Encode(obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `SupportedTokenMint` param (optional):
	{
		if obj.SupportedTokenMint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `SupportedTokenProgram` param (optional):
	{
		if obj.SupportedTokenProgram == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SupportedTokenProgram)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawalRequest) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BatchId`:
	err = decoder.Decode(&obj.BatchId)
	if err != nil {
		return err
	}
	// Deserialize `RequestId`:
	err = decoder.Decode(&obj.RequestId)
	if err != nil {
		return err
	}
	// Deserialize `ReceiptTokenAmount`:
	err = decoder.Decode(&obj.ReceiptTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `SupportedTokenMint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenMint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `SupportedTokenProgram` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SupportedTokenProgram)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}
