// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Restaking"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_AdminInitializeFundAccounts = ag_binary.TypeID([8]byte{76, 41, 218, 247, 6, 34, 4, 139})

	Instruction_AdminInitializeReceiptTokenMintAuthorityAndExtraAccountMetaList = ag_binary.TypeID([8]byte{43, 34, 13, 49, 167, 88, 235, 235})

	Instruction_AdminInitializeRewardAccounts = ag_binary.TypeID([8]byte{126, 178, 159, 64, 84, 95, 193, 216})

	Instruction_AdminUpdateReceiptTokenMintExtraAccountMetaList = ag_binary.TypeID([8]byte{184, 10, 169, 185, 56, 247, 108, 110})

	Instruction_AdminUpdateRewardAccountsIfNeeded = ag_binary.TypeID([8]byte{50, 205, 30, 87, 145, 172, 46, 107})

	Instruction_EmptyIx = ag_binary.TypeID([8]byte{183, 166, 10, 113, 199, 153, 79, 198})

	Instruction_FundManagerAddReward = ag_binary.TypeID([8]byte{26, 6, 104, 77, 57, 237, 13, 5})

	Instruction_FundManagerAddRewardPool = ag_binary.TypeID([8]byte{222, 241, 120, 225, 5, 76, 175, 136})

	Instruction_FundManagerAddRewardPoolHolder = ag_binary.TypeID([8]byte{79, 160, 90, 79, 137, 135, 197, 134})

	Instruction_FundManagerAddSupportedToken = ag_binary.TypeID([8]byte{0, 137, 153, 52, 179, 163, 4, 20})

	Instruction_FundManagerCloseRewardPool = ag_binary.TypeID([8]byte{159, 24, 238, 47, 253, 39, 6, 30})

	Instruction_FundManagerSettleReward = ag_binary.TypeID([8]byte{105, 92, 118, 15, 173, 135, 98, 86})

	Instruction_FundManagerUpdateBatchProcessingThreshold = ag_binary.TypeID([8]byte{190, 210, 254, 241, 45, 69, 194, 5})

	Instruction_FundManagerUpdateSolCapacityAmount = ag_binary.TypeID([8]byte{162, 165, 195, 13, 27, 108, 59, 4})

	Instruction_FundManagerUpdateSolWithdrawalFeeRate = ag_binary.TypeID([8]byte{22, 138, 88, 94, 187, 145, 104, 203})

	Instruction_FundManagerUpdateSupportedTokenCapacityAmount = ag_binary.TypeID([8]byte{97, 20, 182, 134, 20, 5, 113, 221})

	Instruction_FundManagerUpdateWithdrawalEnabledFlag = ag_binary.TypeID([8]byte{87, 61, 71, 23, 65, 238, 26, 92})

	Instruction_OperatorLogMessage = ag_binary.TypeID([8]byte{104, 51, 132, 76, 54, 74, 57, 199})

	Instruction_OperatorProcessFundWithdrawalJob = ag_binary.TypeID([8]byte{66, 50, 23, 27, 231, 136, 186, 106})

	Instruction_OperatorUpdatePrices = ag_binary.TypeID([8]byte{127, 184, 148, 68, 205, 207, 127, 48})

	Instruction_OperatorUpdateRewardPools = ag_binary.TypeID([8]byte{50, 3, 240, 113, 3, 164, 2, 41})

	Instruction_UserCancelWithdrawalRequest = ag_binary.TypeID([8]byte{187, 80, 45, 65, 239, 189, 78, 102})

	Instruction_UserClaimRewards = ag_binary.TypeID([8]byte{8, 211, 145, 71, 169, 22, 80, 33})

	Instruction_UserDepositSol = ag_binary.TypeID([8]byte{9, 201, 63, 79, 105, 75, 147, 47})

	Instruction_UserDepositSupportedToken = ag_binary.TypeID([8]byte{139, 84, 137, 218, 229, 151, 183, 154})

	Instruction_UserInitializeRewardAccounts = ag_binary.TypeID([8]byte{65, 9, 192, 93, 49, 248, 44, 138})

	Instruction_UserRequestWithdrawal = ag_binary.TypeID([8]byte{147, 199, 177, 14, 195, 86, 62, 134})

	Instruction_UserUpdateFundAccountsIfNeeded = ag_binary.TypeID([8]byte{14, 238, 3, 23, 125, 220, 244, 147})

	Instruction_UserUpdateRewardAccountsIfNeeded = ag_binary.TypeID([8]byte{172, 95, 89, 116, 156, 51, 27, 47})

	Instruction_UserUpdateRewardPools = ag_binary.TypeID([8]byte{89, 143, 243, 236, 73, 81, 158, 100})

	Instruction_UserWithdraw = ag_binary.TypeID([8]byte{53, 254, 26, 242, 119, 237, 73, 33})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_AdminInitializeFundAccounts:
		return "AdminInitializeFundAccounts"
	case Instruction_AdminInitializeReceiptTokenMintAuthorityAndExtraAccountMetaList:
		return "AdminInitializeReceiptTokenMintAuthorityAndExtraAccountMetaList"
	case Instruction_AdminInitializeRewardAccounts:
		return "AdminInitializeRewardAccounts"
	case Instruction_AdminUpdateReceiptTokenMintExtraAccountMetaList:
		return "AdminUpdateReceiptTokenMintExtraAccountMetaList"
	case Instruction_AdminUpdateRewardAccountsIfNeeded:
		return "AdminUpdateRewardAccountsIfNeeded"
	case Instruction_EmptyIx:
		return "EmptyIx"
	case Instruction_FundManagerAddReward:
		return "FundManagerAddReward"
	case Instruction_FundManagerAddRewardPool:
		return "FundManagerAddRewardPool"
	case Instruction_FundManagerAddRewardPoolHolder:
		return "FundManagerAddRewardPoolHolder"
	case Instruction_FundManagerAddSupportedToken:
		return "FundManagerAddSupportedToken"
	case Instruction_FundManagerCloseRewardPool:
		return "FundManagerCloseRewardPool"
	case Instruction_FundManagerSettleReward:
		return "FundManagerSettleReward"
	case Instruction_FundManagerUpdateBatchProcessingThreshold:
		return "FundManagerUpdateBatchProcessingThreshold"
	case Instruction_FundManagerUpdateSolCapacityAmount:
		return "FundManagerUpdateSolCapacityAmount"
	case Instruction_FundManagerUpdateSolWithdrawalFeeRate:
		return "FundManagerUpdateSolWithdrawalFeeRate"
	case Instruction_FundManagerUpdateSupportedTokenCapacityAmount:
		return "FundManagerUpdateSupportedTokenCapacityAmount"
	case Instruction_FundManagerUpdateWithdrawalEnabledFlag:
		return "FundManagerUpdateWithdrawalEnabledFlag"
	case Instruction_OperatorLogMessage:
		return "OperatorLogMessage"
	case Instruction_OperatorProcessFundWithdrawalJob:
		return "OperatorProcessFundWithdrawalJob"
	case Instruction_OperatorUpdatePrices:
		return "OperatorUpdatePrices"
	case Instruction_OperatorUpdateRewardPools:
		return "OperatorUpdateRewardPools"
	case Instruction_UserCancelWithdrawalRequest:
		return "UserCancelWithdrawalRequest"
	case Instruction_UserClaimRewards:
		return "UserClaimRewards"
	case Instruction_UserDepositSol:
		return "UserDepositSol"
	case Instruction_UserDepositSupportedToken:
		return "UserDepositSupportedToken"
	case Instruction_UserInitializeRewardAccounts:
		return "UserInitializeRewardAccounts"
	case Instruction_UserRequestWithdrawal:
		return "UserRequestWithdrawal"
	case Instruction_UserUpdateFundAccountsIfNeeded:
		return "UserUpdateFundAccountsIfNeeded"
	case Instruction_UserUpdateRewardAccountsIfNeeded:
		return "UserUpdateRewardAccountsIfNeeded"
	case Instruction_UserUpdateRewardPools:
		return "UserUpdateRewardPools"
	case Instruction_UserWithdraw:
		return "UserWithdraw"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "admin_initialize_fund_accounts", Type: (*AdminInitializeFundAccounts)(nil),
		},
		{
			Name: "admin_initialize_receipt_token_mint_authority_and_extra_account_meta_list", Type: (*AdminInitializeReceiptTokenMintAuthorityAndExtraAccountMetaList)(nil),
		},
		{
			Name: "admin_initialize_reward_accounts", Type: (*AdminInitializeRewardAccounts)(nil),
		},
		{
			Name: "admin_update_receipt_token_mint_extra_account_meta_list", Type: (*AdminUpdateReceiptTokenMintExtraAccountMetaList)(nil),
		},
		{
			Name: "admin_update_reward_accounts_if_needed", Type: (*AdminUpdateRewardAccountsIfNeeded)(nil),
		},
		{
			Name: "empty_ix", Type: (*EmptyIx)(nil),
		},
		{
			Name: "fund_manager_add_reward", Type: (*FundManagerAddReward)(nil),
		},
		{
			Name: "fund_manager_add_reward_pool", Type: (*FundManagerAddRewardPool)(nil),
		},
		{
			Name: "fund_manager_add_reward_pool_holder", Type: (*FundManagerAddRewardPoolHolder)(nil),
		},
		{
			Name: "fund_manager_add_supported_token", Type: (*FundManagerAddSupportedToken)(nil),
		},
		{
			Name: "fund_manager_close_reward_pool", Type: (*FundManagerCloseRewardPool)(nil),
		},
		{
			Name: "fund_manager_settle_reward", Type: (*FundManagerSettleReward)(nil),
		},
		{
			Name: "fund_manager_update_batch_processing_threshold", Type: (*FundManagerUpdateBatchProcessingThreshold)(nil),
		},
		{
			Name: "fund_manager_update_sol_capacity_amount", Type: (*FundManagerUpdateSolCapacityAmount)(nil),
		},
		{
			Name: "fund_manager_update_sol_withdrawal_fee_rate", Type: (*FundManagerUpdateSolWithdrawalFeeRate)(nil),
		},
		{
			Name: "fund_manager_update_supported_token_capacity_amount", Type: (*FundManagerUpdateSupportedTokenCapacityAmount)(nil),
		},
		{
			Name: "fund_manager_update_withdrawal_enabled_flag", Type: (*FundManagerUpdateWithdrawalEnabledFlag)(nil),
		},
		{
			Name: "operator_log_message", Type: (*OperatorLogMessage)(nil),
		},
		{
			Name: "operator_process_fund_withdrawal_job", Type: (*OperatorProcessFundWithdrawalJob)(nil),
		},
		{
			Name: "operator_update_prices", Type: (*OperatorUpdatePrices)(nil),
		},
		{
			Name: "operator_update_reward_pools", Type: (*OperatorUpdateRewardPools)(nil),
		},
		{
			Name: "user_cancel_withdrawal_request", Type: (*UserCancelWithdrawalRequest)(nil),
		},
		{
			Name: "user_claim_rewards", Type: (*UserClaimRewards)(nil),
		},
		{
			Name: "user_deposit_sol", Type: (*UserDepositSol)(nil),
		},
		{
			Name: "user_deposit_supported_token", Type: (*UserDepositSupportedToken)(nil),
		},
		{
			Name: "user_initialize_reward_accounts", Type: (*UserInitializeRewardAccounts)(nil),
		},
		{
			Name: "user_request_withdrawal", Type: (*UserRequestWithdrawal)(nil),
		},
		{
			Name: "user_update_fund_accounts_if_needed", Type: (*UserUpdateFundAccountsIfNeeded)(nil),
		},
		{
			Name: "user_update_reward_accounts_if_needed", Type: (*UserUpdateRewardAccountsIfNeeded)(nil),
		},
		{
			Name: "user_update_reward_pools", Type: (*UserUpdateRewardPools)(nil),
		},
		{
			Name: "user_withdraw", Type: (*UserWithdraw)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}

func DecodeInstructions(message *ag_solanago.Message) (instructions []*Instruction, err error) {
	for _, ins := range message.Instructions {
		var programID ag_solanago.PublicKey
		if programID, err = message.Program(ins.ProgramIDIndex); err != nil {
			return
		}
		if !programID.Equals(ProgramID) {
			continue
		}
		var accounts []*ag_solanago.AccountMeta
		if accounts, err = ins.ResolveInstructionAccounts(message); err != nil {
			return
		}
		var insDecoded *Instruction
		if insDecoded, err = decodeInstruction(accounts, ins.Data); err != nil {
			return
		}
		instructions = append(instructions, insDecoded)
	}
	return
}
