{
    "version": "0.0.0",
    "name": "token_metadata",
    "docs": [
        "This is a very simple program designed to allow metadata tagging to a given mint,",
        "with an update authority that can change that metadata going forward. ",
        "Read more: https://github.com/metaplex-foundation/metaplex/tree/master/rust/token-metadata/program"
    ],
    "ref": "https://github.com/metaplex-foundation/metaplex/blob/4a1b7d2f674013bc8bd3149294c66b03b27120d0/rust/token-metadata/program/src/instruction.rs",
    "instructions": [
        {
            "name": "CreateMetadataAccount",
            "docs": [
                "Create Metadata object."
            ],
            "accounts": [
                {
                    "name": "key",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Metadata key (pda of ['metadata', program id, mint id])"
                    ]
                },
                {
                    "name": "mint",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Mint of token asset"
                    ]
                },
                {
                    "name": "mintAuthority",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Mint authority"
                    ]
                },
                {
                    "name": "payer",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "payer"
                    ]
                },
                {
                    "name": "updateAuthorityInfo",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "update authority info"
                    ]
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "System program"
                    ]
                },
                {
                    "name": "rentInfo",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Rent info"
                    ]
                }

            ],
            "args": [
                {
                    "name": "args",
                    "type":
                    {
                        "defined": "CreateMetadataAccountArgs"
                    },
                    "docs": [
                        ""
                    ]
                }

            ]
        },
        {
            "name": "UpdateMetadataAccount",
            "docs": [
                "Update a Metadata"
            ],
            "accounts": [
                {
                    "name": "metadataAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Metadata account"
                    ]
                },
                {
                    "name": "updateAuthority",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Update authority key"
                    ]
                }

            ],
            "args": [
                {
                    "name": "args",
                    "type":
                    {
                        "defined": "UpdateMetadataAccountArgs"
                    },
                    "docs": [
                        "Args for update call"
                    ]
                }

            ]
        },
        {
            "name": "DeprecatedCreateMasterEdition",
            "docs": [
                "Register a Metadata as a Master Edition V1, which means Editions can be minted.",
                "Henceforth, no further tokens will be mintable from this primary mint. Will throw an error if more than one",
                "token exists, and will throw an error if less than one token exists in this primary mint."
            ],
            "accounts": [
                {
                    "name": "editionV1Account",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Unallocated edition V1 account with address as pda of ['metadata', program id, mint, 'edition']"
                    ]
                },
                {
                    "name": "metadataMint",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Metadata mint"
                    ]
                },
                {
                    "name": "printingMint",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Printing mint - A mint you control that can mint tokens that can be exchanged for limited editions of your",
                        "master edition via the MintNewEditionFromMasterEditionViaToken endpoint"
                    ]
                },
                {
                    "name": "oneTimeAuthPrintingMint",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "One time authorization printing mint - A mint you control that prints tokens that gives the bearer permission to mint any",
                        "number of tokens from the printing mint one time via an endpoint with the token-metadata program for your metadata. Also burns the token."
                    ]
                },
                {
                    "name": "updateAuthority",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Current Update authority key"
                    ]
                },
                {
                    "name": "printingMintAuthority",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Printing mint authority - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY."
                    ]
                },
                {
                    "name": "printingMintAuthorityOnMetadataMint",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"
                    ]
                },
                {
                    "name": "metadata",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Metadata account"
                    ]
                },
                {
                    "name": "payer",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "payer"
                    ]
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token program"
                    ]
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "System program"
                    ]
                },
                {
                    "name": "rentInfo",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Rent info"
                    ]
                },
                {
                    "name": "oneTimeAuthPrintingMintAuthority",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "One time authorization printing mint authority - must be provided if using max supply. THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY."
                    ]
                }

            ],
            "args": [
                {
                    "name": "args",
                    "type":
                    {
                        "defined": "CreateMasterEditionArgs"
                    },
                    "docs": [
                        ""
                    ]
                }

            ]
        },
        {
            "name": "DeprecatedMintNewEditionFromMasterEditionViaPrintingToken",
            "docs": [
                "Given an authority token minted by the Printing mint of a master edition, and a brand new non-metadata-ed mint with one token",
                "make a new Metadata + Edition that is a child of the master edition denoted by this authority token."
            ],
            "accounts": [
                {
                    "name": "newMetadata",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "New Metadata key (pda of ['metadata', program id, mint id])"
                    ]
                },
                {
                    "name": "newEditionV1",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "New Edition V1 (pda of ['metadata', program id, mint id, 'edition'])"
                    ]
                },
                {
                    "name": "masterRecordEditionV1",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition'])"
                    ]
                },
                {
                    "name": "mint",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY"
                    ]
                },
                {
                    "name": "mintAuthority",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Mint authority of new mint"
                    ]
                },
                {
                    "name": "printingMint",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Printing Mint of master record edition"
                    ]
                },
                {
                    "name": "tokenAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Token account containing Printing mint token to be transferred"
                    ]
                },
                {
                    "name": "editionPDA",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Edition pda to mark creation - will be checked for pre-existence.",
                        "(pda of ['metadata', program id, master mint id, edition_number])"
                    ]
                },
                {
                    "name": "burnAuthority",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Burn authority for this token"
                    ]
                },
                {
                    "name": "payer",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "payer"
                    ]
                },
                {
                    "name": "updateAuthority",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "update authority info for new metadata account"
                    ]
                },
                {
                    "name": "masterRecordMetadata",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Master record metadata account"
                    ]
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token program"
                    ]
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "System program"
                    ]
                },
                {
                    "name": "rentInfo",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Rent info"
                    ]
                },
                {
                    "name": "reservationList",
                    "isMut": true,
                    "isSigner": false,
                    "optional": true,
                    "docs": [
                        "Reservation List - If present, and you are on this list, you can get",
                        "an edition number given by your position on the list."
                    ]
                }

            ],
            "args": []
        },
        {
            "name": "UpdatePrimarySaleHappenedViaToken",
            "docs": [
                "Allows updating the primary sale boolean on Metadata solely through owning an account",
                "containing a token from the metadata's mint and being a signer on this transaction.",
                "A sort of limited authority for limited update capability that is required for things like",
                "Metaplex to work without needing full authority passing."
            ],
            "accounts": [
                {
                    "name": "metadata",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Metadata key (pda of ['metadata', program id, mint id])"
                    ]
                },
                {
                    "name": "owner",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Owner on the token account"
                    ]
                },
                {
                    "name": "container",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Account containing tokens from the metadata's mint"
                    ]
                }

            ],
            "args": []
        },
        {
            "name": "DeprecatedSetReservationList",
            "docs": [
                "Reserve up to 200 editions in sequence for up to 200 addresses in an existing reservation PDA, which can then be used later by",
                "redeemers who have printing tokens as a reservation to get a specific edition number",
                "as opposed to whatever one is currently listed on the master edition. Used by Auction Manager",
                "to guarantee printing order on bid redemption. AM will call whenever the first person redeems a",
                "printing bid to reserve the whole block",
                "of winners in order and then each winner when they get their token submits their mint and account",
                "with the pda that was created by that first bidder - the token metadata can then cross reference",
                "these people with the list and see that bidder A gets edition #2, so on and so forth.",
                "",
                "NOTE: If you have more than 20 addresses in a reservation list, this may be called multiple times to build up the list,",
                "otherwise, it simply wont fit in one transaction. Only provide a total_reservation argument on the first call, which will",
                "allocate the edition space, and in follow up calls this will specifically be unnecessary (and indeed will error.)"
            ],
            "accounts": [
                {
                    "name": "masterEditionV1",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Master Edition V1 key (pda of ['metadata', program id, mint id, 'edition'])"
                    ]
                },
                {
                    "name": "reservationList",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "PDA for ReservationList of ['metadata', program id, master edition key, 'reservation', resource-key]"
                    ]
                },
                {
                    "name": "resource",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "The resource you tied the reservation list too"
                    ]
                }

            ],
            "args": [
                {
                    "name": "args",
                    "type":
                    {
                        "defined": "SetReservationListArgs"
                    },
                    "docs": [
                        ""
                    ]
                }

            ]
        }







    ],
    "accounts": [],
    "state":
    {},
    "types": [
        {
            "name": "CreateMetadataAccountArgs",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "data",
                        "type":
                        {
                            "defined": "Data"
                        },
                        "docs": [
                            "Note that unique metadatas are disabled for now."
                        ]
                    },
                    {
                        "name": "is_mutable",
                        "type": "bool",
                        "docs": [
                            "Whether you want your metadata to be updateable in the future."
                        ]
                    }

                ]
            }
        },
        {
            "name": "Data",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "name",
                        "type": "string",
                        "docs": [
                            "The name of the asset"
                        ]
                    },
                    {
                        "name": "symbol",
                        "type": "string",
                        "docs": [
                            "The symbol for the asset"
                        ]
                    },
                    {
                        "name": "uri",
                        "type": "string",
                        "docs": [
                            "URI pointing to JSON representing the asset"
                        ]
                    },
                    {
                        "name": "seller_fee_basis_points",
                        "type": "u16",
                        "docs": [
                            "Royalty basis points that goes to creators in secondary sales (0-10000)"
                        ]
                    },
                    {
                        "name": "creators",
                        "type":
                        {
                            "option":
                            {
                                "vec":
                                {
                                    "defined": "Creator"
                                }
                            }
                        },
                        "docs": [
                            "Array of creators, optional"
                        ]
                    }

                ]
            }
        },
        {
            "name": "Creator",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "address",
                        "type": "publicKey",
                        "docs": [
                            ""
                        ]
                    },
                    {
                        "name": "verified",
                        "type": "bool",
                        "docs": [
                            ""
                        ]
                    },
                    {
                        "name": "share",
                        "type": "u8",
                        "docs": [
                            "In percentages, NOT basis points ;) Watch out!"
                        ]
                    }

                ]
            }
        },
        {
            "name": "UpdateMetadataAccountArgs",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "data",
                        "type":
                        {
                            "option":
                            {
                                "defined": "Data"
                            }
                        },
                        "docs": [
                            ""
                        ]
                    },
                    {
                        "name": "update_authority",
                        "type":
                        {
                            "option": "publicKey"
                        },
                        "docs": [
                            ""
                        ]
                    },
                    {
                        "name": "primary_sale_happened",
                        "type":
                        {
                            "option": "bool"
                        },
                        "docs": [
                            ""
                        ]
                    }

                ]
            }
        },
        {
            "name": "CreateMasterEditionArgs",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "max_supply",
                        "type":
                        {
                            "option": "u64"
                        },
                        "docs": [
                            "If set, means that no more than this number of editions can ever be minted. This is immutable."
                        ]
                    }

                ]
            }
        },
        {
            "name": "SetReservationListArgs",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "reservations",
                        "type":
                        {
                            "vec":
                            {
                                "defined": "Reservation"
                            }
                        },
                        "docs": [
                            "If set, means that no more than this number of editions can ever be minted. This is immutable."
                        ]
                    },
                    {
                        "name": "total_reservation_spots",
                        "type":
                        {
                            "option": "u64"
                        },
                        "docs": [
                            "should only be present on the very first call to set reservation list."
                        ]
                    },
                    {
                        "name": "offset",
                        "type": "u64",
                        "docs": [
                            "Where in the reservation list you want to insert this slice of reservations"
                        ]
                    },
                    {
                        "name": "total_spot_offset",
                        "type": "u64",
                        "docs": [
                            "What the total spot offset is in the reservation list from the beginning to your slice of reservations.",
                            "So if is going to be 4 total editions eventually reserved between your slice and the beginning of the array,",
                            "split between 2 reservation entries, the offset variable above would be \"2\" since you start at entry 2 in 0 indexed array",
                            "(first 2 taking 0 and 1) and because they each have 2 spots taken, this variable would be 4."
                        ]
                    }

                ]
            }
        },
        {
            "name": "Reservation",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "address",
                        "type": "publicKey",
                        "docs": [
                            ""
                        ]
                    },
                    {
                        "name": "spots_remaining",
                        "type": "u64",
                        "docs": [
                            ""
                        ]
                    },
                    {
                        "name": "total_spots",
                        "type": "u64",
                        "docs": [
                            ""
                        ]
                    }

                ]
            }
        }

    ],
    "events": [],
    "errors": [],
    "metadata":
    {
        "address": ""
    }
}
