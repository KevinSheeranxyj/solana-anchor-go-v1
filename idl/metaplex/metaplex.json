{
    "version": "0.0.0",
    "name": "metaplex",
    "docs": [],
    "ref": "https://github.com/metaplex-foundation/metaplex/blob/397bf8dbdc652d1341c19934e8ddaa97d8edc64f/rust/metaplex/program/src/instruction.rs",
    "instructions": [
        {
            "name": "InitAuctionManager",
            "docs": [
                "Initializes an Auction Manager"
            ],
            "accounts": [
                {
                    "name": "auctionManagerAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Uninitialized, unallocated auction manager account with pda of ['metaplex', auction_key from auction referenced below]"
                    ]
                },
                {
                    "name": "combinedVaultAccount",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Combined vault account with authority set to auction manager account (this will be checked)",
                        "Note in addition that this vault account should have authority set to this program's pda of ['metaplex', auction_key]"
                    ]
                },
                {
                    "name": "auction",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Auction with auctioned item being set to the vault given and authority set to this program's pda of ['metaplex', auction_key]"
                    ]
                },
                {
                    "name": "authority",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Authority for the Auction Manager"
                    ]
                },
                {
                    "name": "payer",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Payer"
                    ]
                },
                {
                    "name": "paymentAccount",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Accept payment account of same token mint as the auction for taking payment for open editions, owner should be auction manager key"
                    ]
                },
                {
                    "name": "store",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Store that this auction manager will belong to"
                    ]
                },
                {
                    "name": "system",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "System sysvar"
                    ]
                },
                {
                    "name": "rent",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Rent sysvar"
                    ]
                }

            ],
            "args": [
                {
                    "name": "args",
                    "type":
                    {
                        "defined": "AuctionManagerSettings"
                    },
                    "docs": []
                }

            ]
        },
        {
            "name": "ValidateSafetyDepositBox",
            "docs": [
                "Validates that a given safety deposit box has in it contents that match the expected WinningConfig in the auction manager.",
                "A stateful call, this will error out if you call it a second time after validation has occurred."
            ],
            "accounts": [
                {
                    "name": "safetyDepositTicket",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Uninitialized Safety deposit validation ticket, pda of seed ['metaplex', program id, auction manager key, safety deposit key]"
                    ]
                },
                {
                    "name": "auctionManager",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Auction manager"
                    ]
                },
                {
                    "name": "metadata",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Metadata account"
                    ]
                },
                {
                    "name": "originalAuthorityLockup",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Original authority lookup - unallocated uninitialized pda account with seed ['metaplex', auction key, metadata key]",
                        "We will store original authority here to return it later."
                    ]
                },
                {
                    "name": "whitelistedCreator",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "A whitelisted creator entry for the store of this auction manager pda of ['metaplex', store key, creator key]",
                        "where creator key comes from creator list of metadata, any will do"
                    ]
                },
                {
                    "name": "auctionManagerStoreKey",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "The auction manager's store key"
                    ]
                },
                {
                    "name": "safetyDepositBox",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Safety deposit box account"
                    ]
                },
                {
                    "name": "safetyDepositBoxStorage",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Safety deposit box storage account where the actual nft token is stored"
                    ]
                },
                {
                    "name": "mintAccount",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Mint account of the token in the safety deposit box"
                    ]
                },
                {
                    "name": "edition",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Edition OR MasterEdition record key",
                        "Remember this does not need to be an existing account (may not be depending on token), just is a pda with seed",
                        "of ['metadata', program id, Printing mint id, 'edition']. - remember PDA is relative to token metadata program."
                    ]
                },
                {
                    "name": "vault",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Vault account"
                    ]
                },
                {
                    "name": "authority",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Authority"
                    ]
                },
                {
                    "name": "authority",
                    "isMut": false,
                    "isSigner": true,
                    "optional": true,
                    "docs": [
                        "[optional] Metadata Authority - Signer only required if doing a full ownership txfer"
                    ]
                },
                {
                    "name": "payer",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Payer"
                    ]
                },
                {
                    "name": "tokenMetadataProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token metadata program"
                    ]
                },
                {
                    "name": "system",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "System"
                    ]
                },
                {
                    "name": "rent",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Rent sysvar"
                    ]
                },
                {
                    "name": "limitedEditionPrintingMint",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Limited edition Printing mint account (optional - only if using sending Limited Edition)"
                    ]
                },
                {
                    "name": "limitedEditionPrintingMintAuthority",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Limited edition Printing mint Authority account, this will TEMPORARILY TRANSFER MINTING AUTHORITY to the auction manager",
                        "until all limited editions have been redeemed for authority tokens."
                    ]
                }

            ],
            "args": []
        },
        {
            "name": "DeprecatedRedeemBid",
            "docs": [
                "Note: This requires that auction manager be in a Running state.",
                "",
                "If an auction is complete, you can redeem your bid for a specific item here. If you are the first to do this,",
                "The auction manager will switch from Running state to Disbursing state. If you are the last, this may change",
                "the auction manager state to Finished provided that no authorities remain to be delegated for Master Edition tokens.",
                "",
                "NOTE: Please note that it is totally possible to redeem a bid 2x - once for a prize you won and once at the RedeemParticipationBid point for an open edition",
                "that comes as a 'token of appreciation' for bidding. They are not mutually exclusive unless explicitly set to be that way."
            ],
            "accounts": [
                {
                    "name": "auctionManager",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Auction manager"
                    ]
                },
                {
                    "name": "safetyDepositTokenStorage",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Safety deposit token storage account"
                    ]
                },
                {
                    "name": "destination",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Destination account."
                    ]
                },
                {
                    "name": "bidRedemptionKey",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Bid redemption key -",
                        "Just a PDA with seed ['metaplex', auction_key, bidder_metadata_key] that we will allocate to mark that you redeemed your bid"
                    ]
                },
                {
                    "name": "safetyDepositBox",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Safety deposit box account"
                    ]
                },
                {
                    "name": "vaultAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Vault account"
                    ]
                },
                {
                    "name": "fractionMint",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Fraction mint of the vault"
                    ]
                },
                {
                    "name": "auction",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Auction"
                    ]
                },
                {
                    "name": "bidderMetadata",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Your BidderMetadata account"
                    ]
                },
                {
                    "name": "bidder",
                    "isMut": false,
                    "isSigner": true,
                    "optional": true,
                    "docs": [
                        "[optional] Your Bidder account - Only needs to be signer if payer does not own"
                    ]
                },
                {
                    "name": "payer",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Payer"
                    ]
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token program"
                    ]
                },
                {
                    "name": "tokenVaultProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token Vault program"
                    ]
                },
                {
                    "name": "tokenMetadataProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token metadata program"
                    ]
                },
                {
                    "name": "store",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Store"
                    ]
                },
                {
                    "name": "system",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "System"
                    ]
                },
                {
                    "name": "rentSysvar",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Rent sysvar"
                    ]
                },
                {
                    "name": "transferAuthority",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "PDA-based Transfer authority to move the tokens from the store to the destination seed ['vault', program_id, vault key]",
                        "but please note that this is a PDA relative to the Token Vault program, with the 'vault' prefix"
                    ]
                },
                {
                    "name": "masterEdition",
                    "isMut": true,
                    "isSigner": false,
                    "optional": true,
                    "docs": [
                        "[optional] Master edition (if Printing type of WinningConfig)"
                    ]
                },
                {
                    "name": "reservationList",
                    "isMut": true,
                    "isSigner": false,
                    "optional": true,
                    "docs": [
                        "[optional] Reservation list PDA ['metadata', program id, master edition key, 'reservation', auction manager key]",
                        "relative to token metadata program (if Printing type of WinningConfig)"
                    ]
                }

            ],
            "args": []
        },
        {
            "name": "RedeemFullRightsTransferBid",
            "docs": [
                "Note: This requires that auction manager be in a Running state.",
                "",
                "If an auction is complete, you can redeem your bid for the actual Master Edition itself if it's for that prize here.",
                "If you are the first to do this, the auction manager will switch from Running state to Disbursing state.",
                "If you are the last, this may change the auction manager state to Finished provided that no authorities remain to be delegated for Master Edition tokens.",
                "",
                "NOTE: Please note that it is totally possible to redeem a bid 2x - once for a prize you won and once at the RedeemParticipationBid point for an open edition",
                "that comes as a 'token of appreciation' for bidding. They are not mutually exclusive unless explicitly set to be that way."
            ],
            "accounts": [
                {
                    "name": "auctionManager",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Auction manager"
                    ]
                },
                {
                    "name": "safetyDepositTokenStorage",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Safety deposit token storage account"
                    ]
                },
                {
                    "name": "destination",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Destination account."
                    ]
                },
                {
                    "name": "bidRedemptionKey",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Bid redemption key -",
                        "Just a PDA with seed ['metaplex', auction_key, bidder_metadata_key] that we will allocate to mark that you redeemed your bid"
                    ]
                },
                {
                    "name": "safetyDepositBox",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Safety deposit box account"
                    ]
                },
                {
                    "name": "vaultAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Vault account"
                    ]
                },
                {
                    "name": "fractionMint",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Fraction mint of the vault"
                    ]
                },
                {
                    "name": "auction",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Auction"
                    ]
                },
                {
                    "name": "bidderMetadata",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Your BidderMetadata account"
                    ]
                },
                {
                    "name": "bidder",
                    "isMut": false,
                    "isSigner": true,
                    "optional": true,
                    "docs": [
                        "Your Bidder account - Only needs to be signer if payer does not own"
                    ]
                },
                {
                    "name": "payer",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Payer"
                    ]
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token program"
                    ]
                },
                {
                    "name": "tokenVaultProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token Vault program"
                    ]
                },
                {
                    "name": "tokenMetadataProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token metadata program"
                    ]
                },
                {
                    "name": "store",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Store"
                    ]
                },
                {
                    "name": "system",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "System"
                    ]
                },
                {
                    "name": "rentSysvar",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Rent sysvar"
                    ]
                },
                {
                    "name": "masterMetadataAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Master Metadata account (pda of ['metadata', program id, Printing mint id]) - remember PDA is relative to token metadata program",
                        "(This account is optional, and will only be used if metadata is unique, otherwise this account key will be ignored no matter it's value)"
                    ]
                },
                {
                    "name": "newAuthority",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "New authority for Master Metadata - If you are taking ownership of a Master Edition in and of itself, or a Limited Edition that isn't newly minted for you during this auction",
                        "ie someone else had it minted for themselves in a prior auction or through some other means, this is the account the metadata for these tokens will be delegated to",
                        "after this transaction. Otherwise this account will be ignored."
                    ]
                },
                {
                    "name": "transferAuthority",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "PDA-based Transfer authority to move the tokens from the store to the destination seed ['vault', program_id, vault key]",
                        "but please note that this is a PDA relative to the Token Vault program, with the 'vault' prefix"
                    ]
                }

            ],
            "args": []
        },
        {
            "name": "DeprecatedRedeemParticipationBid",
            "docs": [
                "Note: This requires that auction manager be in a Running state.",
                "",
                "If an auction is complete, you can redeem your bid for an Open Edition token if it is eligible. If you are the first to do this,",
                "The auction manager will switch from Running state to Disbursing state. If you are the last, this may change",
                "the auction manager state to Finished provided that no authorities remain to be delegated for Master Edition tokens.",
                "",
                "NOTE: Please note that it is totally possible to redeem a bid 2x - once for a prize you won and once at this end point for a open edition",
                "that comes as a 'token of appreciation' for bidding. They are not mutually exclusive unless explicitly set to be that way.",
                "",
                "NOTE: If you are redeeming a newly minted Open Edition, you must actually supply a destination account containing a token from a brand new",
                "mint. We do not provide the token to you. Our job with this action is to christen this mint + token combo as an official Open Edition."
            ],
            "accounts": [
                {
                    "name": "auctionManager",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Auction manager"
                    ]
                },
                {
                    "name": "safetyDepositTokenStorage",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Safety deposit token storage account"
                    ]
                },
                {
                    "name": "destination",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Destination account for limited edition authority token. Must be same mint as master edition Printing mint."
                    ]
                },
                {
                    "name": "bidRedemptionKey",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Bid redemption key -",
                        "Just a PDA with seed ['metaplex', auction_key, bidder_metadata_key] that we will allocate to mark that you redeemed your bid"
                    ]
                },
                {
                    "name": "safetyDepositBox",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Safety deposit box account"
                    ]
                },
                {
                    "name": "vault",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Vault account"
                    ]
                },
                {
                    "name": "fractionMint",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Fraction mint of the vault"
                    ]
                },
                {
                    "name": "auction",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Auction"
                    ]
                },
                {
                    "name": "bidderMetadata",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Your BidderMetadata account"
                    ]
                },
                {
                    "name": "bidder",
                    "isMut": true,
                    "isSigner": true,
                    "optional": true,
                    "docs": [
                        "[optional] Your Bidder account - Only needs to be signer if payer does not own"
                    ]
                },
                {
                    "name": "payer",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Payer"
                    ]
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token program"
                    ]
                },
                {
                    "name": "tokenVaultProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token Vault program"
                    ]
                },
                {
                    "name": "tokenMetadataProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token metadata program"
                    ]
                },
                {
                    "name": "store",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Store"
                    ]
                },
                {
                    "name": "system",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "System"
                    ]
                },
                {
                    "name": "rentSysvar",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Rent sysvar"
                    ]
                },
                {
                    "name": "transferAuthority",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Transfer authority to move the payment in the auction's token_mint coin from the bidder account for the participation_fixed_price",
                        "on the auction manager to the auction manager account itself."
                    ]
                },
                {
                    "name": "acceptPaymentAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "The accept payment account for the auction manager"
                    ]
                },
                {
                    "name": "tokenAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "The token account you will potentially pay for the open edition bid with if necessary"
                    ]
                },
                {
                    "name": "participationNFTPrintingHoldingAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Participation NFT printing holding account (present on participation_state)"
                    ]
                }

            ],
            "args": []
        },
        {
            "name": "StartAuction",
            "docs": [
                "If the auction manager is in Validated state, it can invoke the start command via calling this command here."
            ],
            "accounts": [
                {
                    "name": "auctionManager",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Auction manager"
                    ]
                },
                {
                    "name": "auction",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Auction"
                    ]
                },
                {
                    "name": "auctionManagerAuthority",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Auction manager authority"
                    ]
                },
                {
                    "name": "storeKey",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Store key"
                    ]
                },
                {
                    "name": "auctionProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Auction program"
                    ]
                },
                {
                    "name": "clock",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Clock sysvar"
                    ]
                }

            ],
            "args": []
        },
        {
            "name": "ClaimBid",
            "docs": [
                "If the auction manager is in a Disbursing or Finished state, then this means Auction must be in Ended state.",
                "Then this end point can be used as a signed proxy to use auction manager's authority over the auction to claim bid funds",
                "into the accept payment account on the auction manager for a given bid. Auction has no opinions on how bids are redeemed,",
                "only that they exist, have been paid, and have a winning place. It is up to the implementer of the auction to determine redemption,",
                "and auction manager does this via bid redemption tickets and the vault contract which ensure the user always",
                "can get their NFT once they have paid. Therefore, once they have paid, and the auction is over, the artist can claim",
                "funds at any time without any danger to the user of losing out on their NFT, because the AM will honor their bid with an NFT",
                "at ANY time."
            ],
            "accounts": [
                {
                    "name": "acceptPaymentAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "The accept payment account on the auction manager"
                    ]
                },
                {
                    "name": "bidderPotToken",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "The bidder pot token account"
                    ]
                },
                {
                    "name": "bidderPotPDA",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "The bidder pot pda account [seed of ['auction', program_id, auction key, bidder key] -",
                        "relative to the auction program, not auction manager"
                    ]
                },
                {
                    "name": "auctionManager",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Auction manager"
                    ]
                },
                {
                    "name": "auction",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "The auction"
                    ]
                },
                {
                    "name": "bidderWallet",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "The bidder wallet"
                    ]
                },
                {
                    "name": "tokenMint",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token mint of the auction"
                    ]
                },
                {
                    "name": "vault",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Vault"
                    ]
                },
                {
                    "name": "store",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Store"
                    ]
                },
                {
                    "name": "auctionProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Auction program"
                    ]
                },
                {
                    "name": "clock",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Clock sysvar"
                    ]
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token program"
                    ]
                }

            ],
            "args": []
        },
        {
            "name": "EmptyPaymentAccount",
            "docs": [
                "At any time, the auction manager authority may empty whatever funds are in the accept payment account",
                "on the auction manager. Funds come here from fixed price payments for partipation nfts, and from draining bid payments",
                "from the auction.",
                "",
                "This action specifically takes a given safety deposit box, winning config, and creator on a metadata for the token inside that safety deposit box",
                "and pumps the requisite monies out to that creator as required by the royalties formula.",
                "",
                "It's up to the UI to iterate through all winning configs, all safety deposit boxes in a given winning config tier, and all creators for",
                "each metadata attached to each safety deposit box, to get all the money. Note that one safety deposit box can be used in multiple different winning configs,",
                "but this shouldn't make any difference to this function.",
                "",
                "We designed this function to be called in this loop-like manner because there is a limit to the number of accounts that can",
                "be passed up at once (32) and there may be many more than that easily in a given auction, so it's easier for the implementer to just",
                "loop through and call it, and there is an incentive for them to do so (to get paid.) It's permissionless as well as it",
                "will empty into any destination account owned by the creator that has the proper mint, so anybody can call it.",
                "",
                "For the participation NFT, there is no winning config, but the total is figured by summing the winning bids and subtracting",
                "from the total escrow amount present."
            ],
            "accounts": [
                {
                    "name": "acceptPaymentAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "The accept payment account on the auction manager"
                    ]
                },
                {
                    "name": "destinationAccount",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "The destination account of same mint type as the accept payment account. Must be an Associated Token Account."
                    ]
                },
                {
                    "name": "auctionManager",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Auction manager"
                    ]
                },
                {
                    "name": "payoutTicketInfo",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "Payout ticket info to keep track of this artist or auctioneer's payment, pda of [metaplex, auction manager, winning config index OR 'participation', safety deposit key]"
                    ]
                },
                {
                    "name": "signer",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "payer"
                    ]
                },
                {
                    "name": "metadata",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "The metadata"
                    ]
                },
                {
                    "name": "masterEditionOfMetadata",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "The master edition of the metadata (optional if exists)",
                        "(pda of ['metadata', program id, metadata mint id, 'edition']) - remember PDA is relative to token metadata program"
                    ]
                },
                {
                    "name": "safetyDepositBox",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Safety deposit box account"
                    ]
                },
                {
                    "name": "auctionManagerStore",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "The store of the auction manager"
                    ]
                },
                {
                    "name": "vault",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "The vault"
                    ]
                },
                {
                    "name": "auction",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Auction"
                    ]
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token program"
                    ]
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "System program"
                    ]
                },
                {
                    "name": "rent",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Rent sysvar"
                    ]
                }

            ],
            "args": [
                {
                    "name": "args",
                    "type":
                    {
                        "defined": "EmptyPaymentAccountArgs"
                    },
                    "docs": []
                }

            ]
        },
        {
            "name": "SetStore",
            "docs": [
                "Given a signer wallet, create a store with pda ['metaplex', wallet] (if it does not exist) and/or update it",
                "(if it already exists). Stores can be set to open (anybody can publish) or closed (publish only via whitelist)."
            ],
            "accounts": [
                {
                    "name": "storeKey",
                    "isMut": true,
                    "isSigner": false,
                    "docs": [
                        "The store key, seed of ['metaplex', admin wallet]"
                    ]
                },
                {
                    "name": "adminWallet",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "The admin wallet"
                    ]
                },
                {
                    "name": "payer",
                    "isMut": false,
                    "isSigner": true,
                    "docs": [
                        "Payer"
                    ]
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token program"
                    ]
                },
                {
                    "name": "tokenVaultProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token vault program"
                    ]
                },
                {
                    "name": "tokenMetadataProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Token metadata program"
                    ]
                },
                {
                    "name": "auctionProgram",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Auction program"
                    ]
                },
                {
                    "name": "system",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "System"
                    ]
                },
                {
                    "name": "rent",
                    "isMut": false,
                    "isSigner": false,
                    "docs": [
                        "Rent sysvar"
                    ]
                }

            ],
            "args": [
                {
                    "name": "args",
                    "type":
                    {
                        "defined": "SetStoreArgs"
                    },
                    "docs": []
                }

            ]
        }








    ],
    "accounts": [],
    "types": [
        {
            "name": "AuctionManagerSettings",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "winning_configs",
                        "type":
                        {
                            "vec":
                            {
                                "defined": "WinningConfig"
                            }
                        },
                        "docs": [
                            "The safety deposit box index in the vault containing the winning items, in order of place",
                            "The same index can appear multiple times if that index contains n tokens for n appearances (this will be checked)"
                        ]
                    },
                    {
                        "name": "participation_config",
                        "type":
                        {
                            "option":
                            {
                                "defined": "ParticipationConfig"
                            }
                        },
                        "docs": [
                            "The participation config is separated because it is structurally a bit different,",
                            "having different options and also because it has no real \"winning place\" in the array."
                        ]
                    }

                ]
            }
        },
        {
            "name": "WinningConfig",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "items",
                        "type":
                        {
                            "vec":
                            {
                                "defined": "WinningConfigItem"
                            }
                        },
                        "docs": [
                            "For now these are just array-of-array proxies but wanted to make them first class",
                            "structs in case we want to attach other top level metadata someday."
                        ]
                    }

                ]
            }
        },
        {
            "name": "WinningConfigItem",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "safety_deposit_box_index",
                        "type": "u8",
                        "docs": []
                    },
                    {
                        "name": "amount",
                        "type": "u8",
                        "docs": []
                    },
                    {
                        "name": "winning_config_type",
                        "type":
                        {
                            "defined": "WinningConfigType"
                        },
                        "docs": []
                    }

                ]
            }
        },
        {
            "name": "WinningConfigType",
            "docs": [],
            "type":
            {
                "kind": "enum",
                "variants": [
                    {
                        "name": "TokenOnlyTransfer",
                        "docs": [
                            "You may be selling your one-of-a-kind NFT for the first time, but not it's accompanying Metadata,",
                            "of which you would like to retain ownership. You get 100% of the payment the first sale, then",
                            "royalties forever after.",
                            "",
                            "You may be re-selling something like a Limited/Open Edition print from another auction,",
                            "a master edition record token by itself (Without accompanying metadata/printing ownership), etc.",
                            "This means artists will get royalty fees according to the top level royalty % on the metadata",
                            "split according to their percentages of contribution.",
                            "",
                            "No metadata ownership is transferred in this instruction, which means while you may be transferring",
                            "the token for a limited/open edition away, you would still be (nominally) the owner of the limited edition",
                            "metadata, though it confers no rights or privileges of any kind."
                        ]
                    },
                    {
                        "name": "FullRightsTransfer",
                        "docs": [
                            "Means you are auctioning off the master edition record and it's metadata ownership as well as the",
                            "token itself. The other person will be able to mint authorization tokens and make changes to the",
                            "artwork."
                        ]
                    },
                    {
                        "name": "PrintingV1",
                        "docs": [
                            "Means you are using authorization tokens to print off editions during the auction using",
                            "from a MasterEditionV1"
                        ]
                    },
                    {
                        "name": "PrintingV2",
                        "docs": [
                            "Means you are using the MasterEditionV2 to print off editions"
                        ]
                    },
                    {
                        "name": "Participation",
                        "docs": [
                            "Means you are using a MasterEditionV2 as a participation prize."
                        ]
                    }

                ]
            }
        },
        {
            "name": "ParticipationConfig",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "winner_constraint",
                        "type":
                        {
                            "defined": "WinningConstraint"
                        },
                        "docs": [
                            "Setups:",
                            "1. Winners get participation + not charged extra",
                            "2. Winners dont get participation prize"
                        ]
                    },
                    {
                        "name": "non_winning_constraint",
                        "type":
                        {
                            "defined": "NonWinningConstraint"
                        },
                        "docs": [
                            "Setups:",
                            "1. Losers get prize for free",
                            "2. Losers get prize but pay fixed price",
                            "3. Losers get prize but pay bid price"
                        ]
                    },
                    {
                        "name": "safety_deposit_box_index",
                        "type": "u8",
                        "docs": [
                            "The safety deposit box index in the vault containing the template for the participation prize"
                        ]
                    },
                    {
                        "name": "fixed_price",
                        "type":
                        {
                            "option": "u64"
                        },
                        "docs": [
                            "Setting this field disconnects the participation prizes price from the bid. Any bid you submit, regardless",
                            "of amount, charges you the same fixed price."
                        ]
                    }

                ]
            }
        },
        {
            "name": "WinningConstraint",
            "docs": [],
            "type":
            {
                "kind": "enum",
                "variants": [
                    {
                        "name": "NoParticipationPrize",
                        "docs": []
                    },
                    {
                        "name": "ParticipationPrizeGiven",
                        "docs": []
                    }

                ]
            }
        },
        {
            "name": "NonWinningConstraint",
            "docs": [],
            "type":
            {
                "kind": "enum",
                "variants": [
                    {
                        "name": "NoParticipationPrize",
                        "docs": []
                    },
                    {
                        "name": "GivenForFixedPrice",
                        "docs": []
                    },
                    {
                        "name": "GivenForBidPrice",
                        "docs": []
                    }

                ]
            }
        },
        {
            "name": "EmptyPaymentAccountArgs",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "winning_config_index",
                        "type":
                        {
                            "option": "u8"
                        },
                        "docs": [
                            "If not redeeming a participation NFT's contributions, need to provide",
                            "the winning config index your redeeming for. For participation, just pass None."
                        ]
                    },
                    {
                        "name": "winning_config_item_index",
                        "type":
                        {
                            "option": "u8"
                        },
                        "docs": [
                            "If not redeeming a participation NFT, you also need to index into the winning config item's list."
                        ]
                    },
                    {
                        "name": "creator_index",
                        "type":
                        {
                            "option": "u8"
                        },
                        "docs": [
                            "index in the metadata creator list, can be None if metadata has no creator list."
                        ]
                    }

                ]
            }
        },
        {
            "name": "SetStoreArgs",
            "type":
            {
                "kind": "struct",
                "fields": [
                    {
                        "name": "public",
                        "type": "bool",
                        "docs": []
                    }

                ]
            }
        }


    ],
    "events": [],
    "errors": [],
    "metadata":
    {
        "address": ""
    }
}
